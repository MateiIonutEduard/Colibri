<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SdlDotNet</name>
    </assembly>
    <members>
        <member name="T:SdlDotNet.Audio.AudioException">
            <summary>
            Represents a Audio run-time error from the Sdl library.
            </summary>
        </member>
        <member name="T:SdlDotNet.Core.SdlException">
            <summary>
            Represents a run-time error from the Sdl library.
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.SdlException.#ctor">
            <summary>
            Returns basic exception
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.SdlException.#ctor(System.String)">
            <summary>
            Initializes an SdlException instance
            </summary>
            <param name="message">
            The string representing the error message
            </param>
        </member>
        <member name="M:SdlDotNet.Core.SdlException.#ctor(System.String,System.Exception)">
            <summary>
            Returns exception
            </summary>
            <param name="message">Exception message</param>
            <param name="exception">Exception type</param>
        </member>
        <member name="M:SdlDotNet.Core.SdlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Returns SerializationInfo
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SdlDotNet.Core.SdlException.Generate">
            <summary>
            Generates an SdlException based on the last Sdl Error code.
            </summary>
            <returns>
            A new SdlException object
            </returns>
        </member>
        <member name="P:SdlDotNet.Core.SdlException.GetError">
            <summary>
            Returns SDL error.
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.AudioException.#ctor">
            <summary>
            Returns basic exception
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.AudioException.#ctor(System.String)">
            <summary>
            Initializes an AudioException instance
            </summary>
            <param name="message">
            The string representing the error message
            </param>
        </member>
        <member name="M:SdlDotNet.Audio.AudioException.#ctor(System.String,System.Exception)">
            <summary>
            Returns exception
            </summary>
            <param name="message">Exception message</param>
            <param name="exception">Exception type</param>
        </member>
        <member name="M:SdlDotNet.Audio.AudioException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Returns SerializationInfo
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SdlDotNet.Audio.AudioStream">
            <summary>
            An active audio stream for queueing audio data to be played asynchronously.
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.AudioStream.#ctor(System.Int32,SdlDotNet.Audio.AudioFormat,SdlDotNet.Audio.SoundChannel,System.Int16,SdlDotNet.Audio.AudioCallback,System.Object)">
            <summary>
            Creates an AudioStream
            </summary>
            <param name="sampleFrequency">Frequency</param>
            <param name="format">format of stream data</param>
            <param name="channels">Mono or Stereo</param>
            <param name="samples">number of samples</param>
            <param name="callback">Method callback to get more data</param>
            <param name="data">data object</param>
        </member>
        <member name="M:SdlDotNet.Audio.AudioStream.#ctor(System.Int32,SdlDotNet.Audio.AudioFormat,SdlDotNet.Audio.SoundChannel,System.Int16)">
            <summary>
            Creates an AudioStream
            </summary>
            <param name="sampleFrequency">Frequency</param>
            <param name="format">format of stream data</param>
            <param name="channels">Mono or Stereo</param>
            <param name="samples">number of samples</param>
        </member>
        <member name="M:SdlDotNet.Audio.AudioStream.Write(System.Int16[])">
            <summary>
            Asynchronously queues audio data in <paramref name="data"/>.
            </summary>
            <param name="data">Buffer formatted as <see cref="F:SdlDotNet.Audio.AudioFormat.Unsigned16Little"/> of audio data to be played</param>
        </member>
        <member name="P:SdlDotNet.Audio.AudioStream.Offset">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.AudioStream.AudioStatus">
            <summary>
            Returns the current playback state of the audio subsystem.  See <see cref="P:SdlDotNet.Audio.AudioStream.AudioStatus"/>.
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.AudioStream.Paused">
            <summary>
            Gets or sets the paused state of the audio subsystem.
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.AudioStream.Bits">
            <summary>
            Returns the format of the stream
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.AudioStream.Samples">
            <summary>
            Size of the SDL audio sample buffer
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.AudioStream.RemainingSamples">
            <summary>
            Total remaining samples queued
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.AudioStream.RemainingMilliseconds">
            <summary>
            Total remaining milliseconds before sample queue is emptied
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.AudioStream.RemainingQueues">
            <summary>
            Remaining number of buffers queued
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.AudioStream.Frequency">
            <summary>
            Audio frequency in samples per second
            </summary>
            <remarks>
            The number of samples sent to the sound device every second.  
            Common values are 11025, 22050 and 44100. The higher the better.
            </remarks>
        </member>
        <member name="P:SdlDotNet.Audio.AudioStream.Format">
            <summary>
            Audio data format.
            </summary>
            <remarks>
            Specifies the size and type of each sample element.
            </remarks>
        </member>
        <member name="P:SdlDotNet.Audio.AudioStream.Channels">
            <summary>
            Number of channels: 1 mono, 2 stereo.
            </summary>
            <remarks>
            The number of seperate sound channels. 
            1 is mono (single channel), 2 is stereo (dual channel).
            </remarks>
        </member>
        <member name="P:SdlDotNet.Audio.AudioStream.BufferSamples">
            <summary>
            Audio buffer size in samples.
            </summary>
            <remarks>
            When used with <see cref="M:SdlDotNet.Audio.Mixer.OpenAudio(SdlDotNet.Audio.AudioStream)"/> this refers 
            to the size of the 
            audio buffer in samples. A sample a chunk of audio data
             of the size specified in format mulitplied by the number
              of channels.
            </remarks>
        </member>
        <member name="P:SdlDotNet.Audio.AudioStream.BufferSize">
            <summary>
            Audio buffer size in bytes (calculated)
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.AudioStream.Silence">
            <summary>
            Audio buffer silence value (calculated).
            </summary>
        </member>
        <member name="T:SdlDotNet.Audio.CDDrive">
            <summary>
            Represents an individual CD drive on the system
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:SdlDotNet.Core.BaseSdlResource">
            <summary>
            Base class for SdlResources
            </summary>
            <remarks>
            Several SdlDotNet classes inherit from this class
            </remarks>
        </member>
        <member name="M:SdlDotNet.Core.BaseSdlResource.#ctor(System.IntPtr)">
            <summary>
            Creates class using a handle.
            </summary>
            <param name="handle">
            Pointer to unmanaged Sdl resource
            </param>
            <remarks>
            Often used by internal classes.
            </remarks>
        </member>
        <member name="M:SdlDotNet.Core.BaseSdlResource.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            Used by outside classes.
            </remarks>
        </member>
        <member name="M:SdlDotNet.Core.BaseSdlResource.Finalize">
            <summary>
            Allows an Object to attempt to free resources 
            and perform other cleanup operations before the Object 
            is reclaimed by garbage collection.
            </summary>
            <remarks>
            Frees managed resources
            </remarks>
        </member>
        <member name="M:SdlDotNet.Core.BaseSdlResource.Dispose(System.Boolean)">
            <summary>
            Dispose objects
            </summary>
            <param name="disposing">
            If true, it will dispose close the handle
            </param>
            <remarks>
            Will dispose managed and unmanaged resources.
            </remarks>
        </member>
        <member name="M:SdlDotNet.Core.BaseSdlResource.CloseHandle">
            <summary>
            Close the handle.
            </summary>
            <remarks>
            Used to close handle to unmanaged SDL resources
            </remarks>
        </member>
        <member name="M:SdlDotNet.Core.BaseSdlResource.Dispose">
            <summary>
            Closes and destroys this object
            </summary>
            <remarks>
            Destroys managed and unmanaged objects
            </remarks>
        </member>
        <member name="M:SdlDotNet.Core.BaseSdlResource.Close">
            <summary>
            Closes and destroys this object
            </summary>
            <remarks>
            Same as Dispose(true)
            </remarks>
        </member>
        <member name="P:SdlDotNet.Core.BaseSdlResource.Handle">
            <summary>
            
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.CDDrive.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Represents a CD drive on the system
            </summary>
            <param name="handle">Handle to CDDrive</param>
            <param name="index">Index number of drive</param>
            <remarks>used internally</remarks>
        </member>
        <member name="M:SdlDotNet.Audio.CDDrive.#ctor(System.Int32)">
            <summary>
            Represents a CDROM drive on the system
            </summary>
            <param name="index">Index number of drive</param>
            <remarks>Initializes drive</remarks>
            <exception cref="T:SdlDotNet.Core.SdlException">
            An exception will be thrown if the drive number 
            is below zero or above the number of drive on the system.
            </exception>
        </member>
        <member name="M:SdlDotNet.Audio.CDDrive.DriveName">
            <summary>
            Returns a platform-specific name for a CD-ROM drive
            </summary>
            <remarks></remarks>
            <returns>A platform-specific name, i.e. "D:\"</returns>
        </member>
        <member name="M:SdlDotNet.Audio.CDDrive.Dispose(System.Boolean)">
            <summary>
            Disposes object.
            </summary>
            <remarks>Destroys unmanaged resources</remarks>
            <param name="disposing">
            If true, it disposes the handle to the drive
            </param>
        </member>
        <member name="M:SdlDotNet.Audio.CDDrive.CloseHandle">
            <summary>
            Closes CDDrive handle
            </summary>
            <remarks>Closes handle to unmanaged SDL resource</remarks>
        </member>
        <member name="M:SdlDotNet.Audio.CDDrive.IsAudioTrack(System.Int32)">
            <summary>
            Checks to see if the track has audio data.
            </summary>
            <remarks></remarks>
            <param name="trackNumber">
            Returns true if the track is an audio track
            </param>
        </member>
        <member name="M:SdlDotNet.Audio.CDDrive.IsDataTrack(System.Int32)">
            <summary>
            Checks to see if the track is a data track.
            </summary>
            <remarks></remarks>
            <param name="trackNumber">
            Returns true if the track is a data track
            </param>
        </member>
        <member name="M:SdlDotNet.Audio.CDDrive.TrackLength(System.Int32)">
            <summary>
            Returns the length of an audio track in seconds.
            </summary>
            <remarks></remarks>
            <param name="trackNumber">Track to query</param>
        </member>
        <member name="M:SdlDotNet.Audio.CDDrive.TrackStart(System.Int32)">
            <summary>
            Returns the number of seconds before the audio track starts on the cd.
            </summary>
            <remarks></remarks>
            <param name="trackNumber">Track to query</param>
        </member>
        <member name="M:SdlDotNet.Audio.CDDrive.TrackEnd(System.Int32)">
            <summary>
            Returns the end time of the track in seconds.
            </summary>
            <remarks></remarks>
            <param name="trackNumber">Track to query</param>
        </member>
        <member name="M:SdlDotNet.Audio.CDDrive.Play(System.Int32,System.Int32)">
            <summary>
            Plays the tracks on a CD in the drive
            </summary>
            <remarks></remarks>
            <param name="startTrack">
            The starting track to play (numbered 0-99)
            </param>
            <param name="numberOfTracks">
            The number of tracks to play
            </param>
        </member>
        <member name="M:SdlDotNet.Audio.CDDrive.Play(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Plays the tracks on a CD in the drive
            </summary>
            <param name="startTrack">
            The starting track to play 
            (numbered 0-99)
            </param>
            <param name="startFrame">
            The frame (75th of a second increment) offset from the 
            starting track to play from
            </param>
            <param name="numberOfTracks">
            The number of tracks to play
            </param>
            <param name="numberOfFrames">
            The frame (75th of a second increment) offset after the last 
            track to stop playing after
            </param>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.CDDrive.Play(System.Int32)">
            <summary>
            Play CD from a given track
            </summary>
            <remarks></remarks>
            <param name="startTrack">Track to start from</param>
        </member>
        <member name="M:SdlDotNet.Audio.CDDrive.Play">
            <summary>
            Play CD from the first track.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.CDDrive.Pause">
            <summary>
            Pauses the CD in this drive
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.CDDrive.Resume">
            <summary>
            Resumes a previously paused CD in this drive
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.CDDrive.Stop">
            <summary>
            Stops playing the CD in this drive
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.CDDrive.Eject">
            <summary>
            Ejects this drive
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:SdlDotNet.Audio.CDDrive.Index">
            <summary>
            The drive number
            </summary>
            <remarks>Returns the drive number.</remarks>
        </member>
        <member name="P:SdlDotNet.Audio.CDDrive.Status">
            <summary>
            Gets the current drive status
            </summary>
            <remarks>
            used to determine if the drive is busy, stopped, empty.
            </remarks>
        </member>
        <member name="P:SdlDotNet.Audio.CDDrive.IsPlaying">
            <summary>
            Checks to see if the CD is currently playing.
            </summary>
            <remarks>
            Returns true if the drive is in use.
            </remarks>
        </member>
        <member name="P:SdlDotNet.Audio.CDDrive.IsEmpty">
            <summary>
            Checks to see if the CD drive is currently empty.
            </summary>
            <remarks>
            Returns true if the drive is empty.
            </remarks>
        </member>
        <member name="P:SdlDotNet.Audio.CDDrive.IsPaused">
            <summary>
            Checks to see if the CD drive is currently paused.
            </summary>
            <remarks>Returns true if the drive has been paused.</remarks>
        </member>
        <member name="P:SdlDotNet.Audio.CDDrive.NumberOfTracks">
            <summary>
            Gets the number of tracks in the currently inserted CD
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:SdlDotNet.Audio.CDDrive.CurrentTrack">
            <summary>
            Gets the currently playing track number
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:SdlDotNet.Audio.CDDrive.CurrentTrackFrame">
            <summary>
            Gets the currently playing frame of the current track.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:SdlDotNet.Audio.CDDrive.CurrentTrackSeconds">
            <summary>
            Gets the number of seconds into the current track.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:SdlDotNet.Audio.CDRom">
            <summary>
            Contains methods querying the CD drives on the system.
            </summary>
            <remarks>
            This class is initialized when the CDDrive object is first called.
            </remarks>
        </member>
        <member name="M:SdlDotNet.Audio.CDRom.Close">
            <summary>
            Closes and destroys this object
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.CDRom.Initialize">
            <summary>
            Starts the CDRom subsystem. 
            </summary>
            <remarks>
            This normally automatically started when 
            the CDRom or the CDDrive classes are initialized. 
            </remarks>
        </member>
        <member name="M:SdlDotNet.Audio.CDRom.IsValidDriveNumber(System.Int32)">
            <summary>
            Checks if the drive number is valid
            </summary>
            <param name="index">drive number</param>
            <returns>
            true is the number is greater than 0 and less 
            than the number of drives on the system.
            </returns>
        </member>
        <member name="M:SdlDotNet.Audio.CDRom.OpenDrive(System.Int32)">
            <summary>
            Opens a CD-ROM drive for manipulation
            </summary>
            <param name="index">
            The number of the drive to open, from 0 - CDAudio.NumDrives
            </param>
            <returns>
            The CDDrive object representing the CD-ROM drive
            </returns>
            <remarks>
            Opens a CD-ROM drive for manipulation
            </remarks>
        </member>
        <member name="M:SdlDotNet.Audio.CDRom.DriveName(System.Int32)">
            <summary>
            Returns a platform-specific name for a CD-ROM drive
            </summary>
            <param name="index">The number of the drive</param>
            <returns>A platform-specific name, i.e. "D:\"</returns>
            <remarks>
            </remarks>
        </member>
        <member name="P:SdlDotNet.Audio.CDRom.IsInitialized">
            <summary>
            Returns true if the CDRom system has been initialized
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.CDRom.NumberOfDrives">
            <summary>
            Gets the number of CD-ROM drives available on the system
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:SdlDotNet.Audio.Channel">
            <summary>
            Represents a channel that can play a sound sample.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.#ctor(System.Int32)">
            <summary>
            Creates a channel with the given index
            </summary>
            <param name="index">Index number of channel</param>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.Play(SdlDotNet.Audio.Sound)">
            <summary>
            Plays a sound once on a specific channel
            </summary>
            <param name="sound">The sound to play</param>
            <returns>The channel used to play the sound</returns>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.Play(SdlDotNet.Audio.Sound,System.Int32)">
            <summary>
            Plays a sound the specified number of times on a specific channel
            </summary>
            <param name="sound">The sound to play</param>
            <param name="loops">
            The number of loops.  Specify 1 to have the sound play twice
            </param>
            <returns>The channel used to play the sound</returns>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.Play(SdlDotNet.Audio.Sound,System.Int32,System.Int32)">
            <summary>
            Plays a sound the specified number of times on a 
            specific channel, stopping after the specified number of ms
            </summary>
            <param name="sound">The sound to play</param>
            <param name="loops">
            The number of loops.  Specify 1 to have the sound play twice
            </param>
            <param name="milliseconds">The time limit in milliseconds</param>
            <returns>The channel used to play the sound</returns>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.Play(SdlDotNet.Audio.Sound,System.Boolean)">
            <summary>
            Plays a sound the specified number of times on a specific channel
            </summary>
            <param name="sound">The sound to play</param>
            <param name="continuous">If true, sound will be looped.</param>
            <returns>The channel used to play the sound</returns>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.PlayTimed(SdlDotNet.Audio.Sound,System.Int32)">
            <summary>
            Plays a sound the specified number of times on a 
            specific channel, stopping after the specified number of ms
            </summary>
            <param name="sound">The sound to play</param>
            <param name="milliseconds">The time limit in milliseconds</param>
            <returns>The channel used to play the sound</returns>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.FadeIn(SdlDotNet.Core.BaseSdlResource,System.Int32,System.Int32)">
            <summary>
            Fades in a sound the specified number of times on a 
            specific channel
            </summary>
            <param name="sound">The sound to play</param>
            <param name="milliseconds">
            The number of milliseconds to fade in for
            </param>
            <param name="loops">
            The number of loops.  
            Specify 1 to have the sound play twice
            </param>
            <returns>The channel used to play the sound</returns>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.FadeIn(SdlDotNet.Core.BaseSdlResource,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fades in a sound the specified number of times on 
            a specific channel, stopping after the specified number of ms
            </summary>
            <param name="sound">The sound to play</param>
            <param name="milliseconds">The number of milliseconds to fade in for
            </param>
            <param name="loops">The number of loops.  
            Specify 1 to have the sound play twice</param>
            <param name="ticks">The time limit in milliseconds</param>
            <returns>The channel used to play the sound</returns>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.Pause">
            <summary>
            Pauses playing on a specific channel
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.Resume">
            <summary>
            Resumes playing on a paused channel
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.Stop">
            <summary>
            Stop playing on a specific channel
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.Expire(System.Int32)">
            <summary>
            Stop playing a channel after a specified time interval
            </summary>
            <param name="ms">
            The number of milliseconds to stop playing after
            </param>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.Fadeout(System.Int32)">
            <summary>
            Fades out a channel.
            </summary>
            <param name="ms">
            The number of milliseconds to fade out for
            </param>
            <returns>The number of channels fading out</returns>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.IsPlaying">
            <summary>
            Returns a flag indicating whether or not a channel is playing
            </summary>
            <returns>True if the channel is playing, otherwise False</returns>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.IsPaused">
            <summary>
            Returns a flag indicating whether or not a channel is paused
            </summary>
            <returns>True if the channel is paused, otherwise False</returns>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.FadingStatus">
            <summary>
            Returns the current fading status of a channel
            </summary>
            <returns>The current fading status of the channel</returns>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.SetPanning(System.Int32,System.Int32)">
            <summary>
            Sets the panning (stereo attenuation) for a specific channel
            </summary>
            <param name="left">A left speaker value from 0-255 inclusive</param>
            <param name="right">A right speaker value from 0-255 inclusive</param>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.Distance(System.Byte)">
            <summary>
            Sets the distance (attenuate sounds based on distance 
            from listener) for a specific channel
            </summary>
            <param name="distanceValue">
            Distance value from 0-255 inclusive
            </param>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.SetPosition(System.Int32,System.Int32)">
            <summary>
            Sets the "position" of a sound (approximate '3D' audio)
             for a specific channel
            </summary>
            <param name="angle">The angle of the sound, between 0 and 359,
             0 = directly in front</param>
            <param name="distance">The distance of the sound from 0-255
             inclusive</param>
             <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.ReverseStereo(System.Boolean)">
            <summary>
            Flips the left and right stereo for the channel
            </summary>
            <param name="flip">True to flip, False to reset to normal</param>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.EnableChannelFinishedCallback">
            <summary>
            Enables the callback for this channel
            </summary>
            <remarks>
            When the sound stops playing, the delegate will be called.
            </remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.Dispose(System.Boolean)">
            <summary>
            Destroy sprite
            </summary>
            <param name="disposing">If true, remove all unamanged resources</param>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.Dispose">
            <summary>
            Destroy object
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.Close">
            <summary>
            Destroy object
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.Channel.Finalize">
            <summary>
            Destroy object
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.Channel.Index">
            <summary>
            Returns index of channel
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:SdlDotNet.Audio.Channel.Volume">
            <summary>
            Sets the volume for a channel
            </summary>
            <returns>Channel volume</returns>
            <remarks></remarks>
        </member>
        <member name="P:SdlDotNet.Audio.Channel.Sound">
            <summary>
            Returns the Sound object that is attached to this channel
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:SdlDotNet.Audio.Channel.LastSound">
            <summary>
            Returns sound previously played on this channel
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:SdlDotNet.Audio.Channel.QueuedSound">
            <summary>
            Returns queued sound on this channel
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:SdlDotNet.Audio.ChannelFinishedEventArgs">
            <summary>
            Events args for when a channel finishes playing a sound.
            </summary>
            <remarks>
            This will create event args to trigger an 
            event after a sound has finished playing.
            </remarks>
        </member>
        <member name="T:SdlDotNet.Core.UserEventArgs">
            <summary>
            Event args for user-defined events.
            </summary>
        </member>
        <member name="T:SdlDotNet.Core.SdlEventArgs">
            <summary>
            Base class for SdlEventArgs.
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.SdlEventArgs.eventStruct">
            <summary>
            Corrresponding SDL_Event
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.SdlEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.SdlEventArgs.#ctor(Tao.Sdl.Sdl.SDL_Event)">
            <summary>
            Holds SDL_Event
            </summary>
            <param name="eventStruct">Event Struct</param>
        </member>
        <member name="M:SdlDotNet.Core.SdlEventArgs.CreateEventArgs(Tao.Sdl.Sdl.SDL_Event)">
            <summary>
            
            </summary>
            <param name="ev"></param>
            <returns></returns>
        </member>
        <member name="P:SdlDotNet.Core.SdlEventArgs.EventStruct">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Core.SdlEventArgs.Type">
            <summary>
            Returns Event type
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.UserEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.UserEventArgs.#ctor(System.Object)">
            <summary>
            Constructor for using a given user event
            </summary>
            <param name="userEvent">The user event object</param>
        </member>
        <member name="M:SdlDotNet.Core.UserEventArgs.#ctor(Tao.Sdl.Sdl.SDL_Event)">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Core.UserEventArgs.UserEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Core.UserEventArgs.UserCode">
            <summary>
            User code that uniquely defines this user event.
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.ChannelFinishedEventArgs.#ctor(System.Int32)">
            <summary>
            Constructor 
            </summary>
            <remarks>Can be passed into the event queue.</remarks>
            <param name="channel">The channel which has finished</param>
        </member>
        <member name="P:SdlDotNet.Audio.ChannelFinishedEventArgs.Channel">
            <summary>
            Return channel number
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:SdlDotNet.Audio.AudioFormat">
            <summary>
            Specifies an audio format to mix audio in
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:SdlDotNet.Audio.AudioFormat.None">
            <summary>
            None. required by FXCop
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.AudioFormat.Unsigned8">
            <summary>
            Unsigned 8-bit
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.AudioFormat.Signed8">
            <summary>
            Signed 8-bit
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.AudioFormat.Unsigned16Little">
            <summary>
            Unsigned 16-bit, little-endian
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.AudioFormat.Signed16Little">
            <summary>
            Signed 16-bit, little-endian
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.AudioFormat.Unsigned16Big">
            <summary>
            Unsigned 16-bit, big-endian
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.AudioFormat.Signed16Big">
            <summary>
            Signed 16-bit, big-endian
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.AudioFormat.Default">
            <summary>
            Default, equal to Signed16Little
            </summary>
        </member>
        <member name="T:SdlDotNet.Audio.FadingStatus">
            <summary>
            Indicates the current fading status of a sound
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:SdlDotNet.Audio.FadingStatus.NoFading">
            <summary>
            Sound is not fading
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.FadingStatus.FadingOut">
            <summary>
            Sound is fading out
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.FadingStatus.FadingIn">
            <summary>
            Sound is fading in
            </summary>
        </member>
        <member name="T:SdlDotNet.Audio.SoundChannel">
            <summary>
            Type of sound channel
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:SdlDotNet.Audio.SoundChannel.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.SoundChannel.Mono">
            <summary>
            Mono
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.SoundChannel.Stereo">
            <summary>
            Stereo
            </summary>
        </member>
        <member name="T:SdlDotNet.Audio.CDTrackType">
            <summary>
            CD Track Type
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:SdlDotNet.Audio.CDTrackType.Audio">
            <summary>
            Audio
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.CDTrackType.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:SdlDotNet.Audio.AudioStatus">
            <summary>
            Audio playing status
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.AudioStatus.Stopped">
            <summary>
            Audio is not playing
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.AudioStatus.Playing">
            <summary>
            Audio is paused
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.AudioStatus.Paused">
            <summary>
            Audio is currently playing
            </summary>
        </member>
        <member name="T:SdlDotNet.Audio.CDStatus">
            <summary>
            The possible states which a CD-ROM drive can be in.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:SdlDotNet.Audio.CDStatus.TrayEmpty">
            <summary>
            The CD tray is empty.
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.CDStatus.Stopped">
            <summary>
            The CD has stopped playing.
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.CDStatus.Playing">
            <summary>
            The CD is playing.
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.CDStatus.Paused">
            <summary>
            The CD has been paused.
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.CDStatus.Error">
            <summary>
            An error occured while getting the status.
            </summary>
        </member>
        <member name="T:SdlDotNet.Audio.SoundAction">
            <summary>
            SoundAction
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:SdlDotNet.Audio.SoundAction.Stop">
            <summary>
            Stop sound
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.SoundAction.Fadeout">
            <summary>
            Fadeout sound
            </summary>
        </member>
        <member name="T:SdlDotNet.Audio.MusicType">
            <summary>
            MusicType
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:SdlDotNet.Audio.MusicType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.MusicType.ExternalCommand">
            <summary>
            Starts external player
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.MusicType.Wave">
            <summary>
            .WAV file
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.MusicType.Mod">
            <summary>
            Mod music file
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.MusicType.Midi">
            <summary>
            MIDI file
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.MusicType.Ogg">
            <summary>
            Ogg file
            </summary>
        </member>
        <member name="F:SdlDotNet.Audio.MusicType.Mp3">
            <summary>
            mp3 file
            </summary>
        </member>
        <member name="T:SdlDotNet.Audio.AudioCallback">
            <summary>
            Used in the SDL_AudioSpec struct
            </summary>
        </member>
        <member name="T:SdlDotNet.Audio.Mixer">
            <summary>
            Provides methods to access the sound system.
            You can obtain an instance of this class by accessing the 
            Mixer property of the main Sdl object.
            </summary>
            <remarks>
            Before instantiating an instance of Movie,
            you must call Mixer.Close() to turn off the default mixer.
            If you do not do this, any movie will play very slowly. 
            Smpeg uses a custom mixer for audio playback. 
            </remarks>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.OpenAudio(SdlDotNet.Audio.AudioStream)">
            <summary>
            Open Audio device
            </summary>
            <param name="stream">stream to open</param>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.Close">
            <summary>
            Closes and destroys this object
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.Initialize">
            <summary>
            Start Mixer subsystem
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.Open">
            <summary>
            Re-opens the sound system with default values.  
            You do not have to call this method
            in order to start using the Mixer object.
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.Open(System.Int32,SdlDotNet.Audio.AudioFormat,SdlDotNet.Audio.SoundChannel,System.Int32)">
            <summary>
            Re-opens the sound-system. You do not have to call this method
            in order to start using the Mixer object.
            </summary>
            <param name="frequency">The frequency to mix at</param>
            <param name="format">The audio format to use</param>
            <param name="soundChannels">
            Number of sound channels in output.  
            Set to SoundChannel.Stereo for stereo, SoundChannel.Mono for mono. 
            This has nothing to do with mixing channels.
            </param>
            <param name="chunkSize">The chunk size for samples</param>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.CreateChannel(System.Int32)">
            <summary>
            Creates sound channel
            </summary>
            <param name="index">Index of new channel</param>
            <returns>new Channel</returns>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.Sound(System.String)">
            <summary>
            Loads a .wav, .ogg, .mp3, .mod or .mid file into memory
            </summary>
            <param name="file">sound file name</param>
            <returns>Sound object</returns>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.Load(System.String,System.Int64@)">
            <summary>
            Loads a .wav, .ogg, .mp3, .mod or .mid  file into memory
            </summary>
            <param name="file">The filename to load</param>
            <param name="size">Output long variable for the size of the sound object.</param>
            <returns>A new Sound object</returns>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.Sound(System.Byte[])">
            <summary>
            Loads a .wav, .ogg, .mp3, .mod or .mid file from a byte array
            </summary>
            <param name="data">The data to load</param>
            <returns>A new Sound object</returns>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.Load(System.Byte[],System.Int64@)">
            <summary>
            Loads a .wav, .ogg, .mp3, .mod or .mid file from a byte array
            </summary>
            <param name="data">The data to load</param>
            <param name="size">Output variable for the size of the sound object.</param>
            <returns>A new Sound object</returns>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.LoadMusic(System.String)">
            <summary>
            Loads a music sample from a filename returning the pointer to the sample.
            </summary>
            <param name="filename">The file path to load.</param>
            <returns>The IntPtr handle to the music sample in memory.</returns>
            <exception cref="T:SdlDotNet.Core.SdlException">Thrown if an error occurs when loading the sample.</exception>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.LoadMusic(System.Byte[])">
            <summary>
            Loads a music sample from a byte array returning the pointer to the sample.
            </summary>
            <param name="data">data buffer to load.</param>
            <returns>The IntPtr handle to the music sample in memory.</returns>
            <exception cref="T:SdlDotNet.Core.SdlException">Thrown if an error occurs when loading the sample.</exception>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.ReserveChannels(System.Int32)">
            <summary>
            These channels will be resrved
            </summary>
            <param name="numberOfChannels">number of channels to reserve</param>
            <returns>
            Number of channels actually reserved. This may be fewer than the number requested.
            </returns>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.CancelReserveChannels">
            <summary>
            Stop reserving any channels.
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.FindAvailableChannel">
            <summary>
            Returns the index of an available channel
            </summary>
            <returns>Index of available channel</returns>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.SetAllChannelsVolume(System.Int32)">
            <summary>
            Sets the volume for all channels
            </summary>
            <param name="volume">A new volume value, between 0 and 128 inclusive</param>
            <returns>New average channel volume</returns>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.Pause">
            <summary>
            Pauses playing on all channels
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.Resume">
            <summary>
            Resumes playing on all paused channels
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.Stop">
            <summary>
            Stop playing on all channels
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.Expire(System.Int32)">
            <summary>
            Stop playing on all channels after a specified time interval
            </summary>
            <param name="milliseconds">
            The number of milliseconds to stop playing after
            </param>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.Fadeout(System.Int32)">
            <summary>
            Fades out all channels
            </summary>
            <param name="milliseconds">
            The number of milliseconds to fade out for
            </param>
            <returns>The number of channels fading out</returns>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.NumberOfChannelsPlaying">
            <summary>
            Returns the number of currently playing channels
            </summary>
            <returns>The number of channels playing</returns>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.NumberOfChannelsPaused">
            <summary>
            Returns the number of paused channels
            </summary>
            <remarks>
            Number of channels paused.
            </remarks>
            <returns>The number of channels paused</returns>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.SetPanning(System.Int32,System.Int32)">
            <summary>
            Sets the panning (stereo attenuation) for all channels
            </summary>
            <param name="left">
            A left speaker value from 0-255 inclusive
            </param>
            <param name="right">
            A right speaker value from 0-255 inclusive
            </param>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.SetPosition(System.Int32,System.Int32)">
            <summary>
            Sets the "position" of a sound (approximate '3D' audio) 
            for all channels
            </summary>
            <param name="angle">The angle of the sound, between 0 and 359,
             0 = directly in front</param>
            <param name="distance">
            The distance of the sound from 0-255 inclusive
            </param>
        </member>
        <member name="M:SdlDotNet.Audio.Mixer.ReverseStereo(System.Boolean)">
            <summary>
            Flips the left and right stereo for all channels
            </summary>
            <param name="flip">True to flip, False to reset to normal</param>
        </member>
        <member name="P:SdlDotNet.Audio.Mixer.AudioOpen">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.Mixer.AudioLocked">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.Mixer.IsInitialized">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.Mixer.Locked">
            <summary>
            Gets or sets the locked status of the audio subsystem.  Necessary when data is 
            shared between the <see cref="T:Tao.Sdl.Sdl.AudioSpecCallbackDelegate">callback</see> and the main thread.
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.Mixer.IsOpen">
            <summary>
            Returns whether the audio subsystem is open or not.
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.Mixer.ChannelsAllocated">
            <summary>
            Changes the number of channels allocated for mixing
            </summary>
            <returns>The number of channels allocated</returns>
        </member>
        <member name="P:SdlDotNet.Audio.Mixer.Distance">
            <summary>
            Sets the distance (attenuate sounds based on distance 
            from listener) for all channels
            </summary>
        </member>
        <member name="T:SdlDotNet.Audio.Music">
            <summary>
            Represents a music sample.  Music is generally longer than a sound effect sample,
            however it can also be compressed e.g. by Ogg Vorbis
            </summary>
            <example>
            <code>
            Music techno = new Music("techno.mp3");
            Music jazz = new Music("jazz.mid");
            
            techno.Play();
            
            if(Music.CurrentMusic == techno)
            	jazz.Play();
            	
            Music.FadeOut(1000);
            Music.Volume = 50;
            
            techno.FadeIn(1, 500);
            techno.QueuedMusic = jazz;  // Play jazz after techno finishes playing
            jazz.QueuedMusic = techno;  // Play techno after jazz finishes playing
            
            Music.EnableMusicFinishedCallback(); // Enable processing queues.
            </code>
            </example>
        </member>
        <member name="M:SdlDotNet.Audio.Music.#ctor(System.String)">
            <summary>
            Loads a music sample from a file.
            </summary>
            <param name="fileName">The file path to load from.</param>
        </member>
        <member name="M:SdlDotNet.Audio.Music.#ctor(System.Byte[])">
            <summary>
            Loads a music sample from a byte array.
            </summary>
            <param name="data">data buffer</param>
        </member>
        <member name="M:SdlDotNet.Audio.Music.CloseHandle">
            <summary>
            Closes Music handle
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.Music.Play">
            <summary>
            Plays the music sample
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.Music.Play(System.Boolean)">
            <summary>
            Plays the music sample
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.Music.Play(System.Int32)">
            <summary>
            Plays the music sample
            </summary>
            <param name="numberOfTimes">
            The number of times to play. 
            Specify 1 to play a single time, -1 to loop forever.
            </param>
        </member>
        <member name="M:SdlDotNet.Audio.Music.FadeIn(System.Int32,System.Int32)">
            <summary>
            Plays the music sample and fades it in
            </summary>
            <param name="numberOfTimes">
            The number of times to play. 
            Specify 1 to play a single time, -1 to loop forever.
            </param>
            <param name="milliseconds">
            The number of milliseconds to fade in for
            </param>
        </member>
        <member name="M:SdlDotNet.Audio.Music.FadeInPosition(System.Int32,System.Int32,System.Double)">
            <summary>
            Plays the music sample, starting from a specific 
            position and fades it in
            </summary>
            <param name="numberOfTimes">
            The number of times to play.
             Specify 1 to play a single time, -1 to loop forever.
             </param>
            <param name="milliseconds">
            The number of milliseconds to fade in for
            </param>
            <param name="position">
            A format-defined position value. 
            For Ogg Vorbis, this is the number of seconds from the
             beginning of the song
             </param>
        </member>
        <member name="M:SdlDotNet.Audio.Music.ToString">
            <summary>
            Returns a System.String that represents the current Music object.
            </summary>
            <returns>
            A System.String that represents the Music object (the filename).
            </returns>
        </member>
        <member name="P:SdlDotNet.Audio.Music.IsInitialized">
            <summary>
            Has the music system been initialized
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.Music.FileName">
            <summary>
            Gets the filename of the music sample.
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.Music.QueuedMusic">
            <summary>
            Gets and sets the next queued music sample after this one completes.
            </summary>
            <remarks>
            You must call Music.EnableMusicFinishedCallback before this can work.
            </remarks>
        </member>
        <member name="P:SdlDotNet.Audio.Music.MusicType">
            <summary>
            Gets the format of the music data type.
            </summary>
        </member>
        <member name="T:SdlDotNet.Audio.MusicCollection">
            <summary>
            Encapsulates the collection of Music objects.
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.MusicCollection.#ctor">
            <summary>
            Creates an empty List
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.MusicCollection.CreateQueueList">
            <summary>
            Makes each music item in the collection queue the next item in the collection.
            </summary>
            <remarks>You must call <see cref="M:SdlDotNet.Audio.MusicPlayer.EnableMusicFinishedCallback"/>() to enable queueing.</remarks>
        </member>
        <member name="M:SdlDotNet.Audio.MusicCollection.AddFromDirectory(System.String)">
            <summary>
            Makes a music collection from the files held within the given directory.
            </summary>
            <remarks>Doesn't throw an exception when attempting to load from an invalid file format within the directory.</remarks>
            <param name="dir">The path to the directory to load.</param>
            <returns>The new MusicCollection that was created.</returns>
        </member>
        <member name="T:SdlDotNet.Audio.MusicDictionary">
            <summary>
            Represents a collection of music samples 
            held together by a dictionary key-value base.
            </summary>
            <example>
            <code>
            MusicCollection tunes = new MusicCollection();
            
            tunes.Add("techno", "techno.mid");
            tunes.Add("jazz.mid");
            
            tunes["techo"].Play();
            tunes["jazz.mid"].Play();
            </code>
            </example>
        </member>
        <member name="M:SdlDotNet.Audio.MusicDictionary.#ctor">
            <summary>
            Creates an empty dictionary
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.MusicDictionary.Add(System.String,System.String)">
            <summary>
            Loads multiple files from a directory into the collection.
            </summary>
            <param name="baseName">
            The name held before the file index.
            </param>
            <param name="extension">
            The extension of the files (.mp3)
            </param>
        </member>
        <member name="M:SdlDotNet.Audio.MusicDictionary.Add(SdlDotNet.Audio.MusicDictionary)">
            <summary>
            Creates a new MusicCollection with the contents 
            of an existing MusicCollection.
            </summary>
            <param name="musicDictionary">
            The existing music collection to add.
            </param>
        </member>
        <member name="M:SdlDotNet.Audio.MusicDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SdlDotNet.Audio.MusicDictionary.CreateQueueList">
            <summary>
            Makes all items in the collection 
            queued to each other for a playlist effect.
            </summary>
        </member>
        <member name="T:SdlDotNet.Audio.MusicFinishedEventArgs">
            <summary>
            Event arguments for MusicFinished Event.
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.MusicFinishedEventArgs.#ctor">
            <summary>
            When music finishes, the MusicFinished event 
            will fire and send these args.
            </summary>
        </member>
        <member name="T:SdlDotNet.Audio.MusicNotPlayingException">
            <summary>
            Music Is not Playing 
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.MusicNotPlayingException.#ctor">
            <summary>
            Returns basic exception
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.MusicNotPlayingException.#ctor(System.String)">
            <summary>
            Initializes an MusicNotPlayingException instance
            </summary>
            <param name="message">
            The string representing the error message
            </param>
        </member>
        <member name="M:SdlDotNet.Audio.MusicNotPlayingException.#ctor(System.String,System.Exception)">
            <summary>
            Returns exception
            </summary>
            <param name="message">Exception message</param>
            <param name="exception">Exception type</param>
        </member>
        <member name="M:SdlDotNet.Audio.MusicNotPlayingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Returns SerializationInfo
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SdlDotNet.Audio.MusicPlayer">
            <summary>
            Represents a music sample.  Music is generally longer than a sound effect sample,
            however it can also be compressed e.g. by Ogg Vorbis
            </summary>
            <example>
            <code>
            Music techno = new Music("techno.mp3");
            Music jazz = new Music("jazz.mid");
            
            techno.Play();
            
            if(Music.CurrentMusic == techno)
            	jazz.Play();
            	
            Music.FadeOut(1000);
            Music.Volume = 50;
            
            techno.FadeIn(1, 500);
            techno.QueuedMusic = jazz;  // Play jazz after techno finishes playing
            jazz.QueuedMusic = techno;  // Play techno after jazz finishes playing
            
            Music.EnableMusicFinishedCallback(); // Enable processing queues.
            </code>
            </example>
        </member>
        <member name="M:SdlDotNet.Audio.MusicPlayer.MusicFinished">
            <summary>
            Called upon when the music sample finishes.
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.MusicPlayer.Events_MusicFinished(System.Object,SdlDotNet.Audio.MusicFinishedEventArgs)">
            <summary>
            Private method to process the next queued music file.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SdlDotNet.Audio.MusicPlayer.Load(SdlDotNet.Audio.Music)">
            <summary>
            
            </summary>
            <param name="music"></param>
        </member>
        <member name="M:SdlDotNet.Audio.MusicPlayer.Play">
            <summary>
            Plays the music sample
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.MusicPlayer.Play(System.Boolean)">
            <summary>
            Plays the music sample
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.MusicPlayer.Play(System.Int32)">
            <summary>
            Plays the music sample
            </summary>
            <param name="numberOfTimes">
            The number of times to play. 
            Specify 1 to play a single time, -1 to loop forever.
            </param>
        </member>
        <member name="M:SdlDotNet.Audio.MusicPlayer.FadeIn(System.Int32,System.Int32)">
            <summary>
            Plays the music sample and fades it in
            </summary>
            <param name="numberOfTimes">
            The number of times to play. 
            Specify 1 to play a single time, -1 to loop forever.
            </param>
            <param name="milliseconds">
            The number of milliseconds to fade in for
            </param>
        </member>
        <member name="M:SdlDotNet.Audio.MusicPlayer.FadeInPosition(System.Int32,System.Int32,System.Double)">
            <summary>
            Plays the music sample, starting from a specific 
            position and fades it in
            </summary>
            <param name="numberOfTimes">
            The number of times to play.
             Specify 1 to play a single time, -1 to loop forever.
             </param>
            <param name="milliseconds">
            The number of milliseconds to fade in for
            </param>
            <param name="position">
            A format-defined position value. 
            For Ogg Vorbis, this is the number of seconds from the
             beginning of the song
             </param>
        </member>
        <member name="M:SdlDotNet.Audio.MusicPlayer.Pause">
            <summary>
            Pauses the music playing
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.MusicPlayer.Resume">
            <summary>
            Resumes paused music
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.MusicPlayer.Rewind">
            <summary>
            Resets the music position to the beginning of the sample
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.MusicPlayer.Position(System.Double)">
            <summary>
            Sets the music position to a format-defined value.
            For Ogg Vorbis and mp3, this is the number of seconds 
            from the beginning of the song
            </summary>
            <param name="musicPosition">
            Number of seconds from beginning of song
            </param>
        </member>
        <member name="M:SdlDotNet.Audio.MusicPlayer.Stop">
            <summary>
            Stops playing music
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.MusicPlayer.Fadeout(System.Int32)">
            <summary>
            Fades out music
            </summary>
            <param name="milliseconds">
            The number of milliseconds to fade out for
            </param>
        </member>
        <member name="M:SdlDotNet.Audio.MusicPlayer.EnableMusicFinishedCallback">
            <summary>
            For performance reasons, you must call this method
            to enable the Events.ChannelFinished and 
            Events.MusicFinished events
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.MusicPlayer.CurrentMusic">
            <summary>
            Gets and sets the currently loaded music sample.
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.MusicPlayer.QueuedMusic">
            <summary>
            Gets and sets the next queued music sample after this one completes.
            </summary>
            <remarks>
            You must call Music.EnableMusicFinishedCallback before this can work.
            </remarks>
        </member>
        <member name="P:SdlDotNet.Audio.MusicPlayer.Volume">
            <summary>
            Sets the music volume between 0 and 128.
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.MusicPlayer.MusicType">
            <summary>
            Gets the format of the music data type.
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.MusicPlayer.MusicTypePlaying">
            <summary>
            Gets the format of the music data type that is currently playing.
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.MusicPlayer.IsPlaying">
            <summary>
            Gets a flag indicating whether or not music is playing
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.MusicPlayer.IsPaused">
            <summary>
            Gets a flag indicating whether or not music is paused
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.MusicPlayer.IsFading">
            <summary>
            Gets a flag indicating whether or not music is fading
            </summary>
        </member>
        <member name="T:SdlDotNet.Audio.Sound">
            <summary>
            Represents a sound sample.
            </summary>
            <example>
            <code>
            // Load the sound
            Sound boing = new Sound("boing.wav");
            
            // Play the sound
            boing.Play();
            boing.Volume = 50;
            
            // Play the sound on the right side only
            boing.Play().SetPanning(0, 255);
            
            // Fade out the sound in 500 milliseconds
            boing.FadeOut(500);
            </code>
            </example>
        </member>
        <member name="M:SdlDotNet.Audio.Sound.#ctor(System.String)">
            <summary>
            Loads a .wav, .ogg, .mp3, .mod or .mid file into memory.
            </summary>
            <param name="file">The file to load into memory.</param>
        </member>
        <member name="M:SdlDotNet.Audio.Sound.#ctor(System.Byte[])">
            <summary>
            Loads sound from a byte array.
            </summary>
            <param name="data">The sound byte information.</param>
        </member>
        <member name="M:SdlDotNet.Audio.Sound.Dispose(System.Boolean)">
            <summary>
            Destroys the surface object and frees its memory
            </summary>
            <param name="disposing">
            If true, dispose all unmanaged resources
            </param>
        </member>
        <member name="M:SdlDotNet.Audio.Sound.CloseHandle">
            <summary>
            Closes sound handle
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.Sound.Array">
            <summary>
            Returns sound as an array of bytes.
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.Sound.Play">
            <summary>
            Plays the sound.
            </summary>
            <returns>The channel used to play the sound.</returns>
        </member>
        <member name="M:SdlDotNet.Audio.Sound.Play(System.Int32)">
            <summary>
            Plays the sound for a desired number of loops.
            </summary>
            <param name="loops">The number of loops to play.</param>
            <returns>The channel used to play the sound.</returns>
        </member>
        <member name="M:SdlDotNet.Audio.Sound.Play(System.Boolean)">
            <summary>
            Plays the sound.
            </summary>
            <param name="loopIndefinitely">
            True to play sound indefinately.
            </param>
            <returns>The channel used to play the sound.</returns>
        </member>
        <member name="M:SdlDotNet.Audio.Sound.Play(System.Int32,System.Int32)">
            <summary>
            Plays a sound for a desired number of milliseconds or loops.
            </summary>
            <param name="loops">
            The maximum number of loops to play.  -1 for indefinate.
            </param>
            <param name="milliseconds">
            The number of milliseconds to play the sound loop.
            </param>
            <returns>The channel used to play the sound.</returns>
        </member>
        <member name="M:SdlDotNet.Audio.Sound.FadeIn(System.Int32)">
            <summary>
            Fades in a sample once using the first available channel
            </summary>
            <param name="milliseconds">
            The number of milliseconds to fade in for
            </param>
            <returns>The channel used to play the sample</returns>
        </member>
        <member name="M:SdlDotNet.Audio.Sound.FadeIn(System.Int32,System.Int32)">
            <summary>
            Fades in a sample the specified number of times using 
            the first available channel
            </summary>
            <param name="milliseconds">
            The number of milliseconds to fade in for
            </param>
            <param name="loops">The number of loops.  
            Specify 1 to have the sample play twice</param>
            <returns>The channel used to play the sample</returns>
        </member>
        <member name="M:SdlDotNet.Audio.Sound.FadeInTimed(System.Int32,System.Int32)">
            <summary>
            Fades in a sample once using the first available channel, 
            stopping after the specified number of ms
            </summary>
            <param name="milliseconds">
            The number of milliseconds to fade in for
            </param>
            <param name="ticks">The time limit in milliseconds</param>
            <returns>The channel used to play the sample</returns>
        </member>
        <member name="M:SdlDotNet.Audio.Sound.FadeInTimed(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fades in a sample the specified number of times using 
            the first available channel, stopping after the 
            specified number of ms
            </summary>
            <param name="milliseconds">
            The number of milliseconds to fade in for
            </param>
            <param name="loops">The number of loops.  
            Specify 1 to have the sample play twice</param>
            <param name="ticks">The time limit in milliseconds</param>
            <returns>The channel used to play the sample</returns>
        </member>
        <member name="M:SdlDotNet.Audio.Sound.Stop">
            <summary>
            Stops the sound sample.
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.Sound.Fadeout(System.Int32)">
            <summary>
            Fades out the sound sample.
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.Sound.OnSoundEvent(SdlDotNet.Audio.SoundEventArgs)">
            <summary>
            Raises SoundEvent
            </summary>
            <param name="e">SoundEvent Args</param>
        </member>
        <member name="E:SdlDotNet.Audio.Sound.SoundEvent">
            <summary>
            Triggered when there was an event passed to the sound sample (ex. the sound stopped)
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.Sound.Volume">
            <summary>
            Gets and sets the volume of the sound. 
            Should be between 0 and 128 inclusive.
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.Sound.NumberOfChannels">
            <summary>
            Gets and sets the number of channels 
            used to play this sound sample.
            </summary>
        </member>
        <member name="T:SdlDotNet.Audio.SoundDictionary">
            <summary>
            Encapulates a Dictionary of Sound objects in a Sound Dictionary.
            </summary>
            <remarks>
            Every sound object within the Dictionary is indexed by a string key.
            </remarks>
            <example>
            <code>
            SoundDictionary sounds = new SoundDictionary();
            sounds.Add("boom", Mixer.Sound("explosion.wav"));
            sounds.Add("boing.wav");
            sounds.Add("baseName", ".ogg");
            
            sounds["boing.wav"].Play();
            sounds["boom"].Play();
            sounds["baseName-01.ogg"].Play(); 
            </code>
            </example>
            <seealso cref="T:SdlDotNet.Audio.Sound"/>
        </member>
        <member name="M:SdlDotNet.Audio.SoundDictionary.#ctor">
            <summary>
            Creates a new SoundDictionary object.
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.SoundDictionary.#ctor(System.String,System.String)">
            <summary>
            Loads a number of files.
            </summary>
            <param name="baseName">
            The string contained before the file index number.
            </param>
            <param name="extension">The extension of each file.</param>
        </member>
        <member name="M:SdlDotNet.Audio.SoundDictionary.#ctor(SdlDotNet.Audio.SoundDictionary)">
            <summary>
            Adds the contents of an existing SoundDictionary to a new one.
            </summary>
            <param name="soundDictionary">
            The SoundDictionary to copy.
            </param>
        </member>
        <member name="M:SdlDotNet.Audio.SoundDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SdlDotNet.Audio.SoundDictionary.Add(SdlDotNet.Audio.SoundDictionary)">
            <summary>
            Adds an existing SoundDictionary to the Dictionary.
            </summary>
            <param name="soundDictionary">
            The SoundDictionary to add.
            </param>
            <returns>
            The final number of objects within the Dictionary.
            </returns>
        </member>
        <member name="M:SdlDotNet.Audio.SoundDictionary.Stop">
            <summary>
            Stops every sound within the Dictionary.
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.SoundDictionary.Play">
            <summary>
            Plays every sound within the Dictionary.
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.SoundDictionary.Volume">
            <summary>
            Sets the volume of every sound object within the Dictionary. 
            Gets the average volume of all sound 
            objects within the Dictionary.
            </summary>
        </member>
        <member name="T:SdlDotNet.Audio.SoundEventArgs">
            <summary>
            SoundEvent Arguments.
            </summary>
        </member>
        <member name="M:SdlDotNet.Audio.SoundEventArgs.#ctor(SdlDotNet.Audio.SoundAction,System.Int32)">
            <summary>
            SoundEventsArgs describe the action to take on a Sound
            </summary>
            <param name="action">Stop or Fade out</param>
            <param name="fadeoutTime">time to faseout</param>
        </member>
        <member name="M:SdlDotNet.Audio.SoundEventArgs.#ctor(SdlDotNet.Audio.SoundAction)">
            <summary>
            Constructor
            </summary>
            <param name="action"></param>
        </member>
        <member name="P:SdlDotNet.Audio.SoundEventArgs.FadeoutTime">
            <summary>
            Get/Set Fadeout Time
            </summary>
        </member>
        <member name="P:SdlDotNet.Audio.SoundEventArgs.Action">
            <summary>
            Get/Set Action to take on Sound
            </summary>
        </member>
        <member name="T:SdlDotNet.Core.SdlFlag">
            <summary>
            Enum for values that are returned by the SDL C library functions.
            This reduces the amount of "magic numbers" in the code.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:SdlDotNet.Core.SdlFlag.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.SdlFlag.Success">
            <summary>
            Surccess
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.SdlFlag.InfiniteLoop">
            <summary>
            Plays in infinite loop.
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.SdlFlag.Error2">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.SdlFlag.Success2">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.SdlFlag.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.SdlFlag.FirstFreeChannel">
            <summary>
            First available channel
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.SdlFlag.TrueValue">
            <summary>
            True
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.SdlFlag.FalseValue">
            <summary>
            False
            </summary>
        </member>
        <member name="T:SdlDotNet.Core.EventMask">
            <summary>
            EventMask
            </summary>
            <remarks>Only used internally to remove events from the event queue</remarks>
        </member>
        <member name="F:SdlDotNet.Core.EventMask.None">
            <summary>
            No event mask
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventMask.ActiveEvent">
            <summary>
            Active Event mask
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventMask.KeyDown">
            <summary>
            Key down mask
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventMask.KeyUp">
            <summary>
            Key up mask
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventMask.MouseMotion">
            <summary>
            Mouse motion mask
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventMask.MouseButtonDown">
            <summary>
            Mouse button down mask
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventMask.MouseButtonUp">
            <summary>
            mouse button up mask
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventMask.MouseEvent">
            <summary>
            mouse event mask
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventMask.JoystickAxisMotion">
            <summary>
            joystick axis motion mask
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventMask.JoystickBallMotion">
            <summary>
            joystick ball motion mask
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventMask.JoystickHatMotion">
            <summary>
            joystick hat motion mask
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventMask.JoystickButtonDown">
            <summary>
            joystick button down mask
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventMask.JoystickButtonUp">
            <summary>
            joystick button up mask
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventMask.JoystickEvent">
            <summary>
            joystick event mask
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventMask.VideoResize">
            <summary>
            Video resize event mask
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventMask.VideoExpose">
            <summary>
            Video expose event mask
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventMask.Quit">
            <summary>
            Quit event mask
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventMask.WindowManagerEvent">
            <summary>
            Window Manager event mask
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventMask.AllEvents">
            <summary>
            Mask for all events
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventMask.UserEvent">
            <summary>
            Mask for User Events
            </summary>
        </member>
        <member name="T:SdlDotNet.Core.EventTypes">
            <summary>
            Event Types
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:SdlDotNet.Core.EventTypes.None">
            <summary>
            No event
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventTypes.ActiveEvent">
            <summary>
            Active event
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventTypes.KeyDown">
            <summary>
            Key down event
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventTypes.KeyUp">
            <summary>
            Key up event
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventTypes.MouseMotion">
            <summary>
            Mouse Motion event
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventTypes.MouseButtonDown">
            <summary>
            Mouse button down event
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventTypes.MouseButtonUp">
            <summary>
            Mouse button up event
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventTypes.JoystickAxisMotion">
            <summary>
            Joystick Axis motion event
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventTypes.JoystickBallMotion">
            <summary>
            Joystick ball motion event
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventTypes.JoystickHatMotion">
            <summary>
            Joystick hat motion event
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventTypes.JoystickButtonDown">
            <summary>
            Joystick button down event
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventTypes.JoystickButtonUp">
            <summary>
            joystick button up event
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventTypes.VideoResize">
            <summary>
            Video resize event
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventTypes.VideoExpose">
            <summary>
            Video expose event
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventTypes.Quit">
            <summary>
            Quit event
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventTypes.WindowManagerEvent">
            <summary>
            Window manager event
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.EventTypes.UserEvent">
            <summary>
            user-defined event
            </summary>
        </member>
        <member name="T:SdlDotNet.Core.Events">
            <summary>
            Contains events which can be attached to to read user input and other miscellaneous occurances.
            You can obtain an instance of this class by accessing the Events property of the main Sdl object.
            You must call the PollAndDelegate() member in order for any events to fire.
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.Events.Close">
            <summary>
            Closes all SDL subsystems
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.Events.CloseVideo">
            <summary>
            Closes and destroys this object
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.Events.CloseTimer">
            <summary>
            Closes and destroys this object
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.Events.CloseJoysticks">
            <summary>
            Closes and destroys this object
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.Events.CloseCDRom">
            <summary>
            Closes and destroys this object
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Core.Events.CloseMixer">
            <summary>
            Closes and destroys this object
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.Events.CloseAudio">
            <summary>
            Call to close the audio subsystem
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.Events.Poll">
            <summary>
            Checks the event queue, and processes 
            any events it finds by invoking the event properties
            </summary>
            <returns>
            True if any events were in the queue, otherwise False
            </returns>
        </member>
        <member name="M:SdlDotNet.Core.Events.Poll(System.Int32)">
            <summary>
            Polls and processes a given number of events before returning false
            </summary>
            <remarks>If the are no more events, the method will return false</remarks>
            <param name="numberOfEvents">
            Nunmber of events to process at a time at most
            </param>
            <returns>Returns false when done processing events</returns>
        </member>
        <member name="M:SdlDotNet.Core.Events.Wait">
            <summary>
            Checks the event queue, and waits until an event is available
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SdlDotNet.Core.Events.PushUserEvent(SdlDotNet.Core.UserEventArgs)">
            <summary>
            Pushes a user-defined event on the event queue
            </summary>
            <remarks></remarks>
            <param name="userEventArgs">
            An opaque object representing a user-defined event.
            Will be passed back to the UserEvent handler delegate when this event is processed.
            </param>
        </member>
        <member name="M:SdlDotNet.Core.Events.Add(SdlDotNet.Core.SdlEventArgs)">
            <summary>
            Adds an event to the Event queue.
            </summary>
            <param name="sdlEvent">Event to add to queue</param>
        </member>
        <member name="M:SdlDotNet.Core.Events.Add(SdlDotNet.Core.SdlEventArgs[])">
            <summary>
            Adds an array of events to the event queue.
            </summary>
            <param name="sdlEvents">Array of events to add to queue.</param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Events.AddEvent(SdlDotNet.Core.SdlEventArgs)">
            <summary>
            Raises Event and places it on the event queue
            </summary>
            <param name="sdlEvent">Event to be raised</param>
        </member>
        <member name="M:SdlDotNet.Core.Events.Remove(SdlDotNet.Core.EventMask,System.Int32)">
            <summary>
            Returns an array of events in the event queue.
            </summary>
            <param name="eventMask">Mask for event that will be removed from queue</param>
            <param name="numberOfEvents">Number of events to remove</param>
        </member>
        <member name="M:SdlDotNet.Core.Events.Remove">
            <summary>
            Remove all events from the queue
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.Events.Remove(System.Int32)">
            <summary>
            Remove the last number of events from the queue
            </summary>
            <param name="numberOfEvents">number of events to remove</param>
        </member>
        <member name="M:SdlDotNet.Core.Events.Remove(SdlDotNet.Core.EventMask)">
            <summary>
            Remove all events of a certain type
            </summary>
            <param name="eventMask">
            Events to remove
            </param>
        </member>
        <member name="M:SdlDotNet.Core.Events.Retrieve(SdlDotNet.Core.EventMask,System.Int32)">
            <summary>
            Retrieve events of a certain type
            </summary>
            <param name="eventMask">Event to retrieve</param>
            <param name="numberOfEvents">Number of events to retrieve</param>
            <returns>Array containing events</returns>
        </member>
        <member name="M:SdlDotNet.Core.Events.Retrieve(System.Int32)">
            <summary>
            Retrieve a certain number of events
            </summary>
            <param name="numberOfEvents">Number of events to retrieve</param>
            <returns>Array of Events</returns>
        </member>
        <member name="M:SdlDotNet.Core.Events.Retrieve">
            <summary>
            Retrieve all events
            </summary>
            <returns>Array of events</returns>
        </member>
        <member name="M:SdlDotNet.Core.Events.Retrieve(SdlDotNet.Core.EventMask)">
            <summary>
            Retrieve events of a certain type
            </summary>
            <param name="eventMask">Event to retrieve</param>
            <returns>Array containing events</returns>
        </member>
        <member name="M:SdlDotNet.Core.Events.Peek(SdlDotNet.Core.EventMask,System.Int32)">
            <summary>
            Returns an array of events in the event queue. 
            It does not remove them from the event queue.
            </summary>
            <param name="eventMask">Mask of events to find in queue</param>
            <param name="numberOfEvents">Number of events to find in queue</param>
            <returns>Array of events in queue.</returns>
        </member>
        <member name="M:SdlDotNet.Core.Events.Peek(System.Int32)">
            <summary>
            View number of events in the queue
            </summary>
            <param name="numberOfEvents">number of events to retrieve</param>
            <returns>Array of events from queue</returns>
        </member>
        <member name="M:SdlDotNet.Core.Events.Peek">
            <summary>
            View all events in the queue
            </summary>
            <returns>Array of all events in queue</returns>
        </member>
        <member name="M:SdlDotNet.Core.Events.Peek(SdlDotNet.Core.EventMask)">
            <summary>
            View all events of a certain type in the queue
            </summary>
            <param name="eventMask">Type of events to view</param>
            <returns>Array of events</returns>
        </member>
        <member name="M:SdlDotNet.Core.Events.IsEventQueued(SdlDotNet.Core.EventMask)">
            <summary>
            check to se if a certain kind of event is queued
            </summary>
            <param name="eventMask">Mask for event to check for</param>
            <returns>If event is queued, then method returns true</returns>
        </member>
        <member name="M:SdlDotNet.Core.Events.IgnoreEvent(SdlDotNet.Core.EventTypes)">
            <summary>
            Disables event from appearing in the queue
            </summary>
            <param name="eventType">Event to disable</param>
        </member>
        <member name="M:SdlDotNet.Core.Events.EnableEvent(SdlDotNet.Core.EventTypes)">
            <summary>
            Event type will be processed by queue.
            </summary>
            <remarks>all events are enabled by default</remarks>
            <param name="eventType">Event to enable</param>
        </member>
        <member name="M:SdlDotNet.Core.Events.IsEventEnabled(SdlDotNet.Core.EventTypes)">
            <summary>
            Check to see if this type of event is enabled
            </summary>
            <param name="eventType">Event to check to see if it is enabled</param>
            <returns>If event is enabled, the method returns true.</returns>
        </member>
        <member name="M:SdlDotNet.Core.Events.QuitApplication">
            <summary>
            Quits application by raising and quit event.
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.Events.Run">
            <summary>
            Starts the framerate ticker. 
            Must be called to start the manager interface.
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.Events.ThreadTicker">
            <summary>
            The private method, run by the ticker thread, 
            that controls timing to call the event.
            </summary>
        </member>
        <member name="E:SdlDotNet.Core.Events.AppActive">
            <summary>
            Fires when the application has become active or inactive
            </summary>
        </member>
        <member name="E:SdlDotNet.Core.Events.KeyboardDown">
            <summary>
            Fires when a key is pressed
            </summary>
        </member>
        <member name="E:SdlDotNet.Core.Events.KeyboardUp">
            <summary>
            Fires when a key is released
            </summary>
        </member>
        <member name="E:SdlDotNet.Core.Events.MouseMotion">
            <summary>
            Fires when the mouse moves
            </summary>
        </member>
        <member name="E:SdlDotNet.Core.Events.MouseButtonDown">
            <summary>
            Fires when a mouse button is pressed
            </summary>
        </member>
        <member name="E:SdlDotNet.Core.Events.MouseButtonUp">
            <summary>
            Fires when a mouse button is released
            </summary>
        </member>
        <member name="E:SdlDotNet.Core.Events.JoystickAxisMotion">
            <summary>
            Fires when a joystick axis changes
            </summary>
        </member>
        <member name="E:SdlDotNet.Core.Events.JoystickButtonDown">
            <summary>
            Fires when a joystick button is pressed
            </summary>
        </member>
        <member name="E:SdlDotNet.Core.Events.JoystickButtonUp">
            <summary>
            Fires when a joystick button is released
            </summary>
        </member>
        <member name="E:SdlDotNet.Core.Events.JoystickHatMotion">
            <summary>
            Fires when a joystick hat changes
            </summary>
        </member>
        <member name="E:SdlDotNet.Core.Events.JoystickBallMotion">
            <summary>
            Fires when a joystick trackball changes
            </summary>
        </member>
        <member name="E:SdlDotNet.Core.Events.VideoResize">
            <summary>
            Fires when the user resizes the window
            </summary>
        </member>
        <member name="E:SdlDotNet.Core.Events.VideoExpose">
            <summary>
            Fires when a portion of the window is uncovered
            </summary>
        </member>
        <member name="E:SdlDotNet.Core.Events.Quit">
            <summary>
            Fires when a user closes the window
            </summary>
        </member>
        <member name="E:SdlDotNet.Core.Events.UserEvent">
            <summary>
            Fires when a user event is consumed
            </summary>
        </member>
        <member name="E:SdlDotNet.Core.Events.ChannelFinished">
            <summary>
            Fires when a sound channel finishes playing.
            Will only occur if you call SdlDotNet.Audio.Music.Channel.EnableChannelCallbacks().
            </summary>
        </member>
        <member name="E:SdlDotNet.Core.Events.MusicFinished">
            <summary>
            Fires when a music sample finishes playing.
            Will only occur if you call SdlDotNet.Audio.Music.EnableMusicCallbacks().
            </summary>
        </member>
        <member name="E:SdlDotNet.Core.Events.Tick">
            <summary>
            Fires every frame.
            </summary>
        </member>
        <member name="P:SdlDotNet.Core.Events.StringManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Core.Events.Fps">
            <summary>
            Gets the current FPS and sets the wanted framerate.
            </summary>
        </member>
        <member name="P:SdlDotNet.Core.Events.TargetFps">
            <summary>
            Gets and sets the wanted framerate of the ticker.
            </summary>
        </member>
        <member name="T:SdlDotNet.Core.QuitEventArgs">
            <summary>
            Arguments for the QuitEvent.
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.QuitEventArgs.#ctor">
            <summary>
            Quit Event
            </summary>
        </member>
        <member name="T:SdlDotNet.Core.TickEventArgs">
            <summary>
            Event arguments for a Framerate tick.
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.TickEventArgs.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="tick">
            The current tick.
            </param>
            <param name="lastTick">
            The tick count that it was at last frame.
            </param>
            <param name="fps">Frames per second</param>
        </member>
        <member name="P:SdlDotNet.Core.TickEventArgs.LastTick">
            <summary>
            Gets when the last frame tick occurred.
            </summary>
        </member>
        <member name="P:SdlDotNet.Core.TickEventArgs.Fps">
            <summary>
            Gets the FPS as of the event call. Events.FPS is an alternative.
            </summary>
        </member>
        <member name="P:SdlDotNet.Core.TickEventArgs.Tick">
            <summary>
            Gets the current SDL tick time.
            </summary>
        </member>
        <member name="P:SdlDotNet.Core.TickEventArgs.TicksElapsed">
            <summary>
            Gets the difference in time between the 
            current tick and the last tick.
            </summary>
        </member>
        <member name="P:SdlDotNet.Core.TickEventArgs.SecondsElapsed">
            <summary>
            Seconds elapsed between the last tick and the current tick
            </summary>
        </member>
        <member name="T:SdlDotNet.Core.Timer">
            <summary>
            The Timer class holds methods for time-related functions
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.Timer.Close">
            <summary>
            Closes and destroys this object
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.Timer.Initialize">
            <summary>
            Initialize timer.
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.Timer.DelayTicks(System.Int32)">
            <summary>
            Wait a number of milliseconds.
            </summary>
            <param name="delayTime">Delay time in milliseconds</param>
        </member>
        <member name="M:SdlDotNet.Core.Timer.DelaySeconds(System.Int32)">
            <summary>
            Wait a number of seconds.
            </summary>
            <param name="delayTime">Delay time in seconds</param>
        </member>
        <member name="M:SdlDotNet.Core.Timer.FramesToSeconds(System.Int32)">
            <summary>
            Converts number of CD frames to seconds
            </summary>
            <param name="frames">Number of frames</param>
            <returns>Seconds</returns>
        </member>
        <member name="M:SdlDotNet.Core.Timer.SecondsToFrames(System.Int32)">
            <summary>
            Converts seconds to number of CD frames
            </summary>
            <param name="seconds">Number of seconds</param>
            <returns>Frames</returns>
        </member>
        <member name="M:SdlDotNet.Core.Timer.FramesToTime(System.Int32)">
            <summary>
            Converts frames to Timespan
            </summary>
            <param name="frames">Number of frames</param>
            <returns>Timespan</returns>
        </member>
        <member name="M:SdlDotNet.Core.Timer.SecondsToTime(System.Int32)">
            <summary>
            Converts seconds to Timespan
            </summary>
            <param name="seconds">Number of seconds</param>
            <returns>Timespan</returns>
        </member>
        <member name="P:SdlDotNet.Core.Timer.IsInitialized">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Core.Timer.TicksElapsed">
            <summary>
            Gets the number of milliseconds since Sdl was initialized.  
            This is not a high-resolution timer.
            </summary>
        </member>
        <member name="P:SdlDotNet.Core.Timer.SecondsElapsed">
            <summary>
            Gets the number of seconds since Sdl was initialized.  
            This is not a high-resolution timer.
            </summary>
        </member>
        <member name="T:SdlDotNet.Core.Vector">
            <summary>
            Struct for coordinates in three dimensions.
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.Vector.#ctor(System.Int32)">
            <summary>
            Creates a vector with a specific direction in 
            degrees and a length of 1.
            </summary>
            <param name="directionDeg">
            The direction of the vector, in degrees.
            </param>
        </member>
        <member name="M:SdlDotNet.Core.Vector.#ctor(System.Single)">
            <summary>
            Creates a vector with a specific direction in 
            radians and a length of 1.
            </summary>
            <param name="directionRadians">
            The direction of the vector, in radians.
            </param>
        </member>
        <member name="M:SdlDotNet.Core.Vector.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a vector using integers.
            </summary>
            <param name="positionX">Coordinate on X-axis</param>
            <param name="positionY">Coordinate on Y-axis</param>
            <param name="positionZ">Coordinate on Z-axis</param>
        </member>
        <member name="M:SdlDotNet.Core.Vector.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a vector using floats.
            </summary>
            <param name="positionX">Coordinate on X-axis</param>
            <param name="positionY">Coordinate on Y-axis</param>
            <param name="positionZ">Coordinate on Z-axis</param>
        </member>
        <member name="M:SdlDotNet.Core.Vector.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a vector using doubles.
            </summary>
            <param name="positionX">Coordinate on X-axis</param>
            <param name="positionY">Coordinate on Y-axis</param>
            <param name="positionZ">Coordinate on Z-axis</param>
        </member>
        <member name="M:SdlDotNet.Core.Vector.#ctor(System.Drawing.Point)">
            <summary>
            Creates a vector based on a Point object.
            </summary>
            <param name="point">
            The point representing the XY values.
            </param>
        </member>
        <member name="M:SdlDotNet.Core.Vector.#ctor(System.Drawing.PointF)">
            <summary>
            Creates a vector based on a PointF object.
            </summary>
            <param name="point">
            The point representing the XY values.
            </param>
        </member>
        <member name="M:SdlDotNet.Core.Vector.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Creates a vector based on the difference between the two given points.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second offset point.</param>
        </member>
        <member name="M:SdlDotNet.Core.Vector.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a vector based on the difference between the two given points.
            </summary>
            <param name="x1">The X coordinate of the first point.</param>
            <param name="y1">The Y coordinate of the first point.</param>
            <param name="z1">The X coordinate of the first point.</param>
            <param name="x2">The X coordinate of the second point.</param>
            <param name="y2">The Y coordinate of the second point.</param>
            <param name="z2">The Z coordinate of the second point.</param>
        </member>
        <member name="M:SdlDotNet.Core.Vector.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Creates a vector based on the difference between the two given points.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second offset point.</param>
        </member>
        <member name="M:SdlDotNet.Core.Vector.#ctor(SdlDotNet.Core.Vector)">
            <summary>
            Copy constructor
            </summary>
            <param name="vector">The vector to copy.</param>
        </member>
        <member name="M:SdlDotNet.Core.Vector.FromDirection(System.Single,System.Single)">
            <summary>
            Creates a new vector based on the given length and direction (in radians).
            </summary>
            <param name="directionRadians">The direction of the vector in radians.</param>
            <param name="length">The length of the vector.</param>
            <returns>The newly created vector.</returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.FromDirection(System.Int32,System.Single)">
            <summary>
            Creates a new vector based on the given length and direction (in degrees).
            </summary>
            <param name="directionDeg">The direction of the vector in degrees.</param>
            <param name="length">The length of the vector.</param>
            <returns>The newly created vector.</returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.FromDirection(System.Int32)">
            <summary>
            Creates a new vector based on the given length and direction (in degrees) with a length of 1.
            </summary>
            <param name="directionDeg">The direction of the vector in degrees.</param>
            <returns>The newly created vector.</returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.FromDirection(System.Single)">
            <summary>
            Creates a new vector based on the given direction (in radians) with a length of 1.
            </summary>
            <param name="directionRadians">The direction of the vector in radians.</param>
            <returns>The newly created vector.</returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.ToString">
            <summary>
            Converts to String
            </summary>
            <returns>
            A string containing something like "X, Y".
            </returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.Equals(System.Object)">
            <summary>
            Equals operator
            </summary>
            <param name="obj">Object to compare</param>
            <returns>If true, objects are equal</returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.op_Equality(SdlDotNet.Core.Vector,SdlDotNet.Core.Vector)">
            <summary>
            Equals operator
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.op_Inequality(SdlDotNet.Core.Vector,SdlDotNet.Core.Vector)">
            <summary>
            Not equal operator
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.op_GreaterThanOrEqual(SdlDotNet.Core.Vector,SdlDotNet.Core.Vector)">
            <summary>
            Greater than or equals operator
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.op_GreaterThan(SdlDotNet.Core.Vector,SdlDotNet.Core.Vector)">
            <summary>
            Greater than operator
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.op_LessThan(SdlDotNet.Core.Vector,SdlDotNet.Core.Vector)">
            <summary>
            Less than operator
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.op_LessThanOrEqual(SdlDotNet.Core.Vector,SdlDotNet.Core.Vector)">
            <summary>
            Less than or equals operator
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.op_Addition(SdlDotNet.Core.Vector,SdlDotNet.Core.Vector)">
            <summary>
            Addition operator
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.op_Subtraction(SdlDotNet.Core.Vector,SdlDotNet.Core.Vector)">
            <summary>
            Minus operator
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.op_Multiply(SdlDotNet.Core.Vector,SdlDotNet.Core.Vector)">
            <summary>
            Multiplication operator
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.op_Division(SdlDotNet.Core.Vector,SdlDotNet.Core.Vector)">
            <summary>
            Division operator
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.op_Addition(SdlDotNet.Core.Vector,System.Single)">
            <summary>
            Addition operator
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.Add(SdlDotNet.Core.Vector,System.Single)">
            <summary>
            Addition operator
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.op_Subtraction(SdlDotNet.Core.Vector,System.Single)">
            <summary>
            Minus operator
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.Subtract(SdlDotNet.Core.Vector,System.Single)">
            <summary>
            Minus operator
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.op_Multiply(SdlDotNet.Core.Vector,System.Single)">
            <summary>
            Multiplication operator
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.Multiply(SdlDotNet.Core.Vector,System.Single)">
            <summary>
            Multiplication operator
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.op_Division(SdlDotNet.Core.Vector,System.Single)">
            <summary>
            Division operator
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.Divide(SdlDotNet.Core.Vector,System.Single)">
            <summary>
            Division operator
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.op_Addition(System.Single,SdlDotNet.Core.Vector)">
            <summary>
            Addition operator
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.op_Subtraction(System.Single,SdlDotNet.Core.Vector)">
            <summary>
            Minus operator
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.op_Multiply(System.Single,SdlDotNet.Core.Vector)">
            <summary>
            Muliplication operator
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.op_Division(System.Single,SdlDotNet.Core.Vector)">
            <summary>
            Division operator
            </summary>
            <param name="vector"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.GetHashCode">
            <summary>
            Gets the hash code used by the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="F:SdlDotNet.Core.Vector.m_x">
            <summary>
            The x coordinate
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.Vector.m_y">
            <summary>
            The y coordinate
            </summary>
        </member>
        <member name="F:SdlDotNet.Core.Vector.m_z">
            <summary>
            The z coordinate
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.Vector.Offset(System.Single,System.Single,System.Single)">
            <summary>
            Offsets the vector by the given x, y and z coordinates.
            </summary>
            <param name="offsetX"></param>
            <param name="offsetY"></param>
            <param name="offsetZ"></param>
        </member>
        <member name="M:SdlDotNet.Core.Vector.DotProduct(SdlDotNet.Core.Vector)">
            <summary>
            Gets the dot product of the current vector along with the given one.
            </summary>	
            <param name="other">The other vector to use when getting the dot product.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.Midpoint(SdlDotNet.Core.Vector)">
            <summary>
            Gets the midpoint between the two vectors.
            </summary>
            <param name="vector">The other vector to compare this one to.</param>
            <returns>A new vector representing the midpoint between the two vectors.</returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.Normalize">
            <summary>
            Normalizes the vector. Needs to be updated
            </summary>
            <returns>The original length.</returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.Normalized">
            <summary>
            Returns a new vector equal to the normalized version of this one.
            </summary>
            <returns>
            A new vector representing the normalized vector.
            </returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.Invert">
            <summary>
            Inverts the vector.
            </summary>
        </member>
        <member name="M:SdlDotNet.Core.Vector.Reflection(SdlDotNet.Core.Vector)">
            <summary>
            Calculates the reflection angle of the current 
            vector using the given normal vector.
            </summary>
            <param name="normal">
            The normal angle.
            </param>
            <returns>
            A new vector representing the reflection angle.
            </returns>
            <remarks>
            Make sure the length of the vector is 1 or it will 
            have an effect on the resulting vector.
            </remarks>
        </member>
        <member name="M:SdlDotNet.Core.Vector.Clone">
            <summary>
            Clones the base object vector.
            </summary>
            <returns>A new instance with the same values.</returns>
        </member>
        <member name="M:SdlDotNet.Core.Vector.CompareTo(System.Object)">
            <summary>
            IComparable.CompareTo implementation.
            </summary>
            <param name="obj">
            The object to compare to.
            </param>
            <returns>
            -1 if its length is less then obj, 0 if it's equal and 1 if it's greater.
            </returns>
        </member>
        <member name="P:SdlDotNet.Core.Vector.X">
            <summary>
            Contains the x coordinate of the vector.
            </summary>
        </member>
        <member name="P:SdlDotNet.Core.Vector.Y">
            <summary>
            Contains the y coordinate of the vector.
            </summary>
        </member>
        <member name="P:SdlDotNet.Core.Vector.Z">
            <summary>
            Contains the y coordinate of the vector.
            </summary>
        </member>
        <member name="P:SdlDotNet.Core.Vector.Length">
            <summary>
            Gets and sets the length of the vector. Direction part needs to be updatet
            </summary>
        </member>
        <member name="P:SdlDotNet.Core.Vector.Direction">
            <summary>
            Gets and sets the direction of the vector, in radians. Needs to be updated
            </summary>
        </member>
        <member name="P:SdlDotNet.Core.Vector.DirectionDeg">
            <summary>
            Gets and sets the direction of the vector, in degrees. Needs to be updated
            </summary>
        </member>
        <member name="P:SdlDotNet.Core.Vector.IsEmpty">
            <summary>
            Returns true if all coordinates are equal to zero.
            </summary>
        </member>
        <member name="P:SdlDotNet.Core.Vector.Point">
            <summary>
            Gets and sets the vectors x and y points using integers.
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.Primitives.Bezier">
            <summary>
            Bezier curve
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.IPrimitive">
            <summary>
            Interface for primitive shapes
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.IPrimitive.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="color"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.IPrimitive.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color,System.Boolean)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="color"></param>
            <param name="antiAlias"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.IPrimitive.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="surface"></param>
            <param name="color"></param>
            <param name="antiAlias"></param>
            <param name="fill"></param>
        </member>
        <member name="P:SdlDotNet.Graphics.IPrimitive.Center">
            <summary>
            
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Bezier.#ctor(System.Int16[],System.Int16[],System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="positionsX">array of x positions</param>
            <param name="positionsY">array of y positions</param>
            <param name="steps">number of steps in curve</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Bezier.#ctor(System.Collections.ArrayList,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="points">Points of curve</param>
            <param name="steps">number of steps in curve</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Bezier.PositionsX">
            <summary>
            Get array of x positions of point
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Bezier.PositionsX(System.Int16[])">
            <summary>
            Set array of x positions of points
            </summary>
            <param name="arrayX">array of positions</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Bezier.PositionsY">
            <summary>
            Get array of y positions of points
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Bezier.PositionsY(System.Int16[])">
            <summary>
            Set array of y positions of points
            </summary>
            <param name="arrayY">array of positions</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Bezier.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Draw filled primitive onto surface
            </summary>
            <param name="surface">Surface to draw to</param>
            <param name="color">Color to fill primitive</param>
            <param name="antiAlias">antialias primitive</param>
            <param name="fill">fill primitive with color</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Bezier.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw primitive onto surface
            </summary>
            <param name="surface">surface to draw to</param>
            <param name="color">Color of primitive</param>
            <param name="antiAlias">Antialias primitive</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Bezier.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color)">
            <summary>
            Draw primitive onto surface
            </summary>
            <param name="surface">surface to draw to</param>
            <param name="color">Color of primitive</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Bezier.ToString">
            <summary>
            String representation of bezier curve
            </summary>
            <returns>string representation</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Bezier.Equals(System.Object)">
            <summary>
            Equals operator
            </summary>
            <param name="obj">bezier to compare</param>
            <returns>true if bezier curves are equals</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Bezier.op_Equality(SdlDotNet.Graphics.Primitives.Bezier,SdlDotNet.Graphics.Primitives.Bezier)">
            <summary>
            Equals operator
            </summary>
            <param name="bezier1">curve to compare</param>
            <param name="bezier2">curve to compare</param>
            <returns>true if curves are equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Bezier.op_Inequality(SdlDotNet.Graphics.Primitives.Bezier,SdlDotNet.Graphics.Primitives.Bezier)">
            <summary>
            Not equals operator
            </summary>
            <param name="bezier1">curve to compare</param>
            <param name="bezier2">curve to compare</param>
            <returns>true if curves are not equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Bezier.GetHashCode">
            <summary>
            Hash code
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Bezier.NumberOfPoints">
            <summary>
            Number of points in curve
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Bezier.Steps">
            <summary>
            Number of steps in curve
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Bezier.Points">
            <summary>
            List of point that make up curve
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Bezier.Center">
            <summary>
            Center of curve
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.Primitives.Box">
            <summary>
            Box primitive
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Box.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Constructor
            </summary>
            <param name="x1">X position of upper-left point</param>
            <param name="y1">Y position of upper-left point</param>
            <param name="x2">X position of lower-right point</param>
            <param name="y2">Y position of lower-right point</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Box.#ctor(System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Constructor
            </summary>
            <param name="upperLeftPoint">Position of upper-left point</param>
            <param name="size">Size of box</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Box.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Constructor
            </summary>
            <param name="upperLeftPoint">Position of upper-left point</param>
            <param name="lowerRightPoint">Position of lower-right point</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Box.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Draw filled primitive onto surface
            </summary>
            <param name="surface">Surface to draw to</param>
            <param name="color">Color to fill primitive</param>
            <param name="antiAlias">antialias primitive</param>
            <param name="fill">fill primitive with color</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Box.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw primitive onto surface
            </summary>
            <param name="surface">surface to draw to</param>
            <param name="color">Color of primitive</param>
            <param name="antiAlias">Antialias primitive</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Box.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color)">
            <summary>
            Draw primitive onto surface
            </summary>
            <param name="surface">surface to draw to</param>
            <param name="color">Color of primitive</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Box.ToString">
            <summary>
            String representation of box
            </summary>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Box.Equals(System.Object)">
            <summary>
            Equals operator
            </summary>
            <param name="obj">box to compare</param>
            <returns>true if boxes are the same</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Box.op_Equality(SdlDotNet.Graphics.Primitives.Box,SdlDotNet.Graphics.Primitives.Box)">
            <summary>
            Equals operator
            </summary>
            <param name="box1">box to compare</param>
            <param name="box2">box to compare</param>
            <returns>true if boxes are the equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Box.op_Inequality(SdlDotNet.Graphics.Primitives.Box,SdlDotNet.Graphics.Primitives.Box)">
            <summary>
            Not equals operator
            </summary>
            <param name="box1">box to compare</param>
            <param name="box2">box to compare</param>
            <returns>true if boxes are not equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Box.GetHashCode">
            <summary>
            Hash code
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Box.XPosition1">
            <summary>
            X position of upper-left point
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Box.YPosition1">
            <summary>
            Y position of upper-left point
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Box.XPosition2">
            <summary>
            X position of lower-right point
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Box.YPosition2">
            <summary>
            Y position of lower-right point
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Box.Height">
            <summary>
            Height of box
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Box.Width">
            <summary>
            Width of box
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Box.Location">
            <summary>
            Position of upper-left point
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Box.Size">
            <summary>
            Size of box
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Box.Center">
            <summary>
            Center of box
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.Primitives.Circle">
            <summary>
            Circle Primitive
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Circle.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Constructor for Circle
            </summary>
            <param name="positionX">X coordinate of Center</param>
            <param name="positionY">Y coordinate of Center</param>
            <param name="radius">Radius</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Circle.#ctor(System.Drawing.Point,System.Int16)">
            <summary>
            Constructor for Circle
            </summary>
            <param name="center">Center point</param>
            <param name="radius">Radius</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Circle.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Draw filled primitive onto surface
            </summary>
            <param name="surface">Surface to draw to</param>
            <param name="color">Color to fill primitive</param>
            <param name="antiAlias">antialias primitive</param>
            <param name="fill">fill primitive with color</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Circle.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw primitive onto surface
            </summary>
            <param name="surface">surface to draw to</param>
            <param name="color">Color of primitive</param>
            <param name="antiAlias">Antialias primitive</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Circle.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color)">
            <summary>
            Draw primitive onto surface
            </summary>
            <param name="surface">surface to draw to</param>
            <param name="color">Color of primitive</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Circle.ToString">
            <summary>
            String representation of circle
            </summary>
            <returns>string representation of circle</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Circle.Equals(System.Object)">
            <summary>
            Equals operator
            </summary>
            <param name="obj">Circle to compare</param>
            <returns>true if circles are equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Circle.op_Equality(SdlDotNet.Graphics.Primitives.Circle,SdlDotNet.Graphics.Primitives.Circle)">
            <summary>
            Equals operator
            </summary>
            <param name="c1">Circle to compare</param>
            <param name="c2">Circle to compare</param>
            <returns>True if circles are equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Circle.op_Inequality(SdlDotNet.Graphics.Primitives.Circle,SdlDotNet.Graphics.Primitives.Circle)">
            <summary>
            Not equals operator
            </summary>
            <param name="c1">Circle to compare</param>
            <param name="c2">Circle to compare</param>
            <returns>True if circles are not equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Circle.GetHashCode">
            <summary>
            Hash Code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Circle.Center">
            <summary>
            Center of circle
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Circle.PositionX">
            <summary>
            X position of circle
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Circle.PositionY">
            <summary>
            Y position of circle
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Circle.Radius">
            <summary>
            Radius of circle
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.Primitives.Ellipse">
            <summary>
            Ellipse Primitive
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Ellipse.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Constructor
            </summary>
            <param name="positionX">X coordinate of center</param>
            <param name="positionY">Y coordinate of center</param>
            <param name="radiusX">Radius on X axis</param>
            <param name="radiusY">Radius on Y axis</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Ellipse.#ctor(System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Constructor
            </summary>
            <param name="point">Center</param>
            <param name="size">Width and height of ellipse</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Ellipse.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Draw filled primitive onto surface
            </summary>
            <param name="surface">Surface to draw to</param>
            <param name="color">Color to fill primitive</param>
            <param name="antiAlias">antialias primitive</param>
            <param name="fill">fill primitive with color</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Ellipse.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw primitive onto surface
            </summary>
            <param name="surface">surface to draw to</param>
            <param name="color">Color of primitive</param>
            <param name="antiAlias">Antialias primitive</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Ellipse.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color)">
            <summary>
            Draw primitive onto surface
            </summary>
            <param name="surface">surface to draw to</param>
            <param name="color">Color of primitive</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Ellipse.ToString">
            <summary>
            String representation of ellipse
            </summary>
            <returns>string representation of ellipse</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Ellipse.Equals(System.Object)">
            <summary>
            Equals operator
            </summary>
            <param name="obj">Ellipse to compare</param>
            <returns>True if ellipses are equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Ellipse.op_Equality(SdlDotNet.Graphics.Primitives.Ellipse,SdlDotNet.Graphics.Primitives.Ellipse)">
            <summary>
            Equals operator
            </summary>
            <param name="e1">Ellipse to compare</param>
            <param name="e2">Ellipse to compare</param>
            <returns>True if ellipses are equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Ellipse.op_Inequality(SdlDotNet.Graphics.Primitives.Ellipse,SdlDotNet.Graphics.Primitives.Ellipse)">
            <summary>
            Not equals operator
            </summary>
            <param name="e1">Ellipse to compare</param>
            <param name="e2">Ellipse to compare</param>
            <returns>True if ellipses are not equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Ellipse.GetHashCode">
            <summary>
            Hash code
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Ellipse.Center">
            <summary>
            Center of ellipse
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Ellipse.Size">
            <summary>
            Size struct representing width and height of ellipse
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Ellipse.PositionX">
            <summary>
            X position of center of ellipse
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Ellipse.PositionY">
            <summary>
            Y position of center of ellipse
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Ellipse.RadiusX">
            <summary>
            Width of ellipse
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Ellipse.RadiusY">
            <summary>
            Height of ellipse
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.Primitives.Line">
            <summary>
            Line primitive
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Line.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Constructor
            </summary>
            <param name="x1">X coordinate of first point</param>
            <param name="y1">Y coordinate of first point</param>
            <param name="x2">X coordinate of second point</param>
            <param name="y2">Y coordinate of second point</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Line.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Constructor
            </summary>
            <param name="point1">First point</param>
            <param name="point2">Second point</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Line.Vertical">
            <summary>
            Set to vertical line
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Line.Horizontal">
            <summary>
            Set to horizontal line
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Line.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Draw filled primitive onto surface
            </summary>
            <param name="surface">Surface to draw to</param>
            <param name="color">Color to fill primitive</param>
            <param name="antiAlias">antialias primitive</param>
            <param name="fill">fill primitive with color</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Line.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw primitive onto surface
            </summary>
            <param name="surface">surface to draw to</param>
            <param name="color">Color of primitive</param>
            <param name="antiAlias">Antialias primitive</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Line.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color)">
            <summary>
            Draw primitive onto surface
            </summary>
            <param name="surface">surface to draw to</param>
            <param name="color">Color of primitive</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Line.ToString">
            <summary>
            String representation of line
            </summary>
            <returns>String represenation of line</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Line.Equals(System.Object)">
            <summary>
            Equals operator
            </summary>
            <param name="obj">line to compare</param>
            <returns>True if lines are equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Line.op_Equality(SdlDotNet.Graphics.Primitives.Line,SdlDotNet.Graphics.Primitives.Line)">
            <summary>
            Equals operator
            </summary>
            <param name="line1">Line to compare</param>
            <param name="line2">Line to compare</param>
            <returns>True if lines are equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Line.op_Inequality(SdlDotNet.Graphics.Primitives.Line,SdlDotNet.Graphics.Primitives.Line)">
            <summary>
            Not equals operator
            </summary>
            <param name="line1">Line to compare</param>
            <param name="line2">Line to compare</param>
            <returns>True if lines are equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Line.GetHashCode">
            <summary>
            hash code
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Line.XPosition1">
            <summary>
            X position of first point
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Line.YPosition1">
            <summary>
            Y position of first point
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Line.XPosition2">
            <summary>
            X position of second point
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Line.YPosition2">
            <summary>
            Y position of second point
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Line.Point1">
            <summary>
            First point
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Line.Point2">
            <summary>
            Second point
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Line.Center">
            <summary>
            Center of line
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.Primitives.Pie">
            <summary>
            Pie-shaped primitive
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Pie.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Constructor
            </summary>
            <param name="positionX">X position of vertex</param>
            <param name="positionY">Y position of vertex</param>
            <param name="radius">Radius</param>
            <param name="startingAngle">Starting angle in degrees</param>
            <param name="endingAngle">Ending angle in degrees</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Pie.#ctor(System.Drawing.Point,System.Int16,System.Int16,System.Int16)">
            <summary>
            Constructor
            </summary>
            <param name="point">Position of vertex</param>
            <param name="radius">Radius</param>
            <param name="startingAngle">Starting angle in degrees</param>
            <param name="endingAngle">Ending angle in degrees</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Pie.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Draw filled primitive onto surface
            </summary>
            <param name="surface">Surface to draw to</param>
            <param name="color">Color to fill primitive</param>
            <param name="antiAlias">antialias primitive</param>
            <param name="fill">fill primitive with color</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Pie.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw primitive onto surface
            </summary>
            <param name="surface">surface to draw to</param>
            <param name="color">Color of primitive</param>
            <param name="antiAlias">Antialias primitive</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Pie.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color)">
            <summary>
            Draw primitive onto surface
            </summary>
            <param name="surface">surface to draw to</param>
            <param name="color">Color of primitive</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Pie.ToString">
            <summary>
            String representation of pie
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Pie.Equals(System.Object)">
            <summary>
            Equals operator
            </summary>
            <param name="obj">pie to compare</param>
            <returns>true if pies are equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Pie.op_Equality(SdlDotNet.Graphics.Primitives.Pie,SdlDotNet.Graphics.Primitives.Pie)">
            <summary>
            Equals operator
            </summary>
            <param name="pie1">pie to compare</param>
            <param name="pie2">pie to compare</param>
            <returns>true if pies are equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Pie.op_Inequality(SdlDotNet.Graphics.Primitives.Pie,SdlDotNet.Graphics.Primitives.Pie)">
            <summary>
            not equals operator
            </summary>
            <param name="pie1">pie to compare</param>
            <param name="pie2">pie to comapre</param>
            <returns>true if pies are not equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Pie.GetHashCode">
            <summary>
            hash code
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Pie.PositionX">
            <summary>
            X position of vertex
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Pie.PositionY">
            <summary>
            Y position of vertex
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Pie.Point">
            <summary>
            Vertex
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Pie.Radius">
            <summary>
            Radius
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Pie.StartingAngle">
            <summary>
            Starting angle in degrees
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Pie.EndingAngle">
            <summary>
            Ending angle in degrees
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Pie.Center">
            <summary>
            Center of pie
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.Primitives.Polygon">
            <summary>
            Polygon primitive
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Polygon.#ctor(System.Int16[],System.Int16[])">
            <summary>
            Constructor
            </summary>
            <param name="positionsX">array of x positions of points</param>
            <param name="positionsY">array of y positions of points</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Polygon.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor
            </summary>
            <param name="points">ArrayList of points</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Polygon.PositionsX">
            <summary>
            Get Array of all X positions
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Polygon.PositionsX(System.Int16[])">
            <summary>
            Set array of X positions
            </summary>
            <param name="arrayX">x positions</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Polygon.PositionsY">
            <summary>
            Get array of Y positions
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Polygon.PositionsY(System.Int16[])">
            <summary>
            Set array of Y positions
            </summary>
            <param name="arrayY">array of Y positions</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Polygon.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Draw filled primitive onto surface
            </summary>
            <param name="surface">Surface to draw to</param>
            <param name="color">Color to fill primitive</param>
            <param name="antiAlias">antialias primitive</param>
            <param name="fill">fill primitive with color</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Polygon.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw primitive onto surface
            </summary>
            <param name="surface">surface to draw to</param>
            <param name="color">Color of primitive</param>
            <param name="antiAlias">Antialias primitive</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Polygon.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color)">
            <summary>
            Draw primitive onto surface
            </summary>
            <param name="surface">surface to draw to</param>
            <param name="color">Color of primitive</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Polygon.ToString">
            <summary>
            String representation of polygon
            </summary>
            <returns>string representation</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Polygon.Equals(System.Object)">
            <summary>
            Equals operator
            </summary>
            <param name="obj">polygon to compare</param>
            <returns>true if the polygons are equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Polygon.op_Equality(SdlDotNet.Graphics.Primitives.Polygon,SdlDotNet.Graphics.Primitives.Polygon)">
            <summary>
            Equals operator
            </summary>
            <param name="polygon1">polygon to compare</param>
            <param name="polygon2">polygon to compare</param>
            <returns>true if the polygons are equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Polygon.op_Inequality(SdlDotNet.Graphics.Primitives.Polygon,SdlDotNet.Graphics.Primitives.Polygon)">
            <summary>
            Not equals operator
            </summary>
            <param name="polygon1">polygon to compare</param>
            <param name="polygon2">polygon to compare</param>
            <returns>true if the polygons are equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Polygon.GetHashCode">
            <summary>
            Hash code
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Polygon.NumberOfSides">
            <summary>
            Number of sides of the polygon
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Polygon.Points">
            <summary>
            Arraylist of all the points of the polygon
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Polygon.Center">
            <summary>
            Center of polygon
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.Primitives.TexturedPolygon">
            <summary>
            Polygon primitive
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.TexturedPolygon.#ctor(SdlDotNet.Graphics.Surface,System.Int16[],System.Int16[],System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="positionsX">array of x positions of points</param>
            <param name="positionsY">array of y positions of points</param>
            <param name="surface">Textured surface</param>
            <param name="textureOffsetX">Texture is offset on the X axis</param>
            <param name="textureOffsetY">Texture is offset on the Y axis</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.TexturedPolygon.#ctor(SdlDotNet.Graphics.Surface,System.Collections.ArrayList,System.Drawing.Point)">
            <summary>
            Constructor
            </summary>
            <param name="points">ArrayList of points</param>
            <param name="surface">Textured Surface</param>
            <param name="offset">Texture is offset on the X and Y axes</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.TexturedPolygon.PositionsX">
            <summary>
            Get Array of all X positions
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.TexturedPolygon.PositionsX(System.Int16[])">
            <summary>
            Set array of X positions
            </summary>
            <param name="arrayX">x positions</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.TexturedPolygon.PositionsY">
            <summary>
            Get array of Y positions
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.TexturedPolygon.PositionsY(System.Int16[])">
            <summary>
            Set array of Y positions
            </summary>
            <param name="arrayY">array of Y positions</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.TexturedPolygon.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Draw filled primitive onto surface
            </summary>
            <param name="surface">Surface to draw to</param>
            <param name="color">Color to fill primitive</param>
            <param name="antiAlias">antialias primitive</param>
            <param name="fill">fill primitive with color</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.TexturedPolygon.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw primitive onto surface
            </summary>
            <param name="surface">surface to draw to</param>
            <param name="color">Color of primitive</param>
            <param name="antiAlias">Antialias primitive</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.TexturedPolygon.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color)">
            <summary>
            Draw primitive onto surface
            </summary>
            <param name="surface">surface to draw to</param>
            <param name="color">Color of primitive</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.TexturedPolygon.ToString">
            <summary>
            String representation of polygon
            </summary>
            <returns>string representation</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.TexturedPolygon.Equals(System.Object)">
            <summary>
            Equals operator
            </summary>
            <param name="obj">polygon to compare</param>
            <returns>true if the polygons are equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.TexturedPolygon.op_Equality(SdlDotNet.Graphics.Primitives.TexturedPolygon,SdlDotNet.Graphics.Primitives.TexturedPolygon)">
            <summary>
            Equals operator
            </summary>
            <param name="polygon1">polygon to compare</param>
            <param name="polygon2">polygon to compare</param>
            <returns>true if the polygons are equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.TexturedPolygon.op_Inequality(SdlDotNet.Graphics.Primitives.TexturedPolygon,SdlDotNet.Graphics.Primitives.TexturedPolygon)">
            <summary>
            Not equals operator
            </summary>
            <param name="polygon1">polygon to compare</param>
            <param name="polygon2">polygon to compare</param>
            <returns>true if the polygons are equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.TexturedPolygon.GetHashCode">
            <summary>
            Hash code
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.TexturedPolygon.TextureOffset">
            <summary>
            Texture Offset
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.TexturedPolygon.TexturedSurface">
            <summary>
            Textured Surface
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.TexturedPolygon.NumberOfSides">
            <summary>
            Number of sides of the polygon
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.TexturedPolygon.Points">
            <summary>
            Arraylist of all the points of the polygon
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.TexturedPolygon.Center">
            <summary>
            Center of polygon
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.Primitives.Triangle">
            <summary>
            Triangle primitive
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Triangle.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Constructor
            </summary>
            <param name="x1">X position of first point</param>
            <param name="y1">Y position of first point</param>
            <param name="x2">X position of second point</param>
            <param name="y2">Y position of second point</param>
            <param name="x3">X position of third point</param>
            <param name="y3">Y position of third point</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Triangle.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Constructor
            </summary>
            <param name="point1">First point</param>
            <param name="point2">Second point</param>
            <param name="point3">Third point</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Triangle.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Draw filled primitive onto surface
            </summary>
            <param name="surface">Surface to draw to</param>
            <param name="color">Color to fill primitive</param>
            <param name="antiAlias">antialias primitive</param>
            <param name="fill">fill primitive with color</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Triangle.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw primitive onto surface
            </summary>
            <param name="surface">surface to draw to</param>
            <param name="color">Color of primitive</param>
            <param name="antiAlias">Antialias primitive</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Triangle.Draw(SdlDotNet.Graphics.Surface,System.Drawing.Color)">
            <summary>
            Draw primitive onto surface
            </summary>
            <param name="surface">surface to draw to</param>
            <param name="color">Color of primitive</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Triangle.ToString">
            <summary>
            String representation of triangle
            </summary>
            <returns>string representation</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Triangle.Equals(System.Object)">
            <summary>
            Equals operator
            </summary>
            <param name="obj">triangle to compare</param>
            <returns>true if triangles are equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Triangle.op_Equality(SdlDotNet.Graphics.Primitives.Triangle,SdlDotNet.Graphics.Primitives.Triangle)">
            <summary>
            Equals operator
            </summary>
            <param name="triangle1">triangle to compare</param>
            <param name="triangle2">triangle to compare</param>
            <returns>true if triangles are equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Triangle.op_Inequality(SdlDotNet.Graphics.Primitives.Triangle,SdlDotNet.Graphics.Primitives.Triangle)">
            <summary>
            Not equals operator
            </summary>
            <param name="triangle1">triangle to compare</param>
            <param name="triangle2">triangle to compare</param>
            <returns>true if triangles are not equal</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Primitives.Triangle.GetHashCode">
            <summary>
            Hash code
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Triangle.Point1">
            <summary>
            First point
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Triangle.Point2">
            <summary>
            Second point
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Triangle.Point3">
            <summary>
            Third point
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Triangle.XPosition1">
            <summary>
            X position of first point
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Triangle.YPosition1">
            <summary>
            Y position of first point
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Triangle.XPosition2">
            <summary>
            X position of second point
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Triangle.YPosition2">
            <summary>
            Y position of second point
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Triangle.XPosition3">
            <summary>
            X position of third point
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Triangle.YPosition3">
            <summary>
            Y position of third point
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Primitives.Triangle.Center">
            <summary>
            Center of triangle
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.Sprites.AnimatedSprite">
            <summary>
            
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.Sprites.Sprite">
            <summary>
            Sprite class contains both a Surface and a Rectangle so that 
            an object can be easily displayed and manipulated.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.#ctor">
            <summary>
            Basic constructor. 
            </summary>
            <remarks>
            Use this with caution. 
            This is provided as a convenience. 
            Please give the sprite a Surface and a Vector.</remarks>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.#ctor(SdlDotNet.Graphics.Surface,System.Drawing.Point)">
            <summary>
            Create a new Sprite
            </summary>
            <param name="position">Starting position</param>
            <param name="surface">Surface of Sprite</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.#ctor(SdlDotNet.Graphics.Surface)">
            <summary>
            Create new Sprite at (0, 0)
            </summary>
            <param name="surface">Surface of Sprite</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.#ctor(System.String)">
            <summary>
            Creates a new sprite using the given surface file.
            </summary>
            <param name="surfaceFile">
            The file path of the surface to use as the sprite.
            </param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.#ctor(SdlDotNet.Graphics.Surface,SdlDotNet.Core.Vector)">
            <summary>
            Create new Sprite
            </summary>
            <param name="vector">Vector of Sprite</param>
            <param name="surface">Surface of Sprite</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.#ctor(SdlDotNet.Graphics.Surface,SdlDotNet.Core.Vector,SdlDotNet.Graphics.Sprites.SpriteCollection)">
            <summary>
            Create new sprite
            </summary>
            <param name="vector">Vector of Sprite</param>
            <param name="surface">Surface of Sprite</param>
            <param name="group">
            SpriteCollection group to put Sprite into.
            </param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.#ctor(SdlDotNet.Graphics.Surface,System.Drawing.Point,SdlDotNet.Graphics.Sprites.SpriteCollection)">
            <summary>
            Create new sprite
            </summary>
            <param name="position">position of Sprite</param>
            <param name="surface">Surface of Sprite</param>
            <param name="group">
            SpriteCollection group to put Sprite into.
            </param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.Update(SdlDotNet.Input.ActiveEventArgs)">
            <summary>
            Processes Active events
            </summary>
            <param name="args">Event args</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.Update(SdlDotNet.Input.KeyboardEventArgs)">
            <summary>
            Processes the keyboard.
            </summary>
            <param name="args">Event args</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.Update(SdlDotNet.Input.MouseButtonEventArgs)">
            <summary>
            Processes a mouse button. This event is trigger by the SDL
            system. 
            </summary>
            <param name="args">Event args</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.Update(SdlDotNet.Input.MouseMotionEventArgs)">
            <summary>
            Processes a mouse motion event. This event is triggered by
            SDL. Only
            sprites that are MouseSensitive are processed.
            </summary>
            <param name="args">Event args</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.Update(SdlDotNet.Input.JoystickAxisEventArgs)">
            <summary>
            Processes a joystick motion event. This event is triggered by
            SDL. Only
            sprites that are JoystickSensitive are processed.
            </summary>
            <param name="args">Event args</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.Update(SdlDotNet.Input.JoystickButtonEventArgs)">
            <summary>
            Processes a joystick button event. This event is triggered by
            SDL. Only
            sprites that are JoystickSensitive are processed.
            </summary>
            <param name="args">Event args</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.Update(SdlDotNet.Input.JoystickHatEventArgs)">
            <summary>
            Processes a joystick hat motion event. This event is triggered by
            SDL. Only
            sprites that are JoystickSensitive are processed.
            </summary>
            <param name="args">Event args</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.Update(SdlDotNet.Input.JoystickBallEventArgs)">
            <summary>
            Processes a joystick hat motion event. This event is triggered by
            SDL. Only
            sprites that are JoystickSensitive are processed.
            </summary>
            <param name="args">Event args</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.Update(SdlDotNet.Core.QuitEventArgs)">
            <summary>
            Processes Quit Events
            </summary>
            <param name="args">Event args</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.Update(SdlDotNet.Core.UserEventArgs)">
            <summary>
            Process User Events
            </summary>
            <param name="args">Event args</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.Update(SdlDotNet.Graphics.VideoExposeEventArgs)">
            <summary>
            Process VideoExposeEvents
            </summary>
            <param name="args">Event args</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.Update(SdlDotNet.Graphics.VideoResizeEventArgs)">
            <summary>
            Process VideoResizeEvents
            </summary>
            <param name="args">Event args</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.Update(SdlDotNet.Audio.ChannelFinishedEventArgs)">
            <summary>
            Process ChannelFinishedEvents
            </summary>
            <param name="args">Event args</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.Update(SdlDotNet.Audio.MusicFinishedEventArgs)">
            <summary>
            Process MusicFinishedEvents
            </summary>
            <param name="args">Event args</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.Update(SdlDotNet.Core.TickEventArgs)">
            <summary>
            All sprites are tickable, regardless if they actual do
            anything. This ensures that the functionality is there, to be
            overridden as needed.
            </summary>
            <param name="args">Event args</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.IntersectsWith(System.Drawing.Point)">
            <summary>
            Checks if Sprite intersects with a point
            </summary>
            <param name="point">Point to intersect with</param>
            <returns>True if Sprite intersects with the Point</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.IntersectsWith(System.Drawing.Rectangle)">
            <summary>
            Checks if Sprite intersects with a rectangle
            </summary>
            <param name="rectangle">rectangle to intersect with
            </param>
            <returns>True if Sprite intersect with Rectangle</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.IntersectsWith(SdlDotNet.Graphics.Sprites.Sprite)">
            <summary>
            Check if two Sprites intersect
            </summary>
            <param name="sprite">Sprite to check intersection with</param>
            <returns>True if sprites intersect</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.IntersectsWith(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Checks if Sprite intersects with a rectangle with tolerance
            </summary>
            <param name="rect">rectangle to intersect with
            </param>
            <param name="tolerance">The tolerance of the collision check</param>
            <returns>True if Sprite intersect with Rectangle</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.IntersectsWith(SdlDotNet.Graphics.Sprites.Sprite,System.Int32)">
            <summary>
            Check if two Sprites intersect
            </summary>
            <param name="sprite">Sprite to check intersection with</param>
            <param name="tolerance">The amount of tolerance to give the collision.</param>
            <returns>True if sprites intersect</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.IntersectsWithRadius(SdlDotNet.Graphics.Sprites.Sprite,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks for collision between two sprites using a radius from the center of the sprites.
            </summary>
            <param name="sprite">The sprite to compare to.</param>
            <param name="radius">The radius of the current sprite. Defaults to the radius of the sprite.</param>
            <param name="radiusOther">The other sprite's radius. Defaults to the radius of the sprite.</param>
            <param name="tolerance">The size of the buffer zone for collision detection. Defaults to 0.</param>
            <returns>True if they intersect, false if they don't.</returns>
            <remarks>If they radius is not given, it calculates it for you using half the width plus half the height.</remarks>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.IntersectsWithRadius(SdlDotNet.Graphics.Sprites.Sprite,System.Int32,System.Int32)">
            <summary>
            Checks for collision between two sprites using a radius from the center of the sprites.
            </summary>
            <param name="sprite">The sprite to compare to.</param>
            <param name="radius">The radius of the current sprite. Defaults to the radius of the sprite.</param>
            <param name="radiusOther">The other sprite's radius. Defaults to the radius of the sprite.</param>
            <returns>True if they intersect, false if they don't.</returns>
            <remarks>The offset defaults to 0.</remarks>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.IntersectsWithRadius(SdlDotNet.Graphics.Sprites.Sprite,System.Int32)">
            <summary>
            Checks for collision between two sprites using a radius from the center of the sprites.
            </summary>
            <param name="sprite">The sprite to compare to.</param>
            <param name="radius">The radius of the sprites.</param>
            <returns>True if they intersect, false if they don't.</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.IntersectsWithRadius(SdlDotNet.Graphics.Sprites.Sprite)">
            <summary>
            Checks for collision between two sprites using a radius from the center of the sprites.
            </summary>
            <param name="sprite">The sprite to compare to.</param>
            <returns>True if they intersect, false if they don't.</returns>
            <remarks>The radius for both the sprites is calculated by using half the width and half the height.</remarks>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.IntersectsWith(SdlDotNet.Graphics.Sprites.SpriteCollection)">
            <summary>
            Check to see if Sprite intersects with any sprite in a SpriteCollection
            </summary>
            <param name="spriteCollection">Collection to chekc the intersection with</param>
            <returns>True if sprite intersects with any sprite in collection</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.Dispose(System.Boolean)">
            <summary>
            Destroy sprite
            </summary>
            <param name="disposing">If true, remove all unamanged resources</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.Kill">
            <summary>
            
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.Dispose">
            <summary>
            Destroy object
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.Close">
            <summary>
            Destroy object
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.Sprite.Finalize">
            <summary>
            Destroy object
            </summary>
        </member>
        <member name="E:SdlDotNet.Graphics.Sprites.Sprite.ChangedZAxis">
            <summary>
            
            </summary>
        </member>
        <member name="E:SdlDotNet.Graphics.Sprites.Sprite.KillSprite">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.Surface">
            <summary>
            Gets and sets the surface of the sprite.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.Vector">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.BoundingBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.Rectangle">
            <summary>
            Gets and sets the sprite's surface rectangle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.LastBlitRectangle">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.Position">
            <summary>
            Gets and sets the sprites current x,y location.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.Center">
            <summary>
            Center point of Sprite
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.X">
            <summary>
            Gets and sets the sprite's x location.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.Y">
            <summary>
            Gets and sets the sprite's y location.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.Z">
            <summary>
            Gets and sets the sprite's z coordinate.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.Left">
            <summary>
            Gets the left edge of the sprite.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.Right">
            <summary>
            Gets the right edge of the sprite.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.Top">
            <summary>
            Gets the top edge of the sprite.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.Bottom">
            <summary>
            Gets the bottom edge of the sprite.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.Size">
            <summary>
            Gets and sets the sprite's size.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.Height">
            <summary>
            Gets and sets the sprite's height.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.Width">
            <summary>
            Gets and sets the sprite's width.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.AllowDrag">
            <summary>
            Allows sprite to be dragged via the mouse
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.BeingDragged">
            <summary>
            true when sprite is being dragged by the mouse
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.Visible">
            <summary>
            Gets and sets whether or not the sprite is visible when rendered.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.Alpha">
            <summary>
            Gets and sets the alpha associated with the sprite's surface.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.AlphaBlending">
            <summary>
            Gets and sets the alpha blending associated with the sprite's surface.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.TransparentColor">
            <summary>
            Gets and sets the transparent color associated with the sprite's surface.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.Sprite.Transparent">
            <summary>
            Gets and sets the transparency associated with the sprite's surface.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimatedSprite.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimatedSprite.#ctor(System.String,SdlDotNet.Graphics.Sprites.AnimationCollection)">
            <summary>
            Create AnimatedSprite from AnimationCollection
            </summary>
            <param name="name">Name of animation</param>
            <param name="animation">animation</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimatedSprite.#ctor(System.String,SdlDotNet.Graphics.SurfaceCollection,SdlDotNet.Core.Vector)">
            <summary>
            Creates a new AnimatedSprite from a surface collection and a name
            </summary>
            <param name="name">The name of the animation</param>
            <param name="surfaces">The surface collection containing the frames of the animation.</param>
            <param name="vector">Vector of sprite</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimatedSprite.#ctor(SdlDotNet.Graphics.Sprites.AnimationCollection)">
            <summary>
            Create AnimatedSprite from AnimationCollection
            </summary>
            <param name="animation">animation</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimatedSprite.#ctor(SdlDotNet.Graphics.SurfaceCollection,System.Drawing.Point)">
            <summary>
            Create Animated Sprite from SurfaceCollection
            </summary>
            <param name="surfaces">SurfaceCollection</param>
            <param name="coordinates">Initial Coordinates</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimatedSprite.#ctor(SdlDotNet.Graphics.SurfaceCollection,SdlDotNet.Core.Vector)">
            <summary>
            Creates AnumatedSprite from Surface Collection
            </summary>
            <param name="surfaces">SurfaceCollection</param>
            <param name="vector">Starting coordinates</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimatedSprite.#ctor(SdlDotNet.Graphics.SurfaceCollection)">
            <summary>
            Creates AnimatedSprite from SurfaceCollection
            </summary>
            <param name="surfaces">SurfaceCollection</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimatedSprite.Dispose(System.Boolean)">
            <summary>
            Destroys the surface object and frees its memory
            </summary>
            <param name="disposing">If ture, dispose unmanaged resources</param>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.AnimatedSprite.Animations">
            <summary>
            The collection of animations for the animated sprite
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.AnimatedSprite.Animate">
            <summary>
            Gets and sets whether the animation is going.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.AnimatedSprite.CurrentAnimation">
            <summary>
            Gets and sets the current animation.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.AnimatedSprite.Surface">
            <summary>
            Gets the current animations surface
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.AnimatedSprite.Frame">
            <summary>
            Gets and sets the current frame in the animation.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.AnimatedSprite.AnimateForward">
            <summary>
            Gets and sets the AnimateForward flag for all animations in this sprite's Animations.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.AnimatedSprite.Alpha">
            <summary>
            Gets and alpha of the sprite's current animation.  Sets the alpha of every animation made for the sprite.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.AnimatedSprite.AlphaBlending">
            <summary>
            Gets and sets the alpha blending of the sprite's current animation.  Sets the alpha blending of every animation made for the sprite.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.AnimatedSprite.TransparentColor">
            <summary>
            Gets and transparent color of the sprite's current animation.  Sets the transparent color of every animation made for the sprite.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.AnimatedSprite.Transparent">
            <summary>
            Gets and transparency of the sprite's current animation.  Sets the transparency of every animation made for the sprite.
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.Sprites.AnimationCollection">
            <summary>
            AnimationCollection.
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.SurfaceCollection">
            <summary>
            Encapsulates the collection of Surface objects.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceCollection.Add(System.String,System.String)">
            <summary>
            Load in multiple files as surfaces
            </summary>
            <param name="baseName">Base name of files</param>
            <param name="extension">file extension of images</param>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceCollection.Add(System.String,System.Drawing.Size)">
            <summary>
            Loads a collection of tiled surfaces from one larger surface. 
            </summary>
            <param name="fileName">
            The filename of the surface which contains all the tiles.
            </param>
            <param name="tileSize">
            The size of each tile.
            </param>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceCollection.Add(System.String,System.Drawing.Size,System.Int32)">
            <summary>
            Loads a row of tiled surfaces from one larger surface.
            </summary>
            <param name="fileName">
            The filename of the large surface.
            </param>
            <param name="tileSize">
            The size of each tile.
            </param>
            <param name="rowNumber">
            The row number of which to load the surface collection.
            </param>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceCollection.Add(SdlDotNet.Graphics.Surface,System.Drawing.Size)">
            <summary> 
            Loads a collection of tiled surfaces from one larger surface. 
            </summary> 
            <param name="fullImage">
            The larger surface which contains all the tiles.
            </param> 
            <param name="tileSize">
            The size of each tile.
            </param> 
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceCollection.Add(SdlDotNet.Graphics.Surface,System.Drawing.Size,System.Int32)">
            <summary>
            Loads only one row of tiled surfaces from a larger surface.
            </summary>
            <param name="fullImage">
            The larger surface which contains all the tiles.
            </param> 
            <param name="tileSize">
            The size of each tile.
            </param>
            <param name="rowNumber">
            The row to be loaded.
            </param>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceCollection.Add(SdlDotNet.Graphics.SurfaceCollection)">
            <summary>
            Constructor to make a new surface collection based off of an existing one.
            </summary>
            <param name="surfaces">The surface collection to copy.</param>
        </member>
        <member name="P:SdlDotNet.Graphics.SurfaceCollection.Size">
            <summary>
            Size of first surface
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.SurfaceCollection.TransparentColor">
            <summary>
            Gets the transparent color of the first surface.
            Sets the transparent color of every surface in the collection.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.SurfaceCollection.Transparent">
            <summary>
            Gets the transparency of the first surface.
            Sets the transparency of every surface in the collection.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.SurfaceCollection.Alpha">
            <summary>
            Gets the alpha of the first surface.
            Sets the alpha of every surface in the collection.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.SurfaceCollection.AlphaBlending">
            <summary>
            Gets the transparency of the first surface.
            Sets the transparency of every surface in the collection.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimationCollection.#ctor">
            <summary>
            Creates a new empty AnimationCollection.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimationCollection.Add(SdlDotNet.Graphics.SurfaceCollection,System.Double,System.Boolean)">
            <summary>
            Creates a new AnimationCollection with a SurfaceCollection representing the 
            animation.
            </summary>
            <param name="frames">
            The collection of surfaces in the animation.
            </param>
            <param name="delay">
            The amount of delay to be had between each frame.
            </param>
            <param name="loop">
            Whether or not the animation is 
            to loop when reached the end. Defaults to true.
            </param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimationCollection.Add(SdlDotNet.Graphics.SurfaceCollection,System.Double)">
            <summary>
            Creates a new AnimationCollection with a SurfaceCollection 
            representing the animation.
            </summary>
            <param name="frames">
            The collection of 
            surfaces in the animation.
            </param>
            <param name="delay">
            The amount of delay to be 
            had between each frame. Defaults to 30.
            </param>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.AnimationCollection.Delay">
            <summary>
            Gets and sets the amount of time delay that 
            should be had before moving onto the next frame.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.AnimationCollection.AnimationTime">
            <summary>
            Gets and sets how long the animation should take to finish.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.AnimationCollection.Loop">
            <summary>
            Gets and sets whether or not the animation should loop.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.AnimationCollection.FrameIncrement">
            <summary>
            Gets and sets the number of frames to go forward 
            when moving onto the next frame.
            </summary>
            <remarks>
            Making this one would result in the 
            animation going forwards one frame. 
            -1 would mean that the animation would go backwards. 
            Cannot be 0.
            </remarks>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.AnimationCollection.AnimateForward">
            <summary>
            Gets and sets whether the animation goes forwards or backwards.
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.Sprites.AnimationDictionary">
            <summary>
            Summary description for Animation.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimationDictionary.#ctor">
            <summary>
            Creates an empty AnimationDictionary.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimationDictionary.#ctor(SdlDotNet.Graphics.Sprites.AnimationCollection)">
            <summary>
            Creates an AnimationDictionary with one animation with the key "Default".
            </summary>
            <param name="animation"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimationDictionary.#ctor(System.String,SdlDotNet.Graphics.Sprites.AnimationCollection)">
            <summary>
            Creates an AnimationDictionary with one element within it.
            </summary>
            <param name="key"></param>
            <param name="animation"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimationDictionary.#ctor(SdlDotNet.Graphics.Sprites.AnimationDictionary)">
            <summary>
            Creates a new AnimationDictionary with the contents of an existing AnimationDictionary.
            </summary>
            <param name="animationDictionary">The existing music Dictionary to add.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimationDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimationDictionary.Add(SdlDotNet.Graphics.Sprites.AnimationDictionary)">
            <summary>
            Adds a Dictionary of music to the current music Dictionary.
            </summary>
            <param name="animationDictionary">
            The Dictionary of 
            music samples to add.
            </param>
            <returns>
            The total number of elements within 
            the Dictionary after adding the sample.
            </returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimationDictionary.CopyTo(SdlDotNet.Graphics.Sprites.AnimationCollection[],System.Int32)">
            <summary>
            Provide the explicit interface member for IDictionary.
            </summary>
            <param name="array">Array to copy Dictionary to</param>
            <param name="index">Index at which to insert the Dictionary items</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimationDictionary.Insert(System.Int32,SdlDotNet.Graphics.Sprites.AnimationCollection)">
            <summary>
            Insert a item into the Dictionary
            </summary>
            <param name="index">Index at which to insert the item</param>
            <param name="animation">item to insert</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimationDictionary.IndexOf(SdlDotNet.Graphics.Sprites.AnimationCollection)">
            <summary>
            Gets the index of the given item in the Dictionary.
            </summary>
            <param name="animation">The item to search for.</param>
            <returns>The index of the given sprite.</returns>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.AnimationDictionary.Delay">
            <summary>
            Gets the average delay of all animations in the Dictionary, 
            sets the delay of every animation in the Dictionary.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.AnimationDictionary.FrameIncrement">
            <summary>
            Gets the average FrameIncrement for each AnimationCollection.  
            Sets the FrameIncrement of each AnimationCollection in the Dictionary.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.AnimationDictionary.AnimateForward">
            <summary>
            Gets whether all animations animate forward and 
            sets whether all animations in the Dictionary 
            are to animate forward.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.AnimationDictionary.Loop">
            <summary>
            Gets whether the first animation is looping, sets whether every animation in the Dictionary is to be looped.
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.Sprites.AnimationException">
            <summary>
            Exception for Animation
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimationException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimationException.#ctor(System.String)">
            <summary>
            Generate exception with given message
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimationException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="exception"></param>
            <param name="message"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.AnimationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SdlDotNet.Graphics.Sprites.ChangedZAxisEventArgs">
            <summary>
            event args for the Video Expose event.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.ChangedZAxisEventArgs.#ctor(SdlDotNet.Graphics.Sprites.Sprite,System.ComponentModel.ListSortDirection)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.ChangedZAxisEventArgs.#ctor(SdlDotNet.Graphics.Sprites.Sprite)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.ChangedZAxisEventArgs.ListSortDirection">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.ChangedZAxisEventArgs.Sprite">
            <summary>
            
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.Sprites.KillSpriteEventArgs">
            <summary>
            event args for the Video Expose event.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.KillSpriteEventArgs.#ctor(SdlDotNet.Graphics.Sprites.Sprite)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.KillSpriteEventArgs.Sprite">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.KillSpriteEventArgs.Rectangle">
            <summary>
            
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.Sprites.SpriteCollection">
            <summary>
            The SpriteCollection is used to group sprites into an easily managed whole. 
            </summary>
            <remarks>The sprite manager has no size.</remarks>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.#ctor">
            <summary>
            Creates a new SpriteCollection without any elements in it.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.Draw(SdlDotNet.Graphics.Surface)">
            <summary>
            Draws all surfaces within the collection on the given destination.
            </summary>
            <param name="destination">The destination surface.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.Erase(SdlDotNet.Graphics.Surface,SdlDotNet.Graphics.Surface)">
            <summary>
            Erases SpriteCollection from surface
            </summary>
            <param name="surface">
            Surface to remove the SpriteCollection from</param>
            <param name="background">
            Background to use to paint over Sprites in SpriteCollection
            </param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.SortByZAxis(System.ComponentModel.ListSortDirection)">
            <summary>
            
            </summary>
            <param name="direction"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.SortByZAxis">
            <summary>
            
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.Add(SdlDotNet.Graphics.Sprites.SpriteCollection)">
            <summary>
            Adds sprites from another group to this group
            </summary>
            <param name="spriteCollection">SpriteCollection to add Sprites from</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.Remove(SdlDotNet.Graphics.Sprites.SpriteCollection)">
            <summary>
            Removes sprite from this group if they are contained in the given group
            </summary>
            <param name="spriteCollection">
            Remove SpriteCollection from this SpriteCollection.
            </param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.Remove(System.Collections.ObjectModel.Collection{SdlDotNet.Graphics.Sprites.Sprite})">
            <summary>
            Removes sprite from this group if they are contained in the given collection
            </summary>
            <param name="spriteCollection">
            Remove all sprite in the Collection from this SpriteCollection.
            </param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.EnableActiveEvent">
            <summary>
            Enables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.EnableJoystickAxisEvent">
            <summary>
            Enables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.EnableJoystickBallEvent">
            <summary>
            Enables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.EnableJoystickButtonEvent">
            <summary>
            Enables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.EnableJoystickButtonDownEvent">
            <summary>
            Enables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.EnableJoystickButtonUpEvent">
            <summary>
            Enables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.EnableJoystickHatEvent">
            <summary>
            Enables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.EnableKeyboardEvent">
            <summary>
            Enables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.EnableKeyboardDownEvent">
            <summary>
            Enables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.EnableKeyboardUpEvent">
            <summary>
            Enables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.EnableMouseButtonEvent">
            <summary>
            Enables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.EnableMouseButtonDownEvent">
            <summary>
            Enables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.EnableMouseButtonUpEvent">
            <summary>
            Enables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.EnableMouseMotionEvent">
            <summary>
            Enables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.EnableUserEvent">
            <summary>
            Enables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.EnableQuitEvent">
            <summary>
            Enables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.EnableVideoExposeEvent">
            <summary>
            Enables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.EnableVideoResizeEvent">
            <summary>
            Enables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.EnableChannelFinishedEvent">
            <summary>
            Enables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.EnableMusicFinishedEvent">
            <summary>
            Enables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.EnableTickEvent">
            <summary>
            Enables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.DisableActiveEvent">
            <summary>
            Disables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.DisableJoystickAxisEvent">
            <summary>
            Disables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.DisableJoystickBallEvent">
            <summary>
            Disables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.DisableJoystickButtonEvent">
            <summary>
            Disables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.DisableJoystickButtonDownEvent">
            <summary>
            Disables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.DisableJoystickButtonUpEvent">
            <summary>
            Disables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.DisableJoystickHatEvent">
            <summary>
            Disables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.DisableKeyboardEvent">
            <summary>
            Disables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.DisableKeyboardDownEvent">
            <summary>
            Disables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.DisableKeyboardUpEvent">
            <summary>
            Disables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.DisableMouseButtonEvent">
            <summary>
            Disables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.DisableMouseButtonDownEvent">
            <summary>
            Disables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.DisableMouseButtonUpEvent">
            <summary>
            Disables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.DisableMouseMotionEvent">
            <summary>
            Disables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.DisableUserEvent">
            <summary>
            Disables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.DisableQuitEvent">
            <summary>
            Disables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.DisableVideoExposeEvent">
            <summary>
            Disables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.DisableVideoResizeEvent">
            <summary>
            Disables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.DisableChannelFinishedEvent">
            <summary>
            Disables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.DisableMusicFinishedEvent">
            <summary>
            Disables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.DisableTickEvent">
            <summary>
            Disables Event for SpriteCollection
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.Update(System.Object,SdlDotNet.Input.ActiveEventArgs)">
            <summary>
            Processes an active event.
            </summary>
            <param name="sender">Object that sent event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.Update(System.Object,SdlDotNet.Input.JoystickAxisEventArgs)">
            <summary>
            Processes a joystick motion event. This event is triggered by
            SDL. Only
            sprites that are JoystickSensitive are processed.
            </summary>
            <param name="sender">Object that sent event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.Update(System.Object,SdlDotNet.Input.JoystickBallEventArgs)">
            <summary>
            Processes a joystick hat motion event. This event is triggered by
            SDL. Only
            sprites that are JoystickSensitive are processed.
            </summary>
            <param name="sender">Object that sent event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.Update(System.Object,SdlDotNet.Input.JoystickButtonEventArgs)">
            <summary>
            Processes a joystick button event. This event is triggered by
            SDL. Only
            sprites that are JoystickSensitive are processed.
            </summary>
            <param name="sender">Object that sent event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.Update(System.Object,SdlDotNet.Input.JoystickHatEventArgs)">
            <summary>
            Processes a joystick hat motion event. This event is triggered by
            SDL. Only
            sprites that are JoystickSensitive are processed.
            </summary>
            <param name="sender">Object that sent event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.Update(System.Object,SdlDotNet.Input.KeyboardEventArgs)">
            <summary>
            Processes the keyboard.
            </summary>
            <param name="sender">Object that sent event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.Update(System.Object,SdlDotNet.Input.MouseButtonEventArgs)">
            <summary>
            Processes a mouse button. This event is trigger by the SDL
            system. 
            </summary>
            <param name="sender">Object that sent event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.Update(System.Object,SdlDotNet.Input.MouseMotionEventArgs)">
            <summary>
            Processes a mouse motion event. This event is triggered by
            SDL. Only
            sprites that are MouseSensitive are processed.
            </summary>
            <param name="sender">Object that sent event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.Update(System.Object,SdlDotNet.Core.QuitEventArgs)">
            <summary>
            Processes a Quit event
            </summary>
            <param name="sender">Object that sent event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.Update(System.Object,SdlDotNet.Core.UserEventArgs)">
            <summary>
            Processes a user event
            </summary>
            <param name="sender">Object that sent event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.Update(System.Object,SdlDotNet.Graphics.VideoExposeEventArgs)">
            <summary>
            Processes a VideoExposeEvent
            </summary>
            <param name="sender">Object that sent event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.Update(System.Object,SdlDotNet.Graphics.VideoResizeEventArgs)">
            <summary>
            Processes a VideoResizeEvent
            </summary>
            <param name="sender">Object that sent event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.Update(System.Object,SdlDotNet.Audio.ChannelFinishedEventArgs)">
            <summary>
            Processes a ChannelFinishedEvent
            </summary>
            <param name="sender">Object that sent event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.Update(System.Object,SdlDotNet.Audio.MusicFinishedEventArgs)">
            <summary>
            Processes a MusicfinishedEvent
            </summary>
            <param name="sender">Object that sent event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.Update(System.Object,SdlDotNet.Core.TickEventArgs)">
            <summary>
            All sprites are tickable, regardless if they actual do
            anything. This ensures that the functionality is there, to be
            overridden as needed.
            </summary>
            <param name="sender">Object that sent event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.Kill">
            <summary>
            Removes sprites from all SpriteCollections
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.IntersectsWith(SdlDotNet.Graphics.Sprites.Sprite)">
            <summary>
            Detects if a given sprite intersects with any sprites in this sprite collection.
            </summary>
            <param name="sprite">Sprite to intersect with</param>
            <returns>
            SpriteCollection of sprite in this SpriteCollection that 
            intersect with the given Sprite
            </returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteCollection.IntersectsWith(SdlDotNet.Graphics.Sprites.SpriteCollection)">
            <summary>
            Detects if any sprites in a given SpriteCollection 
            intersect with any sprites in this SpriteCollection.
            </summary>
            <param name="spriteCollection">
            SpriteCollection to check intersections
            </param>
            <returns>
            Hashtable with sprites in this SpriteCollection as 
            keys and SpriteCollections containing sprites they 
            intersect with from the given SpriteCollection
            </returns>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.SpriteCollection.LostRects">
            <summary>
            Rectangles of Sprites that have been removed
            </summary>
            <remarks>
            These Rectangles are kept temporarily until their 
            positions can be properly erased.
            </remarks>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.SpriteCollection.Size">
            <summary>
            Gets the size of the first sprite in the collection, otherwise a size of 0,0.
            </summary>
            <returns>The size of the first sprite in the collection.</returns>
        </member>
        <member name="T:SdlDotNet.Graphics.Sprites.SpriteException">
            <summary>
            Exception for Sprite
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteException.#ctor(System.String)">
            <summary>
            Generate exception with given message
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="exception"></param>
            <param name="message"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.SpriteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SdlDotNet.Graphics.Sprites.TextSprite">
            <summary>
            Implements a basic font that is given a font and a string and
            generates an appropriate surface from that font.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.TextSprite.#ctor(SdlDotNet.Graphics.Font)">
            <summary>
            Creates a new TextSprite given the font.
            </summary>
            <param name="font">The font to use when rendering.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.TextSprite.#ctor(System.String,SdlDotNet.Graphics.Font)">
            <summary>
            Creates a new TextSprite with given the text and font.
            </summary>
            <param name="textItem">Text to display</param>
            <param name="font">The font to use when rendering.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.TextSprite.#ctor(System.String,SdlDotNet.Graphics.Font,System.Drawing.Color)">
            <summary>
            Creates a new TextSprite given the text, font and color.
            </summary>
            <param name="textItem">Text to display</param>
            <param name="font">The font to use when rendering.</param>
            <param name="color">color of Text</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.TextSprite.#ctor(System.String,SdlDotNet.Graphics.Font,System.Drawing.Color,System.Boolean)">
            <summary>
            Creates a new TextSprite given the text, font, color and anti-aliasing flag.
            </summary>
            <param name="textItem">Text to display</param>
            <param name="font">The font to use when rendering.</param>
            <param name="color">Color of Text</param>
            <param name="antiAlias">A flag determining if it's to 
            use anti-aliasing when rendering. Defaults to true.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.TextSprite.#ctor(System.String,SdlDotNet.Graphics.Font,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a new TextSprite given the text, font, color and background color.
            </summary>
            <param name="textItem">Text to display</param>
            <param name="font">The font to use when rendering.</param>
            <param name="textColor">Text Color</param>
            <param name="backgroundColor">Background color</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.TextSprite.#ctor(System.String,SdlDotNet.Graphics.Font,System.Drawing.Point)">
            <summary>
            Creates a new TextSprite given the text, font and position.
            </summary>
            <param name="textItem"></param>
            <param name="font">The font to use when rendering.</param>
            <param name="position"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.TextSprite.#ctor(System.String,SdlDotNet.Graphics.Font,System.Boolean,System.Drawing.Point)">
            <summary>
            Creates a new TextSprite given the text, font, anti-aliasing flag and position.
            </summary>
            <param name="textItem">Text to display</param>
            <param name="font">The font to use when rendering.</param>
            <param name="antiAlias">A flag determining if it's to use 
            anti-aliasing when rendering. Defaults to true.</param>
            <param name="position">Position of sprite</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.TextSprite.#ctor(System.String,SdlDotNet.Graphics.Font,System.Drawing.Color,System.Drawing.Point)">
            <summary>
            Creates a new TextSprite given the text, font, color and position.
            </summary>
            <param name="textItem">Text to display</param>
            <param name="font">The font to use when rendering.</param>
            <param name="color">Color of Text</param>
            <param name="position">Position of Sprite</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.TextSprite.#ctor(System.String,SdlDotNet.Graphics.Font,System.Drawing.Color,System.Boolean,System.Drawing.Point)">
            <summary>
            Creates a new TextSprite given the text, font, color, anti-aliasing flag and position.
            </summary>
            <param name="textItem">Text to display</param>
            <param name="font">The font to use when rendering.</param>
            <param name="color">Color of Text</param>
            <param name="antiAlias">A flag determining if it's to use anti-aliasing when rendering. Defaults to true.</param>
            <param name="position">Position of Sprite</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.TextSprite.RenderInternal">
            <summary>
            Renders the font, if both the text and color and font are
            set. It stores the render in memory until it is used.
            </summary>
            <returns>The new renderation surface of the text.</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.TextSprite.ToString">
            <summary>
            Converts the text sprite to a string.
            </summary>
            <returns>Returns string representation of object</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Sprites.TextSprite.Dispose(System.Boolean)">
            <summary>
            Destroys the surface object and frees its memory
            </summary>
            <param name="disposing">If ture, dispose unmanaged resources</param>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.TextSprite.Transparent">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.TextSprite.TransparentColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.TextSprite.TextWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.TextSprite.MaxLines">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.TextSprite.AntiAlias">
            <summary>
            Antialias the text
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.TextSprite.Color">
            <summary>
            Gets and sets the color to be used with the text.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.TextSprite.BackgroundColor">
            <summary>
            Gets and sets the background color to be used with the text.
            </summary>
            <remarks>Defaults as Color.Transparent.</remarks>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.TextSprite.Font">
            <summary>
            Gets and sets the font to be used with the text.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Sprites.TextSprite.Text">
            <summary>
            Gets and sets the text to be rendered.
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.Styles">
            <summary>
            Text Style
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:SdlDotNet.Graphics.Styles.None">
            <summary>
            Normal.
            </summary>
            <remarks>
            FXCop wants this to be called 'None' instead of 'Normal'
            </remarks>
        </member>
        <member name="F:SdlDotNet.Graphics.Styles.Bold">
            <summary>
            Bold
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.Styles.Italic">
            <summary>
            Italic
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.Styles.Underline">
            <summary>
            Underline
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.Font">
            <summary>
            Font Class.
            </summary>
            <remarks>
            This class is used to instantiate fonts in an SDL.NET application.
            </remarks>
        </member>
        <member name="M:SdlDotNet.Graphics.Font.#ctor(System.String,System.Int32)">
            <summary>
            Font Constructor
            </summary>
            <param name="fileName">Font filename</param>
            <param name="pointSize">Size of font</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Font.#ctor(System.Byte[],System.Int32)">
            <summary>
            Create a Font from a byte array in memory.
            </summary>
            <param name="array">A array of byte that should be the font data</param>
            <param name="pointSize">Size of font</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Font.InitializeFontSystem">
            <summary>
            Initialize Font subsystem.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Font.RenderTextSolid(System.String,System.Drawing.Color)">
            <summary>
            Render Text to Solid
            </summary>
            <param name="textItem">String to display</param>
            <param name="color">Color of text</param>
            <returns>Surface containing the text</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Font.RenderTextShaded(System.String,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Shade text
            </summary>
            <param name="textItem"></param>
            <param name="backgroundColor"></param>
            <param name="textColor"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Font.RenderTextBlended(System.String,System.Drawing.Color)">
            <summary>
            Blended Text
            </summary>
            <param name="textColor"></param>
            <param name="textItem"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Font.SizeText(System.String)">
            <summary>
            Gets the size of the given text in the current font.
            </summary>
            <param name="textItem">String to display</param>
            <returns>The size of the text in pixels.</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Font.Render(System.String,System.Drawing.Color,System.Boolean)">
            <summary>
            Render text to a surface.
            </summary>
            <param name="textItem">String to display</param>
            <param name="antiAlias">If true, text will be anti-aliased</param>
            <param name="textColor">Color of text</param>
            <returns>Surface with text</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Font.Render(System.String,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Render text to a surface with a background color
            </summary>
            <param name="textItem">String to display</param>
            <param name="textColor">Color of text</param>
            <param name="backgroundColor">Color of background</param>
            <returns>Surface with text</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Font.Render(System.String,System.Drawing.Color)">
            <summary>
            Render Text to a surface
            </summary>
            <param name="textItem">Text string</param>
            <param name="textColor">Color of text</param>
            <returns>Surface with text</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Font.Render(System.String,System.Drawing.Color,System.Drawing.Color,System.Boolean)">
            <summary>
            Render text to a surface with a background color
            </summary>
            <param name="textItem">String to display</param>
            <param name="textColor">Color of text</param>
            <param name="backgroundColor">Color of background</param>
            <param name="antiAlias"></param>
            <returns>Surface with text</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Font.Render(System.String,System.Drawing.Color,System.Boolean,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="textItem"></param>
            <param name="textColor"></param>
            <param name="antiAlias"></param>
            <param name="textWidth"></param>
            <param name="maxLines"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Font.Render(System.String,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="textItem"></param>
            <param name="textColor"></param>
            <param name="backgroundColor"></param>
            <param name="antiAlias"></param>
            <param name="textWidth"></param>
            <param name="maxLines"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Font.Dispose(System.Boolean)">
            <summary>
            Destroys the surface object and frees its memory
            </summary>
            <param name="disposing">If true, it will dispose all objects</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Font.CloseHandle">
            <summary>
            Closes Surface handle
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Font.IsFontSystemInitialized">
            <summary>
            Queries if the Font subsystem has been intialized.
            </summary>
            <remarks>
            </remarks>
            <returns>True if Font subsystem has been initialized, false if it has not.</returns>
        </member>
        <member name="P:SdlDotNet.Graphics.Font.SystemFontNames">
            <summary>
            Get System Font Names
            </summary>
            <returns></returns>
        </member>
        <member name="P:SdlDotNet.Graphics.Font.Style">
            <summary>
            Gets and sets the font style of the text.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Font.Bold">
            <summary>
            Gets and sets whether or not the font is bold.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Font.Italic">
            <summary>
            Gets and sets whether or not the font is italicized.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Font.Underline">
            <summary>
            Gets and sets whether the font is underlined.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Font.Normal">
            <summary>
            Gets and sets whether the font style is not underlined, italic or bold.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Font.Height">
            <summary>
            Gets the height of the font.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Font.Ascent">
            <summary>
            Ascent Property
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Font.Descent">
            <summary>
            Descent Property
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Font.LineSize">
            <summary>
            Line Size property
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.FontException">
            <summary>
            Sdl Font Exception Class
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.FontException.#ctor">
            <summary>
            Font Exception
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.FontException.#ctor(System.String)">
            <summary>
            Initializes an TtfException instance
            </summary>
            <param name="message">
            The string representing the error message
            </param>
        </member>
        <member name="M:SdlDotNet.Graphics.FontException.#ctor(System.String,System.Exception)">
            <summary>
            Font Exception
            </summary>
            <param name="message">
            The string representing the error message
            </param>
            <param name="exception"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.FontException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Font Exception
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SdlDotNet.Graphics.MovieStatus">
            <summary>
            Status of Movie
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:SdlDotNet.Graphics.MovieStatus.Playing">
            <summary>
            Movie is playing
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.MovieStatus.Stopped">
            <summary>
            Movie is stopped
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.MovieStatus.Error">
            <summary>
            Error in movie playback
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.Movie">
            <summary>
            Represents a movie mpg file.
            </summary>
            <remarks>
            Before instantiating an instance of Movie,
            you must call Mixer.Close() to turn off the default mixer.
            If you do not do this, any movie will play very slowly. 
            Smpeg uses a custom mixer for audio playback. 
            </remarks>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.#ctor(System.String)">
            <summary>
            Create movie object from file
            </summary>
            <param name="file">filename of mpeg-1 movie.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.Dispose(System.Boolean)">
            <summary>
            Destroys the surface object and frees its memory
            </summary>
            <param name="disposing">Manually dispose if true.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.CloseHandle">
            <summary>
            Closes Music handle
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.EnableVideo">
            <summary>
            Enable video during playback
            </summary>
            <remarks>Enabled by default</remarks>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.DisableVideo">
            <summary>
            Disable video during playback
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.EnableAudio">
            <summary>
            Enable audio during playback
            </summary>
            <remarks>Enabled by default</remarks>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.DisableAudio">
            <summary>
            Disable audio during playback
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.Display(SdlDotNet.Core.BaseSdlResource)">
            <summary>
            Display video surface
            </summary>
            <param name="resource">Surface to display movie object on</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.AdjustVolume(System.Int32)">
            <summary>
            Sets the volume for the movie.
            </summary>
            <param name="volume">volume to set movie to.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.Play">
            <summary>
            Starts playback of a movie.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.Play(System.Boolean)">
            <summary>
            Starts playback of a movie.
            </summary>
            <param name="repeat">Loop movie while playing</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.Stop">
            <summary>
            Stops playback of a movie.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.Pause">
            <summary>
            This pauses playback of the movie
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.Rewind">
            <summary>
            Sets the movie playback position to the start of the movie.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.Loop(System.Boolean)">
            <summary>
            Loop movie
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.ScaleXY(System.Int32,System.Int32)">
            <summary>
            Resize movie
            </summary>
            <param name="width">Scale movie height to this width in pixels</param>
            <param name="height">Scale movie height to this height in pixels</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.ScaleSize(System.Int32)">
            <summary>
            Change size of movie by the same amount in both axes
            </summary>
            <param name="scalingFactor">scale both width and height by this factor</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.ScaleDouble">
            <summary>
            Double size of movie
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.ScaleNormal">
            <summary>
            Return size to normal
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.Move(System.Int32,System.Int32)">
            <summary>
            Move the video display area within the destination surface
            </summary>
            <param name="axisX">move the display area to this</param>
            <param name="axisY">move the display area to this</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.DisplayRegion(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Move the video display area within the destination surface
            </summary>
            <param name="width">change width of display area</param>
            <param name="height">change height of display area</param>
            <param name="axisX">move the display area to this</param>
            <param name="axisY">move the display area to this</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.Skip(System.Single)">
            <summary>
            Skip forward a certain number of seconds
            </summary>
            <param name="seconds">number of seconds to skip</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.Seek(System.Int32)">
            <summary>
            Seeks a specified number of bytes forward in the movie stream.
            </summary>
            <param name="bytes">number of bytes to move forward in movie</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.RenderFrame(System.Int32)">
            <summary>
            Renders specified frame of movie.
            </summary>
            <param name="frameNumber">frame number</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.RenderFirstFrame">
            <summary>
            Renders specified frame of movie.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Movie.RenderFinalFrame(SdlDotNet.Core.BaseSdlResource)">
            <summary>
            Renders final frame of movie and puts it on a surface
            </summary>
            <param name="surface">surface to display frame to</param>
        </member>
        <member name="P:SdlDotNet.Graphics.Movie.IsInitialized">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Movie.Size">
            <summary>
            Returns Size of movie
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Movie.Width">
            <summary>
            Width of movie
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Movie.Height">
            <summary>
            Height of movie
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Movie.Length">
            <summary>
            Returns the length of the movie in seconds
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Movie.FileSize">
            <summary>
            Get the movie file size in bytes.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Movie.CurrentFps">
            <summary>
            Returns current frames per second
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Movie.CurrentFrame">
            <summary>
            Returns current frame number in movie.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Movie.CurrentOffset">
            <summary>
            Returns current offset??? in movie.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Movie.CurrentTime">
            <summary>
            Returns the current time in the movie in seconds.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Movie.CurrentAudioFrame">
            <summary>
            Returns current audio frame
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Movie.AudioString">
            <summary>
            Returns audio string
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Movie.HasAudio">
            <summary>
            Returns true if the movie has a valid audio stream.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Movie.IsPlaying">
            <summary>
            If true, movie is playing
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Movie.IsStopped">
            <summary>
            If true, movie has been stopped
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Movie.HasVideo">
            <summary>
            Returns true if the movie has a valid video stream.
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.MovieStatusException">
            <summary>
            Represents an error resulting from a movie not playing correctly
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.MovieStatusException.#ctor">
            <summary>
            Represents an error resulting from a movie not playing correctly
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.MovieStatusException.#ctor(System.String)">
            <summary>
            Represents an error resulting from a movie not playing correctly
            </summary>
            <param name="message">Execption string</param>
        </member>
        <member name="M:SdlDotNet.Graphics.MovieStatusException.#ctor(System.String,System.Exception)">
            <summary>
            Represents an error resulting from a movie not playing correctly
            </summary>
            <param name="message">Exception string</param>
            <param name="exception"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.MovieStatusException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Represents an error resulting from a movie not playing correctly
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SdlDotNet.Graphics.NativeMethods">
            <summary>
            
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.NativeMethods.gluBuild2DMipmaps(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="internalFormat"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="format"></param>
            <param name="type"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:SdlDotNet.Graphics.SdlColor">
            <summary>
            Contains basic color conversions and operations
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.SdlColor.ConvertColor(System.Drawing.Color)">
            <summary>
            Converts .NET Color struct to SDL_Color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Graphics.SdlColor.Add(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Adds the values of one color to another color.
            </summary>
            <param name="color1">The first color.</param>
            <param name="color2">The second color.</param>
            <returns>The resultant color.</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.SdlColor.Subtract(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Subtracts the values of one color from another color.
            </summary>
            <param name="color1">
            The first color.
            </param>
            <param name="color2">
            The second color, the color to subtract.
            </param>
            <returns>The resultant color.</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.SdlColor.Invert(System.Drawing.Color)">
            <summary>
            Inverts the color, giving it a negative effect.
            </summary>
            <param name="color">The color to invert.</param>
            <returns>The inverted color.</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.SdlColor.Multiply(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Multiplies the values of one color with another color.
            </summary>
            <param name="color1">
            The first color.
            </param>
            <param name="color2">
            The second color.
            </param>
            <returns>
            The resultant color of the first and the second color multiplied.
            </returns>
        </member>
        <member name="T:SdlDotNet.Graphics.Alphas">
            <summary>
            Alpha flags for Video
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:SdlDotNet.Graphics.Alphas.RleEncoded">
            <summary>
            Equivalent to SDL_RLEACCEL
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.Alphas.SourceAlphaBlending">
            <summary>
            Equivalent to SDL_SRCALPHA
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.Surface">
            <summary>
            Represents an Sdl drawing surface.
            You can create instances of this class with the methods in the Video 
            object.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Initialize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            If the Surface is the screen generated by SetVideoMode, 
            we should not call Sdl.SDL_FreeSurface() on it. 
            Sdl.SDL_QUIT() automatically frees it.
            </summary>
            <param name="handle"></param>
            <param name="isVideoMode"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.#ctor(System.String)">
            <summary>
            <para>Represents a Image that can be drawn on a Sdl.Surface.</para>
            <para>The image can be loaded from from a file, 
            a System.Drawing.Bitmap, or a byte array.</para>
            <para>Supported image formats follows the development 
            cycle of SDL_Image. Currently, supported and planned 
            supported image formats are:</para>
            
            <para>
            <list type="bullet">
            	<item><term>.BMP</term>
            	<description>Windows Bitmap</description>
            	</item>
            	<item><term>.PNM</term>
            	<description>Portable Anymap File Format</description>
            	</item>
            	<item><term>.XPM</term>
            	<description>X PixMap</description></item>
            	<item><term>.LBM</term>
            	<description>Tagged Image File Format</description>
            	</item>
            	<item><term>.PCX</term>
            	<description>Z-Soft’s PC Paintbrush file format</description>
            	</item>
            	<item><term>.GIF</term>
            	<description>Graphics Interchange Format</description>
            	</item>
            	<item><term>.JPG</term>
            	<description>Joint Photographic Experts Group (JPEG)
            	</description>
            	</item>
            	<item><term>.TIF</term>
            	<description>Tagged Image File Format</description>
            	</item>
            	<item><term>.PNG</term>
            	<description>Portable Network Graphics</description>
            	</item>
            	<item><term>.TGA</term>
            	<description>Truevision (Targa) File Format</description>
            	</item>
            </list>
            </para>
            
            <para>Usage:</para>
            <code>
            Surface image = Surface("mybitmap.jpg")
            image.Blit(screen, new Rectangle(new Point(0,0),image.Size))
            </code>
            </summary> 
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.#ctor(System.Drawing.Size)">
            <summary>
            Creates a surface with the designated size.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.#ctor(System.Drawing.Rectangle)">
            <summary>
            Creates a surface with the designated rectangle size.
            </summary>
            <param name="rectangle">Rectangle size of surface</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.#ctor(System.Int32,System.Int32)">
            <summary>
            Create surface of a given width and height
            </summary>
            <param name="width">Width of surface</param>
            <param name="height">Height of surface</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create surface of a given width and height
            </summary>
            <param name="width">Width of surface</param>
            <param name="height">Height of surface</param>
            <param name="bitsPerPixel">Bits per pixel</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create surface of a given width and height
            </summary>
            <param name="width">Width of surface</param>
            <param name="height">Height of surface</param>
            <param name="bitsPerPixel">Bits per pixel</param>
            <param name="alphaMask">Alpha Mask</param>
            <param name="blueMask">Blue Mask</param>
            <param name="greenMask">Green Mask</param>
            <param name="redMask">Red Mask</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create surface of a given width and height.
            </summary>
            <param name="width">Width of surface</param>
            <param name="height">Height of surface</param>
            <param name="bitsPerPixel">Bits per pixel</param>
            <param name="alphaChannel">alphaChannel</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.#ctor(System.IO.MemoryStream)">
            <summary>
            Create a Surface from a MemoryStream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.#ctor(System.Byte[])">
            <summary>
            Create a Surface from a byte array in memory.
            </summary>
            <param name="array">
            A array of bytes that contains the image data
            </param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.#ctor(System.Drawing.Bitmap)">
            <summary>
            Create a SdlImage instance from a System.Drawing.Bitmap object. 
            Loads a bitmap from a System.Drawing.Bitmap object, 
            usually obtained from a resource.
            </summary>
            <param name="bitmap">A System.Drawing.Bitmap object</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.#ctor(SdlDotNet.Graphics.Surface)">
            <summary>
            Surface copy constructor.
            </summary>
            <remarks>Creates a copy of the surface at a different memory location.</remarks>
            <param name="surface">The surface to copy.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.ConvertRectToSdlRect(System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Dispose(System.Boolean)">
            <summary>
            Destroys the surface object and frees its memory
            </summary>
            <param name="disposing">If true, dispose unmanaged objects</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CloseHandle">
            <summary>
            Closes Surface handle
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.InvertColors">
            <summary>
            Inverts all the colors on the surface, giving it a negative effect.
            </summary>
            <returns>The surface.</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.ReplaceColor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Replaces the given color with a different color on the whole surface.
            </summary>
            <param name="original">The original color to be replaced.</param>
            <param name="replacement">The new color to replace the original color.</param>
            <returns>The surface.</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Fill(System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws a rectangle onto the surface
            </summary>
            <param name="rectangle">The rectangle coordinates</param>
            <param name="color">The color to draw</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Fill(System.Drawing.Color)">
            <summary>
            Fill entire surface with color
            </summary>
            <param name="color">Color to fill surface</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Draw(SdlDotNet.Graphics.IPrimitive,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="primitive"></param>
            <param name="color"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Draw(SdlDotNet.Graphics.IPrimitive,System.Drawing.Color,System.Boolean)">
            <summary>
            
            </summary>
            <param name="primitive"></param>
            <param name="color"></param>
            <param name="antiAlias"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Draw(SdlDotNet.Graphics.IPrimitive,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="primitive"></param>
            <param name="color"></param>
            <param name="antiAlias"></param>
            <param name="fill"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.GetColorValue(System.Drawing.Color)">
            <summary>
            Maps a logical color to a pixel value in the surface's pixel format
            </summary>
            <param name="color">The color to map</param>
            <returns>A pixel value in the surface's format</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.GetColor(System.Int32)">
            <summary>
            Maps an Sdl 32-bit pixel value to a color using the surface's 
            pixel format
            </summary>
            <param name="colorValue">The pixel value to map</param>
            <returns>
            A Color value for a pixel value in the surface's format
            </returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateCompatibleSurface">
            <summary>
            Creates new surface that is the same size and compatible with this one.
            </summary>
            <returns>new Surface</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateCompatibleSurface(System.Drawing.Rectangle)">
            <summary>
            Creates new surface that is compatible with this one.
            </summary>
            <param name="rectangle">Size of surface</param>
            <returns>new Surface</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateCompatibleSurface(System.Drawing.Size)">
            <summary>
            Creates new surface that is compatible with this one.
            </summary>
            <param name="size">Size of surface</param>
            <returns>new Surface</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateCompatibleSurface(System.Drawing.Size,System.Boolean)">
            <summary>
            Create a surface with the same pixel format as this one
            </summary>
            <param name="size">The size of the surface.</param>
            <param name="hardware">Flag whether to hold the surface in video memory.</param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateCompatibleSurface(System.Int32,System.Int32)">
            <summary>
            Create a surface with the same pixel format as this one
            </summary>
            <param name="width">width of surface</param>
            <param name="height">height of surface</param>
            <returns>new Surface</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateCompatibleSurface(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create a surface with the same pixel format as this one
            </summary>
            <param name="width">The width of the new surface</param>
            <param name="height">The height of the new surface</param>
            <param name="hardware">
            Flag indicating whether to attempt to place the surface in 
            video memory
            </param>
            <returns>A new surface</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Convert(SdlDotNet.Graphics.Surface,System.Boolean,System.Boolean)">
            <summary>
            Converts the surface to the same pixel format as the source
            </summary>
            <param name="source">The source surface</param>
            <param name="hardware">
            A flag indicating whether or not to 
            attempt to place the new surface in video memory
            </param>
            <param name="alpha">Use alpha blending on surface</param>
            <returns>The new surface</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Convert(SdlDotNet.Graphics.Surface)">
            <summary>
            Converts the surface to the same pixel format as the source
            </summary>
            <param name="source">The source surface</param>
            <returns>The new surface</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Convert">
            <summary>
            Converts this surface to the format of 
            the display window
            </summary>
            <returns>The new surface</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Blit(SdlDotNet.Graphics.Surface,System.Drawing.Point)">
            <summary>
            Copies another surface to this surface
            </summary>
            <param name="sourceSurface">
            The surface to copy from
            </param>
            <param name="destinationPosition">
            The rectangle coordinates on this surface to copy to
            </param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Blit(SdlDotNet.Graphics.Surface,System.Drawing.Rectangle)">
            <summary>
            Copies another surface to this surface
            </summary>
            <param name="sourceSurface">
            The surface to copy from
            </param>
            <param name="destinationRectangle">
            The rectangle coordinates on this surface to copy to
            </param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Blit(SdlDotNet.Graphics.Surface)">
            <summary>
            Blits the given surface onto the current one.
            </summary>
            <param name="sourceSurface">The source surface to blit onto the current one.</param>
            <returns>A rectangle describing the location of the updated surface.</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Blit(SdlDotNet.Graphics.Sprites.Sprite)">
            <summary>
            Blits a sprite onto the current surface.
            </summary>
            <param name="sprite">The sprite to blit.</param>
            <returns>A rectangle describing the location of the updated surface.</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Blit(SdlDotNet.Graphics.Sprites.Sprite,System.Drawing.Point)">
            <summary>
            Blits a sprite onto the current surface.
            </summary>
            <param name="sprite">The sprite to blit.</param>
            <param name="destinationPosition">The location where to blit the surface.</param>
            <returns>A rectangle describing the location of the updated surface.</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Blit(SdlDotNet.Graphics.Sprites.Sprite,System.Drawing.Rectangle)">
            <summary>
            Blits a sprite onto the current surface.
            </summary>
            <param name="sprite">The sprite to blit.</param>
            <param name="destinationRectangle">The location of the sprite on the destination.</param>
            <returns>A rectangle describing the location of the updated surface.</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Blit(SdlDotNet.Graphics.Sprites.SpriteCollection)">
            <summary>
            Blit entire SpriteCollection to Surface
            </summary>
            <param name="spriteCollection">SpriteCollection to Blit</param>
            <returns>Collection of Rectangles acutally blit to since 
            ere have may been some clipping.
            </returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Blit(SdlDotNet.Core.BaseSdlResource,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Blit surface to this surface
            </summary>
            <param name="sourceSurface">Source surface</param>
            <param name="destinationRectangle">
            Destination Reectangle on this surface
            </param>
            <param name="sourceRectangle">Source rectangel on source Surface</param>
            <returns>Actual blitted rectangle since there may have been clipping
            </returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Blit(SdlDotNet.Core.BaseSdlResource,System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            Copies a portion of a source surface to this surface
            </summary>
            <param name="sourceRectangle">
            The rectangle coordinates of the source surface to copy from
            </param>
            <param name="sourceSurface">The surface to copy from</param>
            <param name="destinationPosition">
            The coordinates on this surface to copy to
            </param>
            <returns>Destination Rectangle after any necessary clipping</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Erase(SdlDotNet.Graphics.Sprites.SpriteCollection,SdlDotNet.Graphics.Surface)">
            <summary>
            Erases SpriteCollection from surface
            </summary>
            <param name="spriteCollection">SpriteCollection to erase</param>
            <param name="background">
            Background Surface to cover up SpriteCollection
            </param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Erase(System.Drawing.Rectangle,SdlDotNet.Graphics.Surface)">
            <summary>
            Erase Rectangles from surface
            </summary>
            <param name="rectangle">Rectangle to erase</param>
            <param name="background">background to use to erase rectangle.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Erase(System.Collections.ObjectModel.Collection{System.Drawing.Rectangle},SdlDotNet.Core.BaseSdlResource)">
            <summary>
            Erase Rectangles from surface
            </summary>
            <param name="rectangles">Rectangle to erase</param>
            <param name="background">background to use to erase rectangle.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Lock">
            <summary>
            Locks a surface to allow direct pixel manipulation
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Unlock">
            <summary>
            Unlocks a surface which has been locked.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.SaveBmp(System.String)">
            <summary>
            Saves the surface to disk as a .bmp file
            </summary>
            <param name="file">The filename to save to</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Draw(System.Drawing.Point,System.Int32)">
            <summary>
            Draws a pixel to this surface using the color value to speed things up - uses 1,2 or 4 BytesPerPixel modes.
            Call Lock() before calling this method.
            </summary>
            <param name="point">The coordinate of where to plot the pixel</param>
            <param name="color">The color value of the pixel</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Draw(System.Drawing.Point,System.Drawing.Color)">
            <summary>
            Draws a pixel to this surface - uses 1,2 or 4 BytesPerPixel modes.
            Call Lock() before calling this method.
            </summary>
            <remarks>
            copied from http://cone3d.gamedev.net/cgi-bin/index.pl?page=tutorials/gfxsdl/tut1
            </remarks>
            <param name="point">The coordinate of where to plot the pixel</param>
            <param name="color">The color of the pixel</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Draw(System.Drawing.Point,System.Drawing.Color,System.Int32)">
            <summary>
            Draws a pixel on the surface using the provided alpha quantity.
            </summary>
            <param name="point">The coordinate of where to plot the pixel</param>
            <param name="color">The color of the pixel.  The alpha of this color is overwriten by the alpha value.</param>
            <param name="alpha">The alpha transparency to use for the color.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Draw(System.Drawing.Point,System.Drawing.Color,System.Boolean)">
            <summary>
            Draws a pixel on the surface with the option of alpha transparency.
            </summary>
            <param name="point">The coordinate of where to plot the pixel</param>
            <param name="color">The color of the pixel. The alpha value of this color is used if the alpha flag is true.</param>
            <param name="alpha">A flag saying to use or not use alpha transparency (defaults to false).</param>
            <remarks>If alpha transparency is to be used, the color's alpha value is used.  This uses SDL_gfx's pixelRGBA method.</remarks>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateFlippedVerticalSurface">
            <summary>
            Flips the rows of a surface, for use in an OpenGL texture for example
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateFlippedHorizontalSurface">
            <summary>
            Flips the columns of a surface, for use in an OpenGL texture for example
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.GetPixel(System.Drawing.Point)">
            <summary>
            Gets the color value of the pixel at the point.
            </summary>
            <param name="point">The coordinate of the surface</param>
            <returns>ColorValue of pixel</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.GetColors(System.Drawing.Rectangle)">
            <summary>
            Gets a 2D array of color values of the pixels in rectangle's area.
            </summary>
            <param name="rectangle">The rectangle of the pixels to get.</param>
            <returns>A 2D array of Colors describing the pixels in the rectangle.</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.SetPixels(System.Drawing.Point,System.Drawing.Color[0:,0:])">
            <summary>
            Sets a block of pixels.
            </summary>
            <param name="point">The top left corner of where the block should go.</param>
            <param name="colors">The 2D color array representing the pixels.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateRotatedSurface(System.Int32)">
            <summary>
            Creates new Rotated Surface
            </summary>
            <param name="degreesOfRotation">Degrees to rotate Surface</param>
            <returns>new Surface</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateRotatedSurface(System.Int32,System.Boolean)">
            <summary>
            Creates new Rotated Surface
            </summary>
            <param name="degreesOfRotation">Degrees to rotate Surface</param>
            <param name="antiAlias">Antialias</param>
            <returns>new Surface</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateRotatedZoomedSurface(System.Int32,System.Double)">
            <summary>
            Create new rotated and zoomed surface
            </summary>
            <param name="degreesOfRotation">degrees of rotation</param>
            <param name="zoom">scale of zoom</param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateRotatedZoomedSurface(System.Int32,System.Double,System.Boolean)">
            <summary>
            Create new rotated and zoomed surface
            </summary>
            <param name="degreesOfRotation">degrees of rotation</param>
            <param name="zoom">scale of zoom</param>
            <param name="antiAlias">If true, moothing is turned on.</param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateScaledSurface(System.Double,System.Double,System.Boolean)">
            <summary>
            Create rescaled surface
            </summary>
            <param name="zoomX">Scale on X-axis</param>
            <param name="zoomY">Scale on Y-axis</param>
            <param name="antiAlias">If true, smoothing is turned on.</param>
            <returns>new Surface</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateScaledSurface(System.Double,System.Double)">
            <summary>
            Create rescaled surface
            </summary>
            <param name="zoomX">Scale on X-axis</param>
            <param name="zoomY">Scale on Y-axis</param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateScaledSurface(System.Double)">
            <summary>
            Create rescaled surface
            </summary>
            <param name="zoom">Scale on both X and Y axes</param>
            <returns>new Surface</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateScaledSurface(System.Double,System.Boolean)">
            <summary>
            Create rescaled surface
            </summary>
            <param name="zoom">Scale on both X and Y axes</param>
            <param name="antiAlias">antialias</param>
            <returns>new Surface</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateScaleDoubleSurface">
            <summary>
            Doubles the size of the surface
            </summary>
            <returns>new Surface</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateScaleDoubleSurface(System.Boolean)">
            <summary>
            Doubles the size of the surface
            </summary>
            <returns>new Surface</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateStretchedSurface(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Stretch Surface
            </summary>
            <param name="sourceRectangle">Source Rectangle</param>
            <param name="destinationRectangle">Destination of stretch</param>
            <returns>new Surface</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateStretchedSurface(System.Drawing.Size)">
            <summary>
            Stretch Surface
            </summary>
            <param name="destinationSize">Destination of stretch</param>
            <returns>new Surface</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.ReadFully(System.IO.Stream,System.Int64)">
            <summary>
            Reads data from a stream until the end is reached. The
            data is returned as a byte array. An IOException is
            thrown if any of the underlying IO calls fail.
            </summary>
            <remarks>From http://www.yoda.arachsys.com/csharp
            skeet@pobox.com</remarks>
            <param name="stream">The stream to read data from</param>
            <param name="initialLength">The initial buffer length</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateResizedSurface">
            <summary>
            Resize surface to next power of two size. Useful for OpenGL.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateResizedSurface(System.Drawing.Size)">
            <summary>
            Resize Surface
            </summary>
            <param name="destinationSize">Size of new Surface</param>
            <returns>new Surface</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateTransformedSurface(SdlDotNet.Graphics.Transformation)">
            <summary>
            Uses a Transformation object to perform rotation, zooming/scaling
            </summary>
            <param name="transformation">Transformation object</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Update(System.Drawing.Rectangle)">
            <summary>
            Updates rectangle
            </summary>
            <param name="rectangle">Rectangle to update</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Update">
            <summary>
            Updates entire surface. If the surface is double-buffered, 
            this method will flip the back buffer onto the screen
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Update(System.Drawing.Rectangle[])">
            <summary>
            Update an array of rectangles
            </summary>
            <param name="rectangles">Array of Rectangles to update</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Update(System.Collections.ObjectModel.Collection{System.Drawing.Rectangle})">
            <summary>
            Update an array of rectangles
            </summary>
            <param name="rectangles">Collection of rectangles to update</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.CreateSurfaceFromClipRectangle(System.Drawing.Rectangle)">
            <summary> 
            Makes a new surface which 
            contains a portion of the current surface. 
            </summary> 
            <param name="clip">
            The rectangle on the current surface to be clipped.
            </param> 
            <returns>A clip of the new surface.</returns> 
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Clone">
            <summary>
            Creates a shallow copy of the Surface.
            </summary>
            <returns>
            Returns an object that needs to be cast to a Surface
            </returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Surface.Clone(System.Boolean)">
            <summary>
            Creates a copy of the Surface
            </summary>
            <param name="doDeepCopy">If true, a deep copy is created</param>
            <returns>clooned object</returns>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.IsInitialized">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.Bitmap">
            <summary>
            Creates a Bitmap representing the Surface.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.Size">
            <summary>
            Gets the size of the surface
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.Rectangle">
            <summary>
            Gets a rectangle that covers the entire of the surface
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.Width">
            <summary>
            Gets the width of the surface
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.Height">
            <summary>
            Gets the height of the surface
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.Pixels">
            <summary>
            Gets a pointer to the raw pixel data of the surface
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.MustLock">
            <summary>
            Gets a flag indicating if it is neccessary to lock 
            the surface before accessing its pixel data directly
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.TransparentColor">
            <summary>
            Get/set the transparent color of the image.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.Transparent">
            <summary>
            Clears the transparent color for the surface
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.SourceColorKey">
            <summary>
            Source color key. A mask color that will not be copied to other Surfaces.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.ClipRectangle">
            <summary>
            Sets/Gets the clipping rectangle for the surface
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.Pitch">
            <summary>
            Gets the pitch of the surface. Pitch is the number of bytes in a scanline of the surface.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.AlphaBlending">
            <summary>
            AlphaBlending on Surface
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.Alpha">
            <summary>
            Get/set the Alpha value of the image. 
            0 indicates that the image fully transparent. 
            255 indicates that the image is not transparent.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.BitsPerPixel">
            <summary>
            Gets the number of Bits per pixel.
            </summary>
            <remarks>Typically 8, 16, 24 or 32</remarks>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.BytesPerPixel">
            <summary>
            Gets the number of bytes per pixel for this surface
            </summary>
            <remarks>Tyically 1, 2, 3 or 4</remarks>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.AlphaMask">
            <summary>
            AlphaMask
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.RedMask">
            <summary>
            Mask for Red channel
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.GreenMask">
            <summary>
            Mask for Green channel
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.BlueMask">
            <summary>
            Mask for Blue channel
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.BlueShift">
            <summary>
            Left Shift for blue channel
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.RedShift">
            <summary>
            Left shift for red channel
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.GreenShift">
            <summary>
            Left shift for green channel
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.AlphaShift">
            <summary>
            Left shift for Alpha channel
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.AlphaLoss">
            <summary>
            Gets the percision loss for the alpha component.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.RedLoss">
            <summary>
            Gets the percision loss for the red component.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.GreenLoss">
            <summary>
            Gets the percision loss for the green component.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.BlueLoss">
            <summary>
            Gets the percision loss for the blue component.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.Flags">
            <summary>
            Surface flags
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Surface.FullScreen">
            <summary>
            Surface is fullscreen
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.MarshalHelper">
            <summary>
            A class to help with the manipulation of 24 bit ints.
            TODO: test to see if BigEndian will break it.
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.MinifyingOption">
            <summary>
            The texture minifying function is used whenever
            the	pixel being textured maps to an	area greater
            than one texture element. There are	six defined
            minifying functions.  Two of them use the nearest
            one	or nearest four	texture	elements to compute
            the	texture	value. The other four use mipmaps.
            
            A mipmap is	an ordered set of arrays representing
            the	same image at progressively lower resolutions.
            If the texture has dimensions 2nx2m, there are
            max(n,m)+1 mipmaps.	The first mipmap is the
            original texture, with dimensions 2nx2m. Each
            subsequent mipmap has dimensions 2k-1x2l-1,	where
            2kx2l are the dimensions of	the previous mipmap,
            until either k=0 or	l=0.  At that point,
            subsequent mipmaps have dimension 1x2l-1 or	2k-1x1
            until the final mipmap, which has dimension	1x1.
            To define the mipmaps, call	glTexImage1D,
            glTexImage2D, glCopyTexImage1D, or
            glCopyTexImage2D with the level argument
            indicating the order of the	mipmaps.  Level	0 is
            the	original texture; level	max(n,m) is the	final
            1x1	mipmap.
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.MinifyingOption.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.MinifyingOption.Nearest">
            <summary>
            Returns the value	of the texture element
            that is nearest (in Manhattan distance)
            to the center of the pixel being
            textured.
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.MinifyingOption.Linear">
            <summary>
            Returns the weighted average of the four
            texture elements that are closest	to the
            center of the pixel being textured.
            These can include border texture
            elements, depending on the values	of
            GL_TEXTURE_WRAP_S and GL_TEXTURE_WRAP_T,
            and on the exact mapping.
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.MinifyingOption.NearestMipMapNearest">
            <summary>
            Chooses the mipmap that most closely
            matches the size of the pixel being
            textured and uses the GL_NEAREST
            criterion (the texture element nearest
            to the center of the pixel) to produce a
            texture value.
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.MinifyingOption.LinearMipMapNearest">
            <summary>
            Chooses the mipmap that most closely
            matches the size of the pixel being
            textured and uses the GL_LINEAR
            criterion (a weighted average of the
            four texture elements that are closest
            to the center of the pixel) to produce a
            texture value.
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.MinifyingOption.NearestMipMapLinear">
            <summary>
            Chooses the two mipmaps that most
            closely match the	size of	the pixel
            being textured and uses the GL_NEAREST
            criterion	(the texture element nearest
            to the center of the pixel) to produce a
            texture value from each mipmap. The
            final texture value is a weighted
            average of those two values.
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.MinifyingOption.LinearMipMapLinear">
            <summary>
            Chooses the two mipmaps that most
            closely match the size of the pixel
            being textured and uses the GL_LINEAR
            criterion (a weighted average of the
            four texture elements that are closest
            to the center of the pixel) to produce a
            texture value from each mipmap. The
            final texture value is a weighted
            average of those two values.
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.MagnificationOption">
            <summary>
            The texture magnification function is used when
            the	pixel being textured maps to an	area less than
            or equal to	one texture element.  It sets the
            texture magnification function to either
            GL_NEAREST or GL_LINEAR. GL_NEAREST is
            generally faster than GL_LINEAR, but it can
            produce textured images with sharper edges because
            the	transition between texture elements is not as
            smooth. The	initial	value of GL_TEXTURE_MAG_FILTER
            is GL_LINEAR.
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.MagnificationOption.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.MagnificationOption.Nearest">
            <summary>
            Returns the value	of the texture element
            that is nearest (in Manhattan distance)
            to the center of the pixel being
            textured.
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.MagnificationOption.Linear">
            <summary>
            Returns the weighted average of the four
            texture elements that are closest	to the
            center of the pixel being textured.
            These can include border texture
            elements, depending on the values	of
            GL_TEXTURE_WRAP_S and GL_TEXTURE_WRAP_T,
            and on the exact mapping.
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.WrapOption">
            <summary>
            The wrap parameter for a texture coordinate
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.WrapOption.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.WrapOption.Clamp">
            <summary>
            Causes texture coordinates to be clamped to the range [0,1] and
            is useful for preventing wrapping artifacts	when
            mapping a single image onto	an object.
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.WrapOption.Repeat">
            <summary>
            Causes texture coordinates to loop around so to remain in the 
            range [0,1] where 1.5 would be .5. this is useful for repeating
            a texture for a tiled floor.
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.SurfaceGl">
            <summary>
            Loads a Surface into a OpenGl Texture.   
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.SurfaceGl.GL_ENABLE_BIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.SurfaceGl.GL_DEPTH_TEST">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.SurfaceGl.GL_QUADS">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.SurfaceGl.GL_CULL_FACE">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.SurfaceGl.GL_TEXTURE_2D">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.SurfaceGl.GL_BLEND">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.SurfaceGl.GL_ONE_MINUS_SRC_ALPHA">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.SurfaceGl.GL_SRC_ALPHA">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.SurfaceGl.GL_PROJECTION">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.SurfaceGl.GL_TEXTURE_ENV">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.SurfaceGl.GL_TEXTURE_ENV_MODE">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.SurfaceGl.GL_DECAL">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.SurfaceGl.GL_MODELVIEW">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.SurfaceGl.GL_TEXTURE_MIN_FILTER">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.SurfaceGl.GL_TEXTURE_MAG_FILTER">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.SurfaceGl.GL_TEXTURE_WRAP_T">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.SurfaceGl.GL_TEXTURE_WRAP_S">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.SurfaceGl.GL_RGBA">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.SurfaceGl.GL_UNSIGNED_BYTE">
            <summary>
            
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceGl.#ctor(SdlDotNet.Graphics.Surface)">
            <summary>
            Creates a new Instance of SurfaceGl.
            </summary>
            <param name="surface">The surface to be copied into a OpenGl Texture.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceGl.#ctor(SdlDotNet.Graphics.Surface,System.Boolean)">
            <summary>
            Creates a new Instance of SurfaceGl.
            </summary>
            <param name="surface">The surface to be copied into a OpenGl Texture.</param>
            <param name="isFlipped">States if the surface should be flipped when copied into a OpenGl Texture.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceGl.Delete">
            <summary>
            Deletes the texture from OpenGl memory.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceGl.Refresh">
            <summary>
            Reloads the OpenGl Texture from the Surface.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceGl.Refresh(SdlDotNet.Graphics.Surface,System.Boolean)">
            <summary>
            Reloads the OpenGl Texture from the Surface.
            </summary>
            <param name="surface">The surface to load from.</param>
            <param name="isFlipped">States if the surface should be flipped when moved into the OpenGl Texture.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceGl.Refresh(SdlDotNet.Graphics.Surface,System.Boolean,SdlDotNet.Graphics.MinifyingOption,SdlDotNet.Graphics.MagnificationOption,SdlDotNet.Graphics.WrapOption,SdlDotNet.Graphics.WrapOption)">
            <summary>
            Reloads the OpenGl Texture from the Surface.
            </summary>
            <param name="surface">The surface to load from.</param>
            <param name="isFlipped">States if the surface should be flipped when moved into the OpenGl Texture.</param>
            <param name="minifyingFilter">"The openGl filter used for minifying"</param>
            <param name="magnificationFilter">"The openGl filter used for magnification"</param>
            <param name="wrapS">The wrap parameter for texture coordinate S</param>
            <param name="wrapT">The wrap parameter for texture coordinate T</param>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceGl.Draw">
            <summary>
            Draws the Texture.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceGl.Draw(System.Drawing.Point)">
            <summary>
            Draws the Texture.
            </summary>
            <param name="location">The offset for the Texture.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceGl.Draw(System.Single,System.Single)">
            <summary>
            Draws the Texture.
            </summary>
            <param name="locationX">The x offset for the Texture.</param>
            <param name="locationY">The y offset for the Texture.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceGl.Draw(System.Drawing.Rectangle)">
            <summary>
            Draws the Texture.
            </summary>
            <param name="rectangle">the rectagle where the texture will be drawn.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceGl.Draw(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the Texture.
            </summary>
            <param name="locationX">The x offset for the Texture.</param>
            <param name="locationY">The y offset for the Texture.</param>
            <param name="width">The width fo the area where the Texture will be drawn.</param>
            <param name="height">The height fo the area where the Texture will be drawn.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceGl.Dispose(System.Boolean)">
            <summary>
             Disposes the Object by freeing all OpenGl memory allocated to it.
            </summary>
            <param name="disposing">States if it is disposing.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceGl.Dispose">
            <summary>
            Disposes the Object by freeing all OpenGl memory allocated to it.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.SurfaceGl.Mode2D">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.SurfaceGl.Surface">
            <summary>
            Gets and Sets the surface the Texture is made from.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.SurfaceGl.TextureWidth">
            <summary>
            Gets the Width of the texture.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.SurfaceGl.TextureHeight">
            <summary>
            Gets the Height of the texture.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.SurfaceGl.WidthRatio">
            <summary>
            Gets the Percent of the OpenGl Texture the original Surface is utilizing along it's Width.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.SurfaceGl.HeightRatio">
            <summary>
            Gets the Percent of the OpenGl Texture the original Surface  is utilizing along it's Height.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.SurfaceGl.TextureId">
            <summary>
            Gets the OpenGl Texture Name.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.SurfaceGl.IsFlipped">
            <summary>
            Gets and Sets if the texture is Flipped.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.SurfaceGl.MinFilter">
            <summary>
            Gets and Sets 
            The texture minifying function is used whenever
            the	pixel being textured maps to an	area greater
            than one texture element. There are	six defined
            minifying functions.  Two of them use the nearest
            one	or nearest four	texture	elements to compute
            the	texture	value. The other four use mipmaps.
            
            A mipmap is	an ordered set of arrays representing
            the	same image at progressively lower resolutions.
            If the texture has dimensions 2nx2m, there are
            max(n,m)+1 mipmaps.	The first mipmap is the
            original texture, with dimensions 2nx2m. Each
            subsequent mipmap has dimensions 2k-1x2l-1,	where
            2kx2l are the dimensions of	the previous mipmap,
            until either k=0 or	l=0.  At that point,
            subsequent mipmaps have dimension 1x2l-1 or	2k-1x1
            until the final mipmap, which has dimension	1x1.
            To define the mipmaps, call	glTexImage1D,
            glTexImage2D, glCopyTexImage1D, or
            glCopyTexImage2D with the level argument
            indicating the order of the	mipmaps.  Level	0 is
            the	original texture; level	max(n,m) is the	final
            1x1	mipmap.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.SurfaceGl.MagnificationFilter">
            <summary>
            Gets and Sets 
            The texture magnification function is used when
            the	pixel being textured maps to an	area less than
            or equal to	one texture element.  It sets the
            texture magnification function to either
            GL_NEAREST or GL_LINEAR. GL_NEAREST is
            generally faster than GL_LINEAR, but it can
            produce textured images with sharper edges because
            the	transition between texture elements is not as
            smooth. The	initial	value of GL_TEXTURE_MAG_FILTER
            is GL_LINEAR.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.SurfaceGl.WrapS">
            <summary>
            Gets and Sets
            The wrap parameter for texture coordinate s
            to either GL_CLAMP or GL_REPEAT.  GL_CLAMP causes
            s coordinates to be	clamped	to the range [0,1] and
            is useful for preventing wrapping artifacts	when
            mapping a single image onto	an object. GL_REPEAT
            causes the integer part of the s coordinate	to be
            ignored; the GL uses only the fractional part,
            thereby creating a repeating pattern. Border
            texture elements are accessed only if wrapping is
            set	to GL_CLAMP.  Initially, GL_TEXTURE_WRAP_S is
            set	to GL_REPEAT.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.SurfaceGl.WrapT">
            <summary>
            Gets and Sets
            The wrap parameter for	texture	coordinate t
            to either GL_CLAMP or GL_REPEAT.  GL_CLAMP causes
            t coordinates to be	clamped	to the range [0,1] and
            is useful for preventing wrapping artifacts	when
            mapping a single image onto	an object. GL_REPEAT
            causes the integer part of the s coordinate	to be
            ignored; the GL uses only the fractional part,
            thereby creating a repeating pattern. Border
            texture elements are accessed only if wrapping is
            set	to GL_CLAMP.  Initially, GL_TEXTURE_WRAP_T is
            set	to GL_REPEAT.
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.SurfaceLostException">
            <summary>
            Represents an error resulting from a surface being lost, 
            usually as a result of the user changing the input focus 
            away from a full-screen application.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceLostException.#ctor">
            <summary>
            Basic exception.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceLostException.#ctor(System.String)">
            <summary>
            Exception with specified string
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceLostException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.SurfaceLostException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SdlDotNet.Graphics.Transformation">
            <summary>
            The Tranformation class holds variables for rotating and zooming a Surface
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Transformation.#ctor(System.Double,System.Double,System.Double,System.Boolean,System.Int32)">
            <summary>
            Basic constructor
            </summary>
            <param name="scaleX">X-axis scaling factor</param>
            <param name="scaleY">Y-axis scaling factor</param>
            <param name="zoom">scaling in both X and Y axes</param>
            <param name="antiAlias">Antialias</param>
            <param name="degreesOfRotation">Rotate surface by given degrees</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Transformation.#ctor(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Transform with Anti-aliasing is on
            </summary>
            <param name="scaleX">X-axis scaling factor
            </param>
            <param name="scaleY">Y-axis scaling factor
            </param>
            <param name="zoom">scaling in both X and Y axes
            </param>
            <param name="degreesOfRotation">Rotate surface by given degrees
            </param>
        </member>
        <member name="M:SdlDotNet.Graphics.Transformation.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Transform with Anti-aliasing on and zoom off.
            </summary>
            <param name="scaleX">X-axis scaling factor
            </param>
            <param name="scaleY">Y-axis scaling factor
            </param>
            <param name="degreesOfRotation">
            Rotate surface by given degrees
            </param>
        </member>
        <member name="M:SdlDotNet.Graphics.Transformation.#ctor(System.Double,System.Int32)">
            <summary>
            Transform with Anti-aliasing on and scaling off.
            </summary>
            <param name="zoom">Zoom factor</param>
            <param name="degreesOfRotation">Degrees to rotate surface</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Transformation.#ctor(System.Int32)">
            <summary>
            Rotate surface
            </summary>
            <param name="degreesOfRotation">Degrees to rotate surface</param>
        </member>
        <member name="P:SdlDotNet.Graphics.Transformation.ScaleX">
            <summary>
            Stretch surface in X-axis by this amount
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Transformation.ScaleY">
            <summary>
            Stretch surface in Y-axis by this amount
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Transformation.Zoom">
            <summary>
            Stretch surface in X-axis and Y-axis by this amount
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Transformation.DegreesOfRotation">
            <summary>
            Rotate surface by given degrees.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Transformation.AntiAlias">
            <summary>
            Use antialiasing on the Surface.
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.OpenGLAttr">
            <summary>
            Public enumeration for setting the OpenGL window Attributes
            </summary>
            <remarks>
            While you can set most OpenGL attributes normally, 
            the attributes list above must be known before SDL 
            sets the video mode.
            </remarks>
        </member>
        <member name="F:SdlDotNet.Graphics.OpenGLAttr.RedSize">
            <summary>
            Size of the framebuffer red component, in bits
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OpenGLAttr.GreenSize">
            <summary>
            Size of the framebuffer green component, in bits
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OpenGLAttr.BlueSize">
            <summary>
            Size of the framebuffer blue component, in bits
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OpenGLAttr.AlphaSize">
            <summary>
            Size of the framebuffer alpha component, in bits
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OpenGLAttr.BufferSize">
            <summary>
            Size of the framebuffer, in bits
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OpenGLAttr.DoubleBuffer">
            <summary>
            0 or 1, enable or disable double buffering
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OpenGLAttr.DepthSize">
            <summary>
            Size of the depth buffer, in bits
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OpenGLAttr.StencilSize">
            <summary>
            Size of the stencil buffer, in bits.
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OpenGLAttr.AccumulationRedSize">
            <summary>
            Size of the accumulation buffer red component, in bits.
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OpenGLAttr.AccumulationGreenSize">
            <summary>
            Size of the accumulation buffer green component, in bits.
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OpenGLAttr.AccumulationBlueSize">
            <summary>
            Size of the accumulation buffer blue component, in bits.
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OpenGLAttr.AccumulationAlphaSize">
            <summary>
            Size of the accumulation buffer alpha component, in bits.
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OpenGLAttr.StereoRendering">
            <summary>
            Enable or disable stereo (left and right) buffers (0 or 1).
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OpenGLAttr.MultiSampleBuffers">
            <summary>
            Number of multisample buffers (0 or 1). 
            Requires the GL_ARB_MULTISAMPLE extension.
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OpenGLAttr.MultiSampleSamples">
            <summary>
            Number of samples per pixel when multisampling is enabled. 
            Requires the GL_ARB_MULTISAMPLE extension.
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OpenGLAttr.AcceleratedVisual">
            <summary>
            Guarantees hardware acceleration
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OpenGLAttr.SwapControl">
            <summary>
            Waits for vsync in OpenGL applications.
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.VideoModes">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.VideoModes.None">
            <summary>
            Create the video surface in system memory
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.VideoModes.HardwareSurface">
            <summary>
            Create the video surface in video memory
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.VideoModes.AsynchronousBlit">
            <summary>
            Enables the use of asynchronous updates of the display surface. 
            This will usually slow down blitting on single CPU machines, 
            but may provide a speed increase on SMP systems.
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.VideoModes.HardwarePalette">
            <summary>
            Give SDL.NET exclusive palette access. 
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.VideoModes.DoubleBuffering">
            <summary>
            Enable hardware double buffering; only valid with <see cref="F:SdlDotNet.Graphics.VideoModes.HardwareSurface"/>. 
            Calling Surface.Update() will flip the buffers and update the screen. 
            All drawing will take place on the surface that is not displayed 
            at the moment. If double buffering could not be enabled then 
            <see cref="M:SdlDotNet.Graphics.Surface.Update"/> will just update on the entire screen.
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.VideoModes.FullScreen">
            <summary>
            SDL.NET will attempt to use a fullscreen mode. 
            If a hardware resolution change is not possible 
            (for whatever reason), the next higher resolution 
            will be used and the display window centered on a black background.
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.VideoModes.OpenGL">
            <summary>
            Create an OpenGL rendering context. 
            You should have previously set OpenGL video 
            attributes with SDL_GL_SetAttribute.
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.VideoModes.Resizable">
            <summary>
            Create a resizable window. When the window is resized by 
            the user a <see cref="E:SdlDotNet.Core.Events.VideoResize"/> event is generated and 
            Video.SetVideoMode can be called again with the new size.
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.VideoModes.NoFrame">
            <summary>
            If possible, NoFrame causes SDL to create a window with 
            no title bar or frame decoration. 
            Fullscreen modes automatically have this flag set.
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.OverlayFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OverlayFormat.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OverlayFormat.YV12">
            <summary>
            Planar mode
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OverlayFormat.IYUV">
            <summary>
            Planar mode
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OverlayFormat.YUY2">
            <summary>
            Packed mode
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OverlayFormat.UYVY">
            <summary>
            Packed mode
            </summary>
        </member>
        <member name="F:SdlDotNet.Graphics.OverlayFormat.YVYU">
            <summary>
            Packed mode
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.Video">
            <summary>
            Provides methods to set the video mode, create video surfaces, 
            hide and show the mouse cursor,
            and interact with OpenGL
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.Close">
            <summary>
            Closes and destroys this object
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.Initialize">
            <summary>
            Initializes Video subsystem.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.IsVideoModeOk(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Checks if the requested video mode is supported
            </summary>
            <param name="width">Width of mode</param>
            <param name="height">Height of mode</param>
            <param name="fullScreen">Fullscreen or not</param>
            <param name="bitsPerPixel">
            Bits per pixel. Typically 8, 16, 24 or 32
            </param>
            <remarks></remarks>
            <returns>
            True is mode is supported, false if it is not.
            </returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.BestBitsPerPixel(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the highest bitsperpixel supported 
            for the given width and height
            </summary>
            <param name="width">Width of mode</param>
            <param name="height">Height of mode</param>
            <param name="fullScreen">Fullscreen mode</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.ListModes">
            <summary>
            Returns array of modes supported
            </summary>
            <returns>Array of Size structs</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.SetVideoMode">
            <summary>
            Sets the video mode of the application. 
            This overload is simply for initializing the video subsystem.
            It is useful when integrating with System.Windows.Forms
            </summary>
            <remarks>
            The surface will not have a height nor width.
            The surface will use the current bit depth.
            The surface will not be resizable.
            The surface will be an SDL surface for 2D drawing.
            The surface will be in windowed mode.
            The surface will have a frame unless it is fullscreen. 
            The surface will be a "software" surface. 
            Hardware surfaces are problematic and should only be used under certain circumstances.
            </remarks>
            <returns>a surface to draw to</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.SetVideoMode(System.Int32,System.Int32)">
            <summary>
            Sets the video mode of the application
            </summary>
            <remarks>
            The surface will use the current bit depth.
            The surface will not be resizable.
            The surface will be an SDL surface for 2D drawing.
            The surface will be in windowed mode.
            The surface will have a frame unless it is fullscreen. 
            The surface will be a "software" surface. 
            Hardware surfaces are problematic and should only be used under certain circumstances.
            </remarks>
            <param name="width">screen width</param>
            <param name="height">screen height</param>
            <returns>a surface to draw to</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.SetVideoMode(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the video mode of the application
            </summary>
            <remarks>
            The surface will not be resizable.
            The surface will be an SDL surface for 2D drawing.
            The surface will be in windowed mode.
            The surface will have a frame unless it is fullscreen. 
            The surface will be a "software" surface. 
            Hardware surfaces are problematic and should only be used under certain circumstances.
            </remarks>
            <param name="width">screen width</param>
            <param name="height">screen height</param>
            <param name="bitsPerPixel"></param>
            <returns>a surface to draw to</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.SetVideoMode(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the video mode of the application
            </summary>
            <remarks>
            The surface will be an SDL surface for 2D drawing.
            The surface will be in windowed mode.
            The surface will have a frame unless it is fullscreen. 
            The surface will be a "software" surface. 
            Hardware surfaces are problematic and should only be used under certain circumstances.
            </remarks>
            <param name="width"></param>
            <param name="height">height</param>
            <param name="resizable">window will be resizable</param>
            <returns>a surface to draw to</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.SetVideoMode(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the video mode of the application
            </summary>
            <remarks>
            The surface will be an SDL surface for 2D drawing.
            The surface will be in windowed mode.
            The surface will have a frame unless it is fullscreen. 
            The surface will be a "software" surface. 
            Hardware surfaces are problematic and should only be used under certain circumstances.
            </remarks>
            <param name="width"></param>
            <param name="height">height</param>
            <param name="bitsPerPixel">bits per pixel</param>
            <param name="resizable">window will be resizable</param>
            <returns>a surface to draw to</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.SetVideoMode(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sets the video mode of the application
            </summary>
            <remarks>
            The surface will be in windowed mode.
            The surface will have a frame unless it is fullscreen. 
            The surface will be a "software" surface. 
            Hardware surfaces are problematic and should only be used under certain circumstances.
            </remarks>
            <param name="width">screen width</param>
            <param name="height">screen height</param>
            <param name="resizable">window will be resizable</param>
            <param name="openGL">OpenGL surface</param>
            <returns>a surface to draw to</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.SetVideoMode(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sets the video mode of the application
            </summary>
            <remarks>
            The surface will be in windowed mode.
            The surface will have a frame unless it is fullscreen. 
            The surface will be a "software" surface. 
            Hardware surfaces are problematic and should only be used under certain circumstances.
            </remarks>
            <param name="width">screen width</param>
            <param name="height">screen height</param>
            <param name="bitsPerPixel">bits per pixel</param>
            <param name="resizable">window will be resizable</param>
            <param name="openGL">OpenGL surface</param>
            <returns>a surface to draw to</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.SetVideoMode(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the video mode of the application
            </summary>
            <remarks>
            The surface will have a frame unless it is fullscreen. 
            The surface will be a "software" surface. 
            Hardware surfaces are problematic and should only be used under certain circumstances.
            </remarks>
            <param name="width">screen width</param>
            <param name="height">screen height</param>
            <param name="resizable">window will be resizable</param>
            <param name="openGL">OpenGL surface</param>
            <param name="fullScreen">fullscreen</param>
            <returns>a surface to draw to</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.SetVideoMode(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the video mode of the application
            </summary>
            <remarks>
            The surface will have a frame unless it is fullscreen. 
            The surface will be a "software" surface. 
            Hardware surfaces are problematic and should only be used under certain circumstances.
            </remarks>
            <param name="width">screen width</param>
            <param name="height">screen height</param>
            <param name="bitsPerPixel">bits per pixel</param>
            <param name="resizable">window will be resizable</param>
            <param name="openGL">OpenGL surface</param>
            <param name="fullScreen">fullscreen</param>
            <returns>a surface to draw to</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.SetVideoMode(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the video mode of the application
            </summary>
            <remarks>The surface will have a frame unless it is fullscreen.</remarks>
            <param name="width">screen width</param>
            <param name="height">screen height</param>
            <param name="resizable">window will be resizable</param>
            <param name="openGL">OpenGL surface</param>
            <param name="fullScreen">fullscreen</param>
            <param name="hardwareSurface"></param>
            <returns>a surface to draw to</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.SetVideoMode(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the video mode of the application
            </summary>
            <remarks>The surface will have a frame unless it is fullscreen.</remarks>
            <param name="width">screen width</param>
            <param name="height">screen height</param>
            <param name="bitsPerPixel">bits per pixel</param>
            <param name="resizable">window will be resizable</param>
            <param name="openGL">OpenGL surface</param>
            <param name="fullScreen">fullscreen</param>
            <param name="hardwareSurface"></param>
            <returns>a surface to draw to</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.SetVideoMode(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the video mode of the application
            </summary>
            <param name="width">screen width</param>
            <param name="height">screen height</param>
            <param name="resizable">window will be resizable</param>
            <param name="openGL">OpenGL surface</param>
            <param name="fullScreen">fullscreen</param>
            <param name="hardwareSurface"></param>
            <param name="frame">
            If true, the window will have a frame around it. If fullscreen is true, then the frame will not appear
            </param>
            <returns>a surface to draw to</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.SetVideoMode(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the video mode of the application
            </summary>
            <param name="width">screen width</param>
            <param name="height">screen height</param>
            <param name="bitsPerPixel">bits per pixel</param>
            <param name="resizable">window will be resizable</param>
            <param name="openGL">OpenGL surface</param>
            <param name="fullScreen">fullscreen</param>
            <param name="hardwareSurface"></param>
            <param name="frame">
            If true, the window will have a frame around it. If fullscreen is true, then the frame will not appear
            </param>
            <returns>a surface to draw to</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.CreateRgbSurface(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new empty surface
            </summary>
            <param name="width">The width of the surface</param>
            <param name="height">The height of the surface</param>
            <param name="depth">The bits per pixel of the surface</param>
            <param name="redMask">
            A bitmask giving the range of red color values in the surface 
            pixel format
            </param>
            <param name="greenMask">
            A bitmask giving the range of green color values in the surface 
            pixel format
            </param>
            <param name="blueMask">
            A bitmask giving the range of blue color values in the surface 
            pixel format
            </param>
            <param name="alphaMask">
            A bitmask giving the range of alpha color values in the surface 
            pixel format
            </param>
            <param name="hardware">
            A flag indicating whether or not to attempt to place this surface
             into video memory</param>
            <returns>A new surface</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.CreateRgbSurface(System.Int32,System.Int32)">
            <summary>
            Creates a new empty surface
            </summary>
            <param name="width">The width of the surface</param>
            <param name="height">The height of the surface</param>
            <returns>A new surface</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.GLSwapBuffers">
            <summary>
            Swaps the OpenGL screen, only if the double-buffered 
            attribute was set.
            Call this instead of Surface.Update() for OpenGL windows.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.GLSetAttribute(SdlDotNet.Graphics.OpenGLAttr,System.Int32)">
            <summary>
            Sets an OpenGL attribute
            </summary>
            <param name="attribute">The attribute to set</param>
            <param name="attributeValue">The new attribute value</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.GLGetAttribute(SdlDotNet.Graphics.OpenGLAttr)">
            <summary>
            Gets the value of an OpenGL attribute
            </summary>
            <param name="attribute">The attribute to get</param>
            <returns>The current attribute value</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.WindowIcon(SdlDotNet.Core.BaseSdlResource)">
            <summary>
            sets the icon for the current window
            </summary>
            <param name="icon">the surface containing the image</param>
            <remarks>This should be called before Video.SetVideoMode</remarks>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.WindowIcon(System.Drawing.Icon)">
            <summary>
            sets the icon for the current window
            </summary>
            <remarks>
            On OS X, this method returns nothing since OS X does not use window icons.
            </remarks>
            <param name="icon">Icon to use</param>
            <remarks>This should be called before Video.SetVideoMode</remarks>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.WindowIcon(System.Reflection.Assembly,System.String)">
            <summary>
            Sets the icon for the current window to an icon in the given assembly's embedded resources.
            </summary>
            <param name="assembly">The assembly where the icon resource is held.</param>
            <param name="iconName">The name of the icon (e.g. &quot;App.ico&quot;).</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.WindowIcon(System.Reflection.Assembly)">
            <summary>
            Sets the icon for the current window to &quot;App.ico&quot; in the given assembly's embedded resources.
            </summary>
            <param name="assembly">The assembly where &quot;App.ico&quot; is held.</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.WindowIcon">
            <summary>
            Sets the icon for the current window. 
            This method assumes there is an embedded 
            resource named &quot;App.ico&quot;.
            </summary>
            <remarks>This should be called before Video.SetVideoMode</remarks>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.Hide">
            <summary>
            Minimizes the current window
            </summary>
            <returns>True if the action succeeded, otherwise False</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.IconifyWindow">
            <summary>
            Iconifies (minimizes) the current window
            </summary>
            <returns>True if the action succeeded, otherwise False</returns>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.Gamma(System.Single,System.Single,System.Single)">
            <summary>
            Sets gamma
            </summary>
            <param name="red">Red</param>
            <param name="green">Green</param>
            <param name="blue">Blue</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.Gamma(System.Single)">
            <summary>
            Sets gamma for all colors
            </summary>
            <param name="gammaValue">Gamma to set for all colors</param>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.GetGammaRampRed">
            <summary>
            Gets red gamma ramp
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.SetGammaRampRed(System.Int16[])">
            <summary>
            Sets red gamma ramp
            </summary>
            <param name="gammaArray"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.GetGammaRampBlue">
            <summary>
            Gets blue gamma ramp
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.SetGammaRampBlue(System.Int16[])">
            <summary>
            Sets blue gamma ramp
            </summary>
            <param name="gammaArray"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.GetGammaRampGreen">
            <summary>
            Gets green gamma ramp
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.SetGammaRampGreen(System.Int16[])">
            <summary>
            Sets green gamma ramp
            </summary>
            <param name="gammaArray"></param>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.Update">
            <summary>
            Update entire screen
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.Update(System.Drawing.Rectangle)">
            <summary>
            Updates rectangle
            </summary>
            <param name="rectangle">
            Rectangle to update
            </param>
        </member>
        <member name="M:SdlDotNet.Graphics.Video.Update(System.Drawing.Rectangle[])">
            <summary>
            Update an array of rectangles
            </summary>
            <param name="rectangles">
            Array of rectangles to update
            </param>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.IsInitialized">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.IsActive">
            <summary>
            Checks if the application is active
            </summary>
            <returns>True is applications is active</returns>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.Screen">
            <summary>
            Gets the surface for the window or screen, 
            must be preceded by a call to SetVideoMode
            </summary>
            <returns>The main screen surface</returns>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.GLRedFrameBufferSize">
            <summary>
            Gets or sets the size of the GL red framebuffer.
            </summary>
            <value>The size of the GL red framebuffer.</value>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.GLGreenFrameBufferSize">
            <summary>
            Gets or sets the size of the GL green framebuffer.
            </summary>
            <value>The size of the GL green framebuffer.</value>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.GLBlueFrameBufferSize">
            <summary>
            Gets or sets the size of the GL blue framebuffer.
            </summary>
            <value>The size of the GL blue framebuffer.</value>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.GLAlphaFrameBufferSize">
            <summary>
            Gets or sets the size of the GL alpha framebuffer.
            </summary>
            <value>The size of the GL alpha framebuffer.</value>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.GLFrameBufferSize">
            <summary>
            Gets or sets the size of the GL framebuffer.
            </summary>
            <value>The size of the GL framebuffer.</value>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.GLDepthSize">
            <summary>
            Gets or sets the size of the GL depth.
            </summary>
            <value>The size of the GL depth.</value>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.GLStencilSize">
            <summary>
            Gets or sets the size of the GL stencil.
            </summary>
            <value>The size of the GL stencil.</value>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.GLRedAccumulationBufferSize">
            <summary>
            Gets or sets the size of the GL red accumulation buffer.
            </summary>
            <value>The size of the GL red accumulation buffer.</value>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.GLGreenAccumulationBufferSize">
            <summary>
            Gets or sets the size of the GL green accumulation buffer.
            </summary>
            <value>The size of the GL green accumulation buffer.</value>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.GLBlueAccumulationBufferSize">
            <summary>
            Gets or sets the size of the GL blue accumulation buffer.
            </summary>
            <value>The size of the GL blue accumulation buffer.</value>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.GLAlphaAccumulationBufferSize">
            <summary>
            Gets or sets the size of the GL alpha accumulation buffer.
            </summary>
            <value>The size of the GL alpha accumulation buffer.</value>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.GLStereoRendering">
            <summary>
            Gets or sets the GL stereo rendering.
            </summary>
            <value>The GL stereo rendering.</value>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.GLDoubleBufferEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is GL double buffer enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is GL double buffer enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.GLStereoRenderingEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is GL stereo rendering enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is GL stereo rendering enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.GLMultiSampleBuffers">
            <summary>
            Gets or sets the GL multi sample buffers.
            </summary>
            <value>The GL multi sample buffers.</value>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.GLMultiSampleSamples">
            <summary>
            Gets or sets the GL multi sample samples.
            </summary>
            <value>The GL multi sample samples.</value>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.WindowCaption">
            <summary>
            gets or sets the text for the current window
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.DefaultIcon">
            <summary>
            Gets the default SDL.NET icon
            </summary>
            <returns></returns>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.GrabInput">
            <summary>
            Forces keyboard focus and prevents the mouse from leaving the window
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.VideoDriver">
            <summary>
            Returns video driver name
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.Video.WindowHandle">
            <summary>
            This returns the platform window handle for the SDL window.
            </summary>
            <remarks>
            TODO: The Unix SysWMinfo struct has not been finished. 
            This only runs on Windows right now.
            </remarks>
        </member>
        <member name="T:SdlDotNet.Graphics.VideoExposeEventArgs">
            <summary>
            event args for the Video Expose event.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.VideoExposeEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.VideoInfo">
            <summary>
            Information for current video mode..
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.IsInitialized">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.BitsPerPixel">
            <summary>
            Bits Per Pixel. Typically 8, 16 or 32.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.BytesPerPixel">
            <summary>
            Bytes per pixel. Typically 1, 2 or 4.
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.AlphaMask">
            <summary>
            Alpha Mask
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.RedMask">
            <summary>
            Red Mask
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.GreenMask">
            <summary>
            Green Mask
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.BlueMask">
            <summary>
            Blue Mask
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.BlueShift">
            <summary>
            Binary left shift of blue component
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.RedShift">
            <summary>
            Binary left shift of red component
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.GreenShift">
            <summary>
            Binary left shift of green component
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.AlphaShift">
            <summary>
            Binary left shift of alpha component
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.AlphaLoss">
            <summary>
            Precision loss of alpha component
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.RedLoss">
            <summary>
            Precision loss of red component
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.GreenLoss">
            <summary>
            Precision loss of green component
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.BlueLoss">
            <summary>
            Precision loss of blue component
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.HasHardwareSurfaces">
            <summary>
            Checks if the video system has a hardware surface
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.HasWindowManager">
            <summary>
            checks if window manager is available
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.HasHardwareBlits">
            <summary>
            Checks if hardware blits are available
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.HasHardwareColorKeyBlits">
            <summary>
            Checks if hardware colorkey blits are accelerated
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.HasHardwareAlphaBlits">
            <summary>
            Checks if hardware alpha blits are accelerated
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.HasSoftwareBlits">
            <summary>
            Checks if software to hardware blits are accelerated
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.HasSoftwareColorKeyBlits">
            <summary>
            Checks if software to hardware colorkey blits are accelerated
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.HasSoftwareAlphaBlits">
            <summary>
            Software to hardware alpha blits are accelerated
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.HasColorFills">
            <summary>
            Color fills are accelerated
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.VideoMemory">
            <summary>
            Total video memory
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.ScreenHeight">
            <summary>
            Current screen height
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoInfo.ScreenWidth">
            <summary>
            Current screen width
            </summary>
        </member>
        <member name="T:SdlDotNet.Graphics.VideoResizeEventArgs">
            <summary>
            Event args for resizing the application window.
            </summary>
        </member>
        <member name="M:SdlDotNet.Graphics.VideoResizeEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="width">The new window width</param>
            <param name="height">The new window height</param>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoResizeEventArgs.Width">
            <summary>
            Width of window
            </summary>
        </member>
        <member name="P:SdlDotNet.Graphics.VideoResizeEventArgs.Height">
            <summary>
            Height of window
            </summary>
        </member>
        <member name="T:SdlDotNet.Input.ActiveEventArgs">
            <summary>
            Event args for gaining focus.
            </summary>
            <remarks>
            The app can gain focus from the mouse, 
            keyboard or from being de-iconified.
            </remarks>
        </member>
        <member name="M:SdlDotNet.Input.ActiveEventArgs.#ctor(System.Boolean,SdlDotNet.Input.Focus)">
            <summary>
            Constructor for ActiveEventArgs
            </summary>
            <remarks>
            Creates EventArgs that can be passed to the event queue
            </remarks>
            <param name="gainedFocus">
            True if the focus was gained, False if it was lost
            </param>
            <param name="state">
            Set to type of input that gave the app focus
            </param>
        </member>
        <member name="P:SdlDotNet.Input.ActiveEventArgs.GainedFocus">
            <summary>
            Returns true if the app has gained focus
            </summary>
            <remarks>
            The keyboard, mouse or de-iconified app can give the app focus
            </remarks>
        </member>
        <member name="P:SdlDotNet.Input.ActiveEventArgs.State">
            <summary>
            Returns the type of input that gave the app focus
            </summary>
            <remarks>
            The keyboard, mouse or de-iconified app can give the app focus
            </remarks>
        </member>
        <member name="T:SdlDotNet.Input.BallMotion">
            <summary>
            Struct for trackball motion
            </summary>
        </member>
        <member name="M:SdlDotNet.Input.BallMotion.#ctor(System.Int32,System.Int32)">
            <summary>
            Ball motion
            </summary>
            <param name="positionX"></param>
            <param name="positionY"></param>
        </member>
        <member name="M:SdlDotNet.Input.BallMotion.ToString">
            <summary>
            String output
            </summary>
            <returns>String repesentation.</returns>
        </member>
        <member name="M:SdlDotNet.Input.BallMotion.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="obj">Object for comparison</param>
            <returns>If objects are equal, this returns true.</returns>
        </member>
        <member name="M:SdlDotNet.Input.BallMotion.op_Equality(SdlDotNet.Input.BallMotion,SdlDotNet.Input.BallMotion)">
            <summary>
            Equals operator
            </summary>
            <param name="c1">object to compare</param>
            <param name="c2">object to compare</param>
            <returns>If objects are equal, this returns true.</returns>
        </member>
        <member name="M:SdlDotNet.Input.BallMotion.op_Inequality(SdlDotNet.Input.BallMotion,SdlDotNet.Input.BallMotion)">
            <summary>
            Not equals operator
            </summary>
            <param name="c1">object to compare</param>
            <param name="c2">object to compare</param>
            <returns>If objects are not equal, this returns true.</returns>
        </member>
        <member name="M:SdlDotNet.Input.BallMotion.GetHashCode">
            <summary>
            GetHashCode openrator
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="P:SdlDotNet.Input.BallMotion.MotionX">
            <summary>
            motion in X-axis
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.BallMotion.MotionY">
            <summary>
            Motion in Y-axis
            </summary>
        </member>
        <member name="T:SdlDotNet.Input.JoystickAxis">
            <summary>
            JoystickAxes
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:SdlDotNet.Input.JoystickAxis.Horizontal">
            <summary>
            Horizontal Axis
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.JoystickAxis.Vertical">
            <summary>
            Vertical Axis
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.JoystickAxis.Axis3">
            <summary>
            For some controllers
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.JoystickAxis.Axis4">
            <summary>
            For some controllers
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.JoystickAxis.Axis5">
            <summary>
            For some controllers
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.JoystickAxis.Axis6">
            <summary>
            For some controllers
            </summary>
        </member>
        <member name="T:SdlDotNet.Input.JoystickHatStates">
            <summary>
            JoystickHatStates
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:SdlDotNet.Input.JoystickHatStates.None">
            <summary>
            Centered state. FXCop was complaining that this should be called "None".
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.JoystickHatStates.Up">
            <summary>
            Up
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.JoystickHatStates.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.JoystickHatStates.Down">
            <summary>
            Down
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.JoystickHatStates.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.JoystickHatStates.RightUp">
            <summary>
            Right and Up
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.JoystickHatStates.RightDown">
            <summary>
            Right and Down
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.JoystickHatStates.LeftUp">
            <summary>
            Left and Up
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.JoystickHatStates.LeftDown">
            <summary>
            Left and Down
            </summary>
        </member>
        <member name="T:SdlDotNet.Input.Joystick">
            <summary>
            Represents a joystick on the system
            </summary>
        </member>
        <member name="M:SdlDotNet.Input.Joystick.#ctor(System.Int32)">
            <summary>
            open joystick at index number
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SdlDotNet.Input.Joystick.Dispose(System.Boolean)">
            <summary>
            Destroys the surface object and frees its memory
            </summary>
            <param name="disposing">True for manual disposing</param>
        </member>
        <member name="M:SdlDotNet.Input.Joystick.CloseHandle">
            <summary>
            Closes Joystick handle
            </summary>
        </member>
        <member name="M:SdlDotNet.Input.Joystick.GetAxisPosition(SdlDotNet.Input.JoystickAxis)">
            <summary>
            Gets the current axis position
            </summary>
            <param name="axis">Vertical or horizontal axis</param>
            <returns>Joystick position</returns>
        </member>
        <member name="M:SdlDotNet.Input.Joystick.GetBallMotion(System.Int32)">
            <summary>
            Gets the ball motion
            </summary>
            <param name="ball">ball</param>
            <returns>Ballmotion struct</returns>
        </member>
        <member name="M:SdlDotNet.Input.Joystick.GetButtonState(System.Int32)">
            <summary>
            Gets the current button state
            </summary>
            <param name="button">Button to query</param>
            <returns>Pressed or not pressed</returns>
        </member>
        <member name="M:SdlDotNet.Input.Joystick.GetHatState(System.Int32)">
            <summary>
            Gets the current Hat state
            </summary>
            <param name="hat">Hat to query</param>
            <returns>Hat state</returns>
        </member>
        <member name="P:SdlDotNet.Input.Joystick.IsInitialized">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.Joystick.Index">
            <summary>
            Gets the 0-based numeric index of this joystick
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.Joystick.NumberOfAxes">
            <summary>
            Gets the number of axes on this joystick (usually 2 for each stick handle)
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.Joystick.NumberOfBalls">
            <summary>
            Gets the number of trackballs on this joystick
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.Joystick.NumberOfHats">
            <summary>
            Gets the number of hats on this joystick
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.Joystick.NumberOfButtons">
            <summary>
            Gets the number of buttons on this joystick
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.Joystick.Name">
            <summary>
            Gets the name of this joystick
            </summary>
        </member>
        <member name="T:SdlDotNet.Input.JoystickAxisEventArgs">
            <summary>
            Summary description for JoystickAxisEventArgs.
            </summary>
        </member>
        <member name="M:SdlDotNet.Input.JoystickAxisEventArgs.#ctor(System.Byte,System.Byte,System.Single)">
            <summary>
            Create Event args
            </summary>
            <param name="device">The joystick index</param>
            <param name="axisIndex">The axis index</param>
            <param name="axisValue">The new axis value</param>
        </member>
        <member name="P:SdlDotNet.Input.JoystickAxisEventArgs.Device">
            <summary>
            Return device
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.JoystickAxisEventArgs.AxisIndex">
            <summary>
            Axis Index
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.JoystickAxisEventArgs.AxisValue">
            <summary>
            AxisValue
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.JoystickAxisEventArgs.RawAxisValue">
            <summary>
            Returns axis value generated by SDL.
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.JoystickAxisEventArgs.JoystickThreshold">
            <summary>
            Joystick jitter threshhold
            </summary>
            <remarks>
            The joystick has to return a value that is 
            higher than this before firing an event. 
            This is used to reduce joystick jitter.
            </remarks>
        </member>
        <member name="T:SdlDotNet.Input.JoystickBallEventArgs">
            <summary>
            Summary description for JoystickBallEventArgs.
            </summary>
        </member>
        <member name="M:SdlDotNet.Input.JoystickBallEventArgs.#ctor(System.Byte,System.Byte,System.Int16,System.Int16)">
             <summary>
             
             </summary>
            <param name="device">The joystick index</param>
             <param name="ball">The trackball index</param>
             <param name="relativeX">The relative X position</param>
             <param name="relativeY">The relative Y position</param>
        </member>
        <member name="P:SdlDotNet.Input.JoystickBallEventArgs.Device">
            <summary>
            Device
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.JoystickBallEventArgs.Ball">
            <summary>
            Ball
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.JoystickBallEventArgs.RelativeX">
            <summary>
            change in distance on X-axis
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.JoystickBallEventArgs.RelativeY">
            <summary>
            Change in distance on Y axis
            </summary>
        </member>
        <member name="T:SdlDotNet.Input.JoystickButtonEventArgs">
            <summary>
            Summary description for JoystickButtonEventArgs.
            </summary>
        </member>
        <member name="M:SdlDotNet.Input.JoystickButtonEventArgs.#ctor(System.Byte,System.Byte,System.Boolean)">
            <summary>
            joystick button args
            </summary>
            <param name="device">The joystick index</param>
            <param name="button">The button index</param>
            <param name="buttonPressed">
            True if the button was pressed, 
            False if it was released
            </param>
        </member>
        <member name="P:SdlDotNet.Input.JoystickButtonEventArgs.Device">
            <summary>
            joystick device
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.JoystickButtonEventArgs.Button">
            <summary>
            Button
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.JoystickButtonEventArgs.ButtonPressed">
            <summary>
            Is button pressed
            </summary>
        </member>
        <member name="T:SdlDotNet.Input.JoystickHatEventArgs">
            <summary>
            Summary description for JoystickHatEventArgs.
            </summary>
        </member>
        <member name="M:SdlDotNet.Input.JoystickHatEventArgs.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Joystick Hat event args
            </summary>
            <param name="device">The joystick index</param>
            <param name="hatIndex">The hat index</param>
            <param name="hatValue">The new hat position</param>
        </member>
        <member name="P:SdlDotNet.Input.JoystickHatEventArgs.Device">
            <summary>
            joystick
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.JoystickHatEventArgs.HatIndex">
            <summary>
            Hat Index
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.JoystickHatEventArgs.HatValue">
            <summary>
            Hat value
            </summary>
        </member>
        <member name="T:SdlDotNet.Input.Joysticks">
            <summary>
            Provides methods for querying the number and make-up of the joysticks on a system.
            You can obtain an instance of this class by accessing the Joysticks property of the main Sdl object.
            Note that actual joystick input is handled by the Events class
            </summary>
        </member>
        <member name="M:SdlDotNet.Input.Joysticks.Initialize">
            <summary>
            Starts joystick subsystem
            </summary>
        </member>
        <member name="M:SdlDotNet.Input.Joysticks.IsJoystickInitialized(System.Int32)">
            <summary>
            Returns true if the joystick has been initialized
            </summary>
        </member>
        <member name="M:SdlDotNet.Input.Joysticks.Close">
            <summary>
            Closes and destroys this object
            </summary>
        </member>
        <member name="M:SdlDotNet.Input.Joysticks.IsValidJoystickNumber(System.Int32)">
            <summary>
            Checks to see if joystick number is valid
            </summary>
            <param name="index">Index of joystick to query</param>
            <returns>True if joystick is valid</returns>
        </member>
        <member name="M:SdlDotNet.Input.Joysticks.OpenJoystick(System.Int32)">
            <summary>
            Creates a joystick object to read information about a joystick
            </summary>
            <param name="index">The 0-based index of the joystick to read</param>
            <returns>A Joystick object</returns>
        </member>
        <member name="P:SdlDotNet.Input.Joysticks.IsInitialized">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.Joysticks.NumberOfJoysticks">
            <summary>
            Returns the number of joysticks on this system
            </summary>
            <returns>
            The number of joysticks
            </returns>
        </member>
        <member name="T:SdlDotNet.Input.Key">
            <summary>
            What we really want is a mapping of every raw key on the keyboard.
            To support international keyboards, we use the range 0xA1 - 0xFF
            as international virtual keycodes.  
            We'll follow in the footsteps of X11...
            The keyboard syms have been cleverly chosen to map to ASCII
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:SdlDotNet.Input.Key.Unknown">
             <summary>
            Unknown
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.First">
            <summary>
            first
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Backspace">
            <summary>
            backspace. '\b'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Tab">
            <summary>
            tab. '\t'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Clear">
            <summary>
            clear
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Return">
            <summary>
            return. '\r'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Pause">
            <summary>
            pause
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Escape">
            <summary>
            escape. '^['
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Space">
            <summary>
            space. ' '
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.ExclamationPoint">
            <summary>
            exclaim. '!'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.DoubleQuote">
            <summary>
            quotedbl. '"'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Hash">
            <summary>
            hash. '#'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.DollarSign">
            <summary>
            dollar. '$'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Ampersand">
            <summary>
            ampersand. '&amp;'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Quote">
            <summary>
            quote. '''
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.LeftParenthesis">
            <summary>
            left parenthesis. '('
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.RightParenthesis">
            <summary>
            right parenthesis. ')'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Asterisk">
            <summary>
            asterisk. '*'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Plus">
            <summary>
            plus sign. '+'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Comma">
            <summary>
            comma. ','
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Minus">
            <summary>
            minus sign. '-'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Period">
            <summary>
            period. '.'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Slash">
            <summary>
            forward slash. '/'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Zero">
            <summary>
            0
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.One">
            <summary>
            1
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Two">
            <summary>
            2
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Three">
            <summary>
            3
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Four">
            <summary>
            4
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Five">
            <summary>
            5
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Six">
            <summary>
            6
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Seven">
            <summary>
            7
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Eight">
            <summary>
            8
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Nine">
            <summary>
            9
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Colon">
            <summary>
            colon. ':'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Semicolon">
            <summary>
            semicolon. ';'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.LessThan">
            <summary>
            less-than sign. '&lt;'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Equals">
            <summary>
            equals sign. '='
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.GreaterThan">
            <summary>
            greater-than sign. '&gt;'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.QuestionMark">
            <summary>
            question mark. '?'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.At">
            <summary>
            at. '@'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.LeftBracket">
            <summary>
            left bracket. '['
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Backslash">
            <summary>
            backslash. '\'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.RightBracket">
            <summary>
            right bracket. ']'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Caret">
            <summary>
            caret. '^'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Underscore">
            <summary>
            underscore.'_'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.BackQuote">
            <summary>
            grave. '`'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.A">
            <summary>
            a
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.B">
            <summary>
            b
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.C">
            <summary>
            c
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.D">
            <summary>
            d
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.E">
            <summary>
            e
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.F">
            <summary>
            f
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.G">
            <summary>
            g
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.H">
            <summary>
            h
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.I">
            <summary>
            i
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.J">
            <summary>
            j
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.K">
            <summary>
            k
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.L">
            <summary>
            l
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.M">
            <summary>
            m
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.N">
            <summary>
            n
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.O">
            <summary>
            o
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.P">
            <summary>
            p
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Q">
            <summary>
            q
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.R">
            <summary>
            r
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.S">
            <summary>
            s
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.T">
            <summary>
            t
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.U">
            <summary>
            u
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.V">
            <summary>
            v
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.W">
            <summary>
            w
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.X">
            <summary>
            x
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Y">
            <summary>
            y
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Z">
            <summary>
            z
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Delete">
            <summary>
            delete. '^?'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World0">
            <summary>
            0xA0
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World1">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World2">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World3">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World4">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World5">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World6">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World7">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World8">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World9">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World10">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World11">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World12">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World13">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World14">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World15">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World16">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World17">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World18">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World19">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World20">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World21">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World22">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World23">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World24">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World25">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World26">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World27">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World28">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World29">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World30">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World31">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World32">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World33">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World34">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World35">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World36">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World37">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World38">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World39">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World40">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World41">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World42">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World43">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World44">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World45">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World46">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World47">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World48">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World49">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World50">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World51">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World52">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World53">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World54">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World55">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World56">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World57">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World58">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World59">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World60">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World61">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World62">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World63">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World64">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World65">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World66">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World67">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World68">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World69">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World70">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World71">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World72">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World73">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World74">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World75">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World76">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World77">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World78">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World79">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World80">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World81">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World82">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World83">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World84">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World85">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World86">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World87">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World88">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World89">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World90">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World91">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World92">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World93">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World94">
             <summary>
            
             </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.World95">
            <summary>
            0xFF
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Keypad0">
            <summary>
            keypad 0
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Keypad1">
            <summary>
            keypad 1
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Keypad2">
            <summary>
            keypad 2
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Keypad3">
            <summary>
            keypad 3
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Keypad4">
            <summary>
            keypad 4
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Keypad5">
            <summary>
            keypad 5
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Keypad6">
            <summary>
            keypad 6
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Keypad7">
            <summary>
            keypad 7
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Keypad8">
            <summary>
            keypad 8
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Keypad9">
            <summary>
            keypad 9
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.KeypadPeriod">
            <summary>
            keypad period. '.'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.KeypadDivide">
            <summary>
            keypad divide. '/'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.KeypadMultiply">
            <summary>
            keypad multiply. '*'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.KeypadMinus">
            <summary>
            keypad minus. '-'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.KeypadPlus">
            <summary>
            keypad plus. '+'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.KeypadEnter">
            <summary>
            keypad enter. '\r'
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.KeypadEquals">
            <summary>
            keypad equals. '='
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.UpArrow">
            <summary>
            up arrow
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.DownArrow">
            <summary>
            down arrow
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.RightArrow">
            <summary>
            right arrow
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.LeftArrow">
            <summary>
            left arrow
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Insert">
            <summary>
            insert
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Home">
            <summary>
            home
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.End">
            <summary>
            end
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.PageUp">
            <summary>
            page up
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.PageDown">
            <summary>
            page down
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.F1">
            <summary>
            F1
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.F2">
            <summary>
            F2
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.F3">
            <summary>
            F3
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.F4">
            <summary>
            F4
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.F5">
            <summary>
            F5
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.F6">
            <summary>
            F6
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.F7">
            <summary>
            F7
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.F8">
            <summary>
            F8
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.F9">
            <summary>
            F9
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.F10">
            <summary>
            F10
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.F11">
            <summary>
            F11
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.F12">
            <summary>
            F12
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.F13">
            <summary>
            F13
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.F14">
            <summary>
            F14
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.F15">
            <summary>
            F15
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.NumLock">
            <summary>
            numlock
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.CapsLock">
            <summary>
            capslock
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.ScrollLock">
            <summary>
            scrollock
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.RightShift">
            <summary>
            right shift
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.LeftShift">
            <summary>
            left shift
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.RightControl">
            <summary>
            right ctrl
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.LeftControl">
            <summary>
            left ctrl
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.RightAlt">
            <summary>
            right alt
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.LeftAlt">
            <summary>
            left alt
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.RightMeta">
            <summary>
            right meta
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.LeftMeta">
            <summary>
            left meta
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.LeftWindows">
            <summary>
            Left "Windows" key
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.RightWindows">
            <summary>
            Right "Windows" key
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Mode">
            <summary>
            "Alt Gr" key. Mode key
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Compose">
            <summary>
            Multi-key compose key
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Help">
            <summary>
            help
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Print">
            <summary>
            print-screen
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.SysRQ">
            <summary>
            SysRq
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Break">
            <summary>
            break
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Menu">
            <summary>
            menu
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Power">
            <summary>
            Power Macintosh power key
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Euro">
            <summary>
            Some european keyboards
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Undo">
            <summary>
            Atari keyboard has Undo
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Key.Last">
             <summary>
            
             </summary>
        </member>
        <member name="T:SdlDotNet.Input.ModifierKeys">
            <summary>
            Enumeration of valid key mods (possibly OR'd together) 
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:SdlDotNet.Input.ModifierKeys.None">
            <summary>
            No modifiers applicable
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.ModifierKeys.LeftShift">
            <summary>
            Left Shift is down
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.ModifierKeys.RightShift">
            <summary>
            Right Shift is down
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.ModifierKeys.LeftControl">
            <summary>
            Left Control is down
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.ModifierKeys.RightControl">
            <summary>
            Right Control is down
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.ModifierKeys.LeftAlt">
            <summary>
            Left Alt is down
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.ModifierKeys.RightAlt">
            <summary>
            Right Alt is down
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.ModifierKeys.LeftMeta">
            <summary>
            Left Meta is down
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.ModifierKeys.RightMeta">
            <summary>
            Right Meta is down
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.ModifierKeys.NumLock">
            <summary>
            Numlock is down
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.ModifierKeys.Caps">
            <summary>
            Capslock is down
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.ModifierKeys.Mode">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.ModifierKeys.ReserveKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.ModifierKeys.ControlKeys">
            <summary>
            Both CTRL Keys
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.ModifierKeys.ShiftKeys">
            <summary>
            Both SHIFT keys.
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.ModifierKeys.AltKeys">
            <summary>
            Both ALT keys.
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.ModifierKeys.MetaKeys">
            <summary>
            Both META keys.
            </summary>
        </member>
        <member name="T:SdlDotNet.Input.Focus">
            <summary>
            Type of Focus 
            </summary>
            <remarks>For the AppActive event.</remarks>
        </member>
        <member name="F:SdlDotNet.Input.Focus.Mouse">
            <summary>
            Mouse focus
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Focus.Keyboard">
            <summary>
            Keeyboard focus
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.Focus.Application">
            <summary>
            App becomes un-iconified.
            </summary>
        </member>
        <member name="T:SdlDotNet.Input.Keyboard">
            <summary>
            Keyboard class
            </summary>
        </member>
        <member name="M:SdlDotNet.Input.Keyboard.EnableKeyRepeat(System.Int32,System.Int32)">
            <summary>
            Enable keyboard autorepeat
            </summary>
            <param name="delay">
            Delay in system ticks before repeat starts. 
            Set to 0 to disable key repeat.
            </param>
            <param name="rate">
            Rate in system ticks at which key repeats.
            </param>
            <remarks>This method will initialize the Video subsystem as well.</remarks>
        </member>
        <member name="M:SdlDotNet.Input.Keyboard.KeyboardCharacter(SdlDotNet.Input.Key)">
            <summary>
            Returns the actual keyboard character that was pressed.
            </summary>
            <param name="key">Key to translate into the actual keyboard character.</param>
            <returns>Actual keyvboard character that was pressed.</returns>
        </member>
        <member name="M:SdlDotNet.Input.Keyboard.UnicodeCharacter(System.Int16)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Input.Keyboard.IsKeyPressed(SdlDotNet.Input.Key)">
            <summary>
            Checks key state
            </summary>
            <param name="key">Key to check</param>
            <returns>True if key is pressed</returns>
        </member>
        <member name="P:SdlDotNet.Input.Keyboard.IsInitialized">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.Keyboard.KeyRepeat">
            <summary>
            Determines if Key Repeating is turned on.
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.Keyboard.HasFocus">
            <summary>
            Returns true if the application has keyboard focus.
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.Keyboard.ModifierKeyState">
            <summary>
            Returns which modifier keys are pressed
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.Keyboard.UnicodeEnabled">
            <summary>
            Checks if Unicode is enabled
            </summary>
        </member>
        <member name="T:SdlDotNet.Input.KeyboardEventArgs">
            <summary>
            Event arguments for Keyboard Events.
            </summary>
        </member>
        <member name="M:SdlDotNet.Input.KeyboardEventArgs.#ctor(SdlDotNet.Input.Key,SdlDotNet.Input.ModifierKeys,System.Boolean)">
            <summary>
            Keyboard event args
            </summary>
            <param name="down">
            True if the key is pressed, False if it was released
            </param>
            <param name="key">The Sdl virtual keycode</param>
            <param name="modifierKeys">Current modifier flags</param>
        </member>
        <member name="M:SdlDotNet.Input.KeyboardEventArgs.#ctor(SdlDotNet.Input.Key,System.Boolean)">
            <summary>
            Keyboard event args. Does not check modifier keys.
            </summary>
            <param name="down">
            True if the key is pressed, False if it was released
            </param>
            <param name="key">The Sdl virtual keycode</param>
        </member>
        <member name="P:SdlDotNet.Input.KeyboardEventArgs.Device">
            <summary>
            The device index of the keyboard
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.KeyboardEventArgs.Down">
            <summary>
            Is key pressed
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.KeyboardEventArgs.Scancode">
            <summary>
            The scancode of the key
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.KeyboardEventArgs.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.KeyboardEventArgs.KeyboardCharacter">
            <summary>
            Returns the actual keyboard character that was pressed.
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.KeyboardEventArgs.Unicode">
            <summary>
            Unicode 
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.KeyboardEventArgs.UnicodeCharacter">
            <summary>
            Unicode Character
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.KeyboardEventArgs.Mod">
            <summary>
            Modifier Key
            </summary>
        </member>
        <member name="T:SdlDotNet.Input.KeyboardState">
            <summary> 
            The KeyboardState class interface describes the key state of every button on the keyboard. 
            </summary> 
            <example> 
            <code> 
            KeyboardState keys = new KeyboardState(); 
            
            if( keys.IsKeyPressed(Key.A) ) 
            { 
                // The A key is pressed. 
            } 
                 
            if( keys[Key.F] )   // Another way to check 
            { 
                // The F key is currently down. 
            } 
            else 
            { 
                // The F key is not down. 
            } 
            </code> 
            </example> 
        </member>
        <member name="F:SdlDotNet.Input.KeyboardState.m_Keys">
            <summary> 
            The state information of all the keys in the current state. 
            </summary> 
        </member>
        <member name="M:SdlDotNet.Input.KeyboardState.#ctor">
            <summary> 
            Creates a new KeyboardState object with the current state of the keyboard. 
            </summary> 
            <remarks>This calls update on creation.</remarks>
        </member>
        <member name="M:SdlDotNet.Input.KeyboardState.#ctor(System.Boolean)">
            <summary>
            Creates a new KeyboardState with an option to update on creation.
            </summary>
            <param name="updateNow">Update the key array on object creation.  Defaults to true.</param>
        </member>
        <member name="M:SdlDotNet.Input.KeyboardState.Update">
            <summary>
            Updates the keyboard state within this object.
            </summary>
        </member>
        <member name="M:SdlDotNet.Input.KeyboardState.IsKeyPressed(SdlDotNet.Input.Key)">
            <summary> 
            Checks a key state in the KeyboardState. 
            </summary> 
            <param name="key">The key to be checked.</param> 
            <returns>True if the key is pressed, false if it isn't.</returns> 
        </member>
        <member name="P:SdlDotNet.Input.KeyboardState.Item(SdlDotNet.Input.Key)">
            <summary> 
            Gets the current state of the given key (true means the key is pushed, false if not). 
            </summary> 
        </member>
        <member name="T:SdlDotNet.Input.ButtonKeyState">
            <summary>
            ButtonKeyState
            </summary>
            <remarks>/remarks> byte</remarks>
        </member>
        <member name="F:SdlDotNet.Input.ButtonKeyState.NotPressed">
            <summary>
            Button has been released.
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.ButtonKeyState.Pressed">
            <summary>
            Button has been pressed down.
            </summary>
        </member>
        <member name="T:SdlDotNet.Input.MouseButton">
            <summary>
            MouseButton
            </summary>
            <remarks>Byte</remarks>
        </member>
        <member name="F:SdlDotNet.Input.MouseButton.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.MouseButton.PrimaryButton">
            <summary>
            Primary button. Typically the left button
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.MouseButton.SecondaryButton">
            <summary>
            Secondary button. typically the right button
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.MouseButton.MiddleButton">
            <summary>
            Middle button
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.MouseButton.WheelUp">
            <summary>
            Wheel up
            </summary>
        </member>
        <member name="F:SdlDotNet.Input.MouseButton.WheelDown">
            <summary>
            Wheel down
            </summary>
        </member>
        <member name="T:SdlDotNet.Input.Mouse">
            <summary>
            Mouse.
            </summary>
        </member>
        <member name="M:SdlDotNet.Input.Mouse.IsButtonPressed(SdlDotNet.Input.MouseButton)">
            <summary>
            Gets the pressed or released state of a mouse button
            </summary>
            <param name="button">The mouse button to check</param>
            <returns>
            If the button is pressed, returns True, otherwise returns False
            </returns>
        </member>
        <member name="P:SdlDotNet.Input.Mouse.IsInitialized">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.Mouse.ShowCursor">
            <summary> 
            Gets and sets whether or not the mouse cursor is visible. 
            </summary> 
        </member>
        <member name="P:SdlDotNet.Input.Mouse.MousePosition">
            <summary> 
            Gets and sets the current mouse position. 
            </summary> 
        </member>
        <member name="P:SdlDotNet.Input.Mouse.MousePositionChange">
            <summary> 
            Gets and sets the relative mouse position. 
            </summary> 
        </member>
        <member name="P:SdlDotNet.Input.Mouse.HasMouseFocus">
            <summary>
            Returns true if app has mouse focus
            </summary>
        </member>
        <member name="T:SdlDotNet.Input.MouseButtonEventArgs">
            <summary>
            Event arguments for MouseMotion Events.
            </summary>
        </member>
        <member name="M:SdlDotNet.Input.MouseButtonEventArgs.#ctor(SdlDotNet.Input.MouseButton,System.Boolean,System.Int16,System.Int16)">
            <summary>
            
            </summary>
            <param name="button">The mouse button</param>
            <param name="buttonPressed">True if the button is pressed, 
            False if it is released</param>
            <param name="positionX">The current X coordinate</param>
            <param name="positionY">The current Y coordinate</param>
        </member>
        <member name="P:SdlDotNet.Input.MouseButtonEventArgs.Button">
            <summary>
            Which mouse button created the event
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.MouseButtonEventArgs.ButtonPressed">
            <summary>
            True if button is pressed
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.MouseButtonEventArgs.X">
            <summary>
            X position of mouse at time of event
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.MouseButtonEventArgs.Y">
            <summary>
            Y position of mouse at time of event 
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.MouseButtonEventArgs.Position">
            <summary>
            Return Point(X, Y) of mouse
            </summary>
        </member>
        <member name="T:SdlDotNet.Input.MouseMotionEventArgs">
            <summary>
            Event arguments for MouseMotion Events.
            </summary>
        </member>
        <member name="M:SdlDotNet.Input.MouseMotionEventArgs.#ctor(System.Boolean,SdlDotNet.Input.MouseButton,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            MouseMotion
            </summary>
            <param name="buttonPressed">The current mouse button state</param>
            <param name="button">Button pressed</param>
            <param name="positionX">The current X coordinate</param>
            <param name="positionY">The current Y coordinate</param>
            <param name="relativeX">
            The difference between the last X coordinate and current</param>
            <param name="relativeY">
            The difference between the last Y coordinate and current</param>
        </member>
        <member name="P:SdlDotNet.Input.MouseMotionEventArgs.ButtonPressed">
            <summary>
            True if button pressed
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.MouseMotionEventArgs.Button">
            <summary>
            Returns which button was pressed
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.MouseMotionEventArgs.X">
            <summary>
            X position of mouse
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.MouseMotionEventArgs.Y">
            <summary>
            Y position of mouse
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.MouseMotionEventArgs.RelativeX">
            <summary>
            change in X position of mouse
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.MouseMotionEventArgs.RelativeY">
            <summary>
            Change in Y position of mouse
            </summary>
        </member>
        <member name="P:SdlDotNet.Input.MouseMotionEventArgs.Position">
            <summary>
            Returns Point(X, Y) of mouse
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Emitters.ParticleCircleEmitter">
            <summary>
            A particle emitter that emits circle-based particles.
            </summary>
            <example><code>
            ParticleCircleEmitter emitter = new ParticleCircleEmitter();
            emitter.ColorMin = Color.Black;
            emitter.ColorMax = Color.White;
            emitter.RadiusMin = 1;
            emitter.RadiusMax = 3;
            particleSystem.Add(emitter);
            </code></example>
        </member>
        <member name="T:SdlDotNet.Particles.Emitters.ParticlePixelEmitter">
            <summary>
            A particle emitter that emits pixel particles.
            </summary>
            <example>
            <code>
            ParticlePixelEmitter emitter = new ParticlePixelEmitter(Color.Black, Color.White);
            particleSystem.Add(emitter);
            </code>
            </example>
        </member>
        <member name="T:SdlDotNet.Particles.Emitters.ParticleEmitter">
            <summary>
            The base abstract particle emitter class. This is to be derived from when creating new particle emitters.
            </summary>
            <example>
            The following example creates a particle emitter that emits blue pixels. The example is pretty much useless as there is already a ParticlePixelEmitter class available.
            <code>
            public class BluePixelEmitter : ParticleEmitter
            {
            	protected override SdlDotNet.Particles.BaseParticle CreateParticle()
            	{
            		ParticlePixel p = new ParticlePixel();
            		p.Color = Color.Blue;
            		return p;
            	}
            }
            </code>
            </example>
            <remarks>You can use the Random property to get random numbers or the GetRange function to retrieve ranged random numbers. The base particle attributes are handled by the particle system.  All you have to change are the derived properties.</remarks>
        </member>
        <member name="T:SdlDotNet.Particles.BaseParticle">
            <summary>
            An abstract class describing a base particle.
            </summary>
            <remarks>Some implementations of the particle class include ParticlePixel and ParticleSprite.</remarks>
            <example>This is an example of implementing a new kind of particle.  It creates a ParticleBox that uses blue boxes to represent particles:
            <code>
            public class ParticleBox : BaseParticle
            {
            	public override void Render(Surface destination)
            	{
            		destination.Draw(new Rectangle((int)this.X, (int)this.Y, 100,100), Color.Blue);
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:SdlDotNet.Particles.BaseParticle.Render(SdlDotNet.Graphics.Surface)">
            <summary>
            Draws the particle onto the destination.
            </summary>
            <param name="destination">The destination surface of the particle.</param>
        </member>
        <member name="M:SdlDotNet.Particles.BaseParticle.Update">
            <summary>
            Updates the location and life of the particle.
            </summary>
            <returns>True if the particle is still alive, false if the particle is to be destroyed.</returns>
        </member>
        <member name="P:SdlDotNet.Particles.BaseParticle.Life">
            <summary>
            The current life of the particle. -1 means infinate life.
            </summary>
            <remarks>This is decreased when the Update method is called.</remarks>
        </member>
        <member name="P:SdlDotNet.Particles.BaseParticle.LifeFull">
            <summary>
            Gets and sets the value representing the full life of the particle.
            </summary>
            <remarks>This is usually used when distinguishing when the particle should start dying out with alpha transparency.</remarks>
        </member>
        <member name="P:SdlDotNet.Particles.BaseParticle.Static">
            <summary>
            Gets and sets whether the particle's velocity will change its location.
            </summary>
            <remarks>If set to true, the particle will not move.  If set to false, the particle will move with manipulators.</remarks>
        </member>
        <member name="P:SdlDotNet.Particles.BaseParticle.X">
            <summary>
            The X coordinate of the particle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.BaseParticle.Y">
            <summary>
            The Y coordinate of the particle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.BaseParticle.Velocity">
            <summary>
            The speed and direction the particle is going.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.BaseParticle.Width">
            <summary>
            Gets and sets the width of the particle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.BaseParticle.Height">
            <summary>
            Gets and sets the height of the particle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.BaseParticle.Bottom">
            <summary>
            Gets the y-coordinate of the bottom edge of the particle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.BaseParticle.Right">
            <summary>
            Gets the x-coordinate of the right edge of the particle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.BaseParticle.Left">
            <summary>
            Gets the x-coordinate of the left edge of the particle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.BaseParticle.Top">
            <summary>
            Gets the y-coordinate of the top edge of the particle.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleEmitter.GetRange(System.Single,System.Single)">
            <summary>
            A helper method to get a random float between the given range.
            </summary>
            <param name="min">The lower bound.</param>
            <param name="max">The upper bound.</param>
            <returns>A float between the two numbers.</returns>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleEmitter.SetParticleTarget(SdlDotNet.Particles.ParticleCollection)">
            <summary>
            Sets the particle collection where this emitter is to send its particles.
            </summary>
            <remarks>FXCop does not setting the collection directly in the property</remarks>
            <param name="particleCollection"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleEmitter.#ctor">
            <summary>
            Creates a new particle emitter.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleEmitter.#ctor(SdlDotNet.Particles.ParticleSystem)">
            <summary>
            Creates a new pixel particle emitter inside a particle system.
            </summary>
            <param name="system">The system to add to.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleEmitter.Update">
            <summary>
            Updates the particle emitter.
            </summary>
            <returns>True if it's still alive, false if not.</returns>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleEmitter.SetParticleBaseAttributes(SdlDotNet.Particles.BaseParticle)">
            <summary>
            A private method that will change the attributes of the passed in particle to fit the emitter's description.
            </summary>
            <param name="particle">The particle to change.</param>
            <remarks>Use this method when overriding the CreateParticle method.</remarks>
            <returns>The particle with the changed properties.</returns>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleEmitter.CreateParticle">
            <summary>
            Abstract method that will create a particle based on the emitter's attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleEmitter.Render(SdlDotNet.Graphics.Surface)">
            <summary>
            Renders the emitter onto the surface.
            </summary>
            <param name="destination">The destination surface.</param>
            <remarks>In most cases, this does nothing as nothing is represented by the emitter.</remarks>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.Random">
            <summary>
            The random number generator associated with the particle emitters.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.Emitting">
            <summary>
            Get and set whether the particle emitter is to be emitting particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.Height">
            <summary>
            Gets and sets the height of the particle emitter.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.Width">
            <summary>
            Gets and sets the width of the particle emitter.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.LifeFullMin">
            <summary>
            Gets and sets the minimum life a particle can have.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.LifeFullMax">
            <summary>
            Gets and sets the maximum life a particle can have.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.LifeMin">
            <summary>
            Gets and sets the minimum life a particle can have.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.LifeMax">
            <summary>
            Gets and sets the maximum life a particle can have.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.DirectionMin">
            <summary>
            Gets and sets the minimum direction range of particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.DirectionMax">
            <summary>
            Gets and sets the maximum direction range of particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.SpeedMin">
            <summary>
            Gets and sets the minimum speed a particle can have.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.SpeedMax">
            <summary>
            Gets and sets the maximum speed a particle can have.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.Frequency">
            <summary>
            Gets and sets the frequency of particle emission.  Measured in particle per 1000 updates.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleEmitter.Target">
            <summary>
            Gets the particle collection where this emitter is to send its particles.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.#ctor">
            <summary>
            Creates a new pixel particle emitter.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.#ctor(SdlDotNet.Particles.ParticleSystem)">
            <summary>
            Creates a new pixel particle emitter inside a particle system.
            </summary>
            <param name="system">The system that the particle emitter should be added to.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.#ctor(SdlDotNet.Particles.ParticleSystem,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a particle emitter that emits particels inside the given system with min and max color values.
            </summary>
            <param name="system">The system that the particle emitter should be added to.</param>
            <param name="minColor">The minimum color values of emitted particles.</param>
            <param name="maxColor">The maximum color values of emitted particles.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a particle emitter with min and max color values.
            </summary>
            <param name="minColor">The minimum color values of emitted particles.</param>
            <param name="maxColor">The maximum color values of emitted particles.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.CreateParticle">
            <summary>
            A protected method to return a new particle pixel with the randomized color attributes.
            </summary>
            <returns>A new particle pixel with the new color values.</returns>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.ColorMin">
            <summary>
            Gets and sets the minimum color values.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.ColorMax">
            <summary>
            Gets and sets the maximum color values.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.MinR">
            <summary>
            Gets and sets the minimum R value for emitted particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.MaxR">
            <summary>
            Gets and sets the maximum R value for emitted particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.MinG">
            <summary>
            Gets and sets the minimum G value for emitted particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.MaxG">
            <summary>
            Gets and sets the maximum G value for emitted particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.MinB">
            <summary>
            Gets and sets the minimum B value for emitted particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticlePixelEmitter.MaxB">
            <summary>
            Gets and sets the maximum B value for emitted particles.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleCircleEmitter.#ctor">
            <summary>
            Creates a new pixel particle emitter.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleCircleEmitter.#ctor(SdlDotNet.Particles.ParticleSystem)">
            <summary>
            Creates a new pixel particle emitter inside a particle system.
            </summary>
            <param name="system">The system that the particle emitter should be added to.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleCircleEmitter.#ctor(SdlDotNet.Particles.ParticleSystem,System.Drawing.Color,System.Drawing.Color,System.Int16,System.Int16)">
            <summary>
            Creates a particle emitter that emits particels inside the given system with min and max color values.
            </summary>
            <param name="system">The system that the particle emitter should be added to.</param>
            <param name="minColor">The minimum color values of emitted particles.</param>
            <param name="maxColor">The maximum color values of emitted particles.</param>
            <param name="radiusMin">The minimum radius of a particle.</param>
            <param name="radiusMax">The maximum radius of a particle.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleCircleEmitter.#ctor(System.Drawing.Color,System.Drawing.Color,System.Int16,System.Int16)">
            <summary>
            Creates a particle emitter with min and max color values.
            </summary>
            <param name="minColor">The minimum color values of emitted particles.</param>
            <param name="maxColor">The maximum color values of emitted particles.</param>
            <param name="radiusMin">The minimum radius of a particle.</param>
            <param name="radiusMax">The maximum radius of a particle.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleCircleEmitter.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a particle emitter with min and max color values.
            </summary>
            <param name="minColor">The minimum color values of emitted particles.</param>
            <param name="maxColor">The maximum color values of emitted particles.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleCircleEmitter.#ctor(System.Int16,System.Int16)">
            <summary>
            Creates a particle emitter with radius values.
            </summary>
            <param name="radiusMin">The minimum radius of a particle.</param>
            <param name="radiusMax">The maximum radius of a particle.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleCircleEmitter.CreateParticle">
            <summary>
            A protected method to return a new particle pixel with the randomized color attributes.
            </summary>
            <returns>A new particle pixel with the new color values.</returns>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleCircleEmitter.RadiusMax">
            <summary>
            Gets and sets the maximum radius of particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleCircleEmitter.RadiusMin">
            <summary>
            Gets and sets the minimum radius for particles.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter">
            <summary>
            A particle emitter that emits particle rectangles.
            </summary>
            <example>
            <code>
            ParticleRectangleEmitter emitter = new ParticlePixelEmitter(new Size(10,10), new Size(50,50));
            particleSystem.Add(emitter);
            </code>
            </example>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.#ctor">
            <summary>
            Creates a new rectangle particle.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.#ctor(SdlDotNet.Particles.ParticleSystem)">
            <summary>
            Creates a new rectangle particle within a system.
            </summary>
            <param name="system">The parent system of the emitter.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.#ctor(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Creates a new rectangle particle with a max size and min size.
            </summary>
            <param name="minSize">The minimum size of rectangle particles.</param>
            <param name="maxSize">The maximum size of rectangle particles.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.#ctor(SdlDotNet.Particles.ParticleSystem,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Creates a new rectangle particle within a system with a max and min size.
            </summary>
            <param name="system">The parent system of the emitter.</param>
            <param name="minSize">The minimum size of rectangle particles.</param>
            <param name="maxSize">The maximum size of rectangle particles.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.CreateParticle">
            <summary>
            Creates a new ParticleRectangle with the set attributes.
            </summary>
            <returns>The new particle rectangle represented by a BaseParticle.</returns>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.MinHeight">
            <summary>
            Gets and sets the minimum height of particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.MaxHeight">
            <summary>
            Gets and sets the maximum height of particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.MaxWidth">
            <summary>
            Gets and sets the maximum width of particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.MinWidth">
            <summary>
            Gets and sets the minimum width of particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.MinSize">
            <summary>
            Gets and sets the minimum size of particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleRectangleEmitter.MaxSize">
            <summary>
            Gets and sets the maximum size of particles.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Emitters.ParticleSpriteEmitter">
            <summary>
            A particle emitter that shoots out random sprites from a sprite collection.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleSpriteEmitter.#ctor(SdlDotNet.Particles.ParticleSystem,SdlDotNet.Graphics.Sprites.Sprite)">
            <summary>
            Creates a new particle emitter that emits sprite objects.
            </summary>
            <param name="system">The particle system to add this particle emitter.</param>
            <param name="sprite">The sprite to emit.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleSpriteEmitter.#ctor(SdlDotNet.Particles.ParticleSystem,SdlDotNet.Graphics.Sprites.SpriteCollection)">
            <summary>
            Creates a new particle emitter that emits sprite objects.
            </summary>
            <param name="system">The particle system to add this particle emitter.</param>
            <param name="sprites">The sprite collection to choose sprites from when emitting.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleSpriteEmitter.#ctor(SdlDotNet.Graphics.Sprites.Sprite)">
            <summary>
            Creates a new particle emitter that emits sprite objects.
            </summary>
            <param name="sprite">The sprite to emit.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleSpriteEmitter.#ctor(SdlDotNet.Graphics.Sprites.SpriteCollection)">
            <summary>
            Creates a new particle emitter that emits sprite objects.
            </summary>
            <param name="sprites">The sprite collection to choose sprites from when emitting.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleSpriteEmitter.CreateParticle">
            <summary>
            Creates a particle based on the sprite parameters.
            </summary>
            <returns>The created particle.</returns>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleSpriteEmitter.Sprites">
            <summary>
            Gets and sets the collection of sprites assosiated with this particle emitter.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Emitters.ParticleSurfaceEmitter">
            <summary>
            A particle emitter that emits surfaces from a surface collection to represent particles..
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleSurfaceEmitter.#ctor(SdlDotNet.Particles.ParticleSystem,SdlDotNet.Graphics.Surface)">
            <summary>
            Creates a new particle emitter that emits surface objects.
            </summary>
            <param name="system">The particle system to add this particle emitter.</param>
            <param name="surface">The surface to emit.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleSurfaceEmitter.#ctor(SdlDotNet.Particles.ParticleSystem,SdlDotNet.Graphics.SurfaceCollection)">
            <summary>
            Creates a new particle emitter that emits surface objects.
            </summary>
            <param name="system">The particle system to add this particle emitter.</param>
            <param name="surfaces">The surface collection to choose surfaces from when emitting.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleSurfaceEmitter.#ctor(SdlDotNet.Graphics.Surface)">
            <summary>
            Creates a new particle emitter that emits surface objects.
            </summary>
            <param name="surface">The surface to emit.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleSurfaceEmitter.#ctor(SdlDotNet.Graphics.SurfaceCollection)">
            <summary>
            Creates a new particle emitter that emits surface objects.
            </summary>
            <param name="surfaces">The surface collection to choose surfaces from when emitting.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Emitters.ParticleSurfaceEmitter.CreateParticle">
            <summary>
            Creates a particle from a surface in the surface collection.
            </summary>
            <returns>The created particle.</returns>
        </member>
        <member name="P:SdlDotNet.Particles.Emitters.ParticleSurfaceEmitter.Surfaces">
            <summary>
            Gets and sets the collection of surfaces assosiated with this particle emitter.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Manipulators.IParticleManipulator">
            <summary>
            An interface describing a force that manipulates a group of particles.
            </summary>
            <example>
            The following makes a particle manipulator that keeps pixels from going off the left side of the screen.
            <code>
            public class ParticleBounceLeft : IParticleManipulator
            {
            	public ParticleBounceLeft()
            	{
            	}
            	public void Manipulate(ParticleCollection particles)
            		foreach(BaseParticle p in particles)
            		{
            			if(p.X &lt; 0)
            			{
            				p.X = this.X;
            				p.Velocity.X *= -1;
            			}
            		}
            	}
            }
            </code>
            </example>
            <remarks>The Manipulate method should only change the velocity of the particles.</remarks>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.IParticleManipulator.Manipulate(SdlDotNet.Particles.ParticleCollection)">
            <summary>
            Manipulates the given group of particles by the manipulators force.
            </summary>
            <param name="particles">The collection of particles to manipulate.</param>
            <remarks>This should only affect the particles' velocity.</remarks>
        </member>
        <member name="T:SdlDotNet.Particles.Manipulators.ParticleBoundary">
            <summary>
            A particle manipulator the keeps particles within a boundary.
            </summary>
            <example>
            The following example will keep all particles in the particleSystem in a rectangle of 0,0,100,100.
            <code>
            ParticleBoundry bounds = new ParticleBoundry(0,0,100,100);
            particleSystem.Add(bounds);
            </code></example>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleBoundary.#ctor">
            <summary>
            Create a ParticleBoundary with an empty boundary.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleBoundary.#ctor(System.Drawing.SizeF)">
            <summary>
            Create a ParticleBoundary from a given size.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleBoundary.#ctor(System.Drawing.Size)">
            <summary>
            Create a ParticleBoundary from a given size.
            </summary>
            <param name="size">The width and height of the boundary.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleBoundary.#ctor(System.Drawing.Rectangle)">
            <summary>
            Create a ParticleBoundary in the given rectangle boundary.
            </summary>
            <param name="rect">The rectangle representing the boundary.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleBoundary.#ctor(System.Drawing.RectangleF)">
            <summary>
            Create a ParticleBoundary from a given rectangle boundary.
            </summary>
            <param name="rect">The rectangle representing the boundary.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleBoundary.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a ParticleBoundary from a given bounds.
            </summary>
            <param name="positionX">The x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="positionY">The y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">The width of the boundary.</param>
            <param name="height">The height of the boundary.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleBoundary.#ctor(System.Single,System.Single)">
            <summary>
            Create a ParticleBoundary from a given size.
            </summary>
            <param name="width">The width of the boundary.</param>
            <param name="height">The height of the boundary.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleBoundary.Manipulate(SdlDotNet.Particles.ParticleCollection)">
            <summary>
            Makes sure that every particle is within the given boundary.
            </summary>
            <param name="particles">The particle collection to set inside the bounds.</param>
            <remarks>Particles that reach the outside the rectangle are bounced back into bounds.</remarks>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.Boundary">
            <summary>
            Gets and sets the boundary rectangle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.X">
            <summary>
            Gets and set the x-coordinate 
            of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.Y">
            <summary>
            Gets and sets the y-coordinate of 
            the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.Left">
            <summary>
            Gets the x-coordinate of the left edge of the boundry.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.Right">
            <summary>
            Gets the x-coordinate of the right edge of the boundry.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.Top">
            <summary>
            Gets the y-coordinate of the top edge of the boundry.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.Bottom">
            <summary>
            Gets the y-coordinate of the bottom edge of the boundry.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.Width">
            <summary>
            Gets and sets the width of the boundry.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.Height">
            <summary>
            Gets and sets the height of the boundry.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.Size">
            <summary>
            Gets and sets the size of the boundry (width and height).
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleBoundary.Location">
            <summary>
            Gets and sets the location of the boundry.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Manipulators.ParticleFriction">
            <summary>
            A particle manipulator that slows down particles by a given amount of speed.
            </summary>
            <example>
            The following example creates a particle friction manipulator that slows particles down by 0.5f every update.
            <code>
            ParticleFriction friction = new ParticleFriction(0.5f);
            particleSystem.Add(friction);
            </code>
            </example>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleFriction.#ctor">
            <summary>
            Create a ParticleFriction object with the default amount of friction.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleFriction.#ctor(System.Single)">
            <summary>
            Create a ParticleFriction object.
            </summary>
            <param name="friction">The amount of friction to apply to the particles.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleFriction.Manipulate(SdlDotNet.Particles.ParticleCollection)">
            <summary>
            Applies the friction to the given set of particles.
            </summary>
            <param name="particles">The particles to apply the friction to.</param>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleFriction.Friction">
            <summary>
            Gets and sets the amount of friction applied to the particles.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Manipulators.ParticleGravity">
            <summary>
            A particle manipulator that pulls all particles by a common gravity.
            </summary>
            <example>
            The following example puts a vertical gravity of 0.4f in the particleSystem.
            <code>
            ParticleGravity grav = new ParticleGravity(0.4f);
            particleSystem.Add(grav);
            </code>
            </example>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleGravity.#ctor(SdlDotNet.Core.Vector)">
            <summary>
            Creates a new ParticleSystem with a common gravity.
            </summary>
            <param name="velocity">The velocity (horizontal and vertical) of the particle system.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleGravity.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new ParticleSystem using gravity and wind.
            </summary>
            <param name="gravity">The vertical gravity of the system.</param>
            <param name="wind">The horizontal gravity of the system.  This is commonly refered to as wind.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleGravity.#ctor(System.Single)">
            <summary>
            Creates a new ParticleSystem with a vertical gravity.
            </summary>
            <param name="gravity">The vertical gravity of the system.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleGravity.#ctor">
            <summary>
            Creates a new ParticleSystem.
            </summary>
            <remarks>The gravity defaults as "new Vector()".</remarks>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleGravity.Manipulate(SdlDotNet.Particles.ParticleCollection)">
            <summary>
            Manipulate particles by the gravity.
            </summary>
            <param name="particles">The particles to pull by the gravity.</param>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleGravity.Velocity">
            <summary>
            Gets and sets the velocity (direction and speed) of the gravity as a vector.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleGravity.Gravity">
            <summary>
            Gets and sets the vertical pull of the gravity.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleGravity.Wind">
            <summary>
            Gets and sets the horizontal push of the gravity.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection">
            <summary>
            Describes a collection of particle manipulators.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection.#ctor">
            <summary>
            Create an empty Particle Manipulator collection.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection.#ctor(SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection)">
            <summary>
            Create a particle manipulator based off an already existing collection.
            </summary>
            <param name="manipulators">The manipulators to add to the collection.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection.Add(SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection)">
            <summary>
            Add a collection of particle manipulators to the collection.
            </summary>
            <param name="manipulators">The manipulators to add to the collection.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection.Manipulate(SdlDotNet.Particles.ParticleCollection)">
            <summary>
            Manipulate a collection of particles with the manipulators contained in the collection.
            </summary>
            <param name="particles">The particles to manipulate.</param>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.Manipulators.ParticleVortex">
            <summary>
            A particle manipulator that pulls particles towards a point.
            </summary>
            <remarks>If the radius is set to -1, the pull (strength) on all particles is constant.</remarks>
            <example>
            The following example creates a particle vortex that pulls particles towards the middle of the screen.
            <code>
            ParticleVortex vortex = new ParticleVortex(0.3f);
            vortex.X = (float)(Video.Screen.Width / 2);
            vortex.Y = (float)(Video.Screen.Height / 2);
            particleSystem.Add(vortex);
            </code>
            </example>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleVortex.#ctor">
            <summary>
            Creates a particle vortex manipulator with the default values.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleVortex.#ctor(System.Drawing.PointF)">
            <summary>
            Creates a particle vortex manipulator from just the location.
            </summary>
            <param name="position">The position of the vortex.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleVortex.#ctor(System.Drawing.PointF,System.Single,System.Single)">
            <summary>
            Creates a particle vortex manipulator.
            </summary>
            <param name="position">The position of the vortex.</param>
            <param name="strength">The amount of pull applied to the particles.</param>
            <param name="radius">The size of the vortex. -1 is infinate size.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleVortex.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a particle vortex manipulator with an infinate size.
            </summary>
            <param name="posX">The X coordinate of the vortex.</param>
            <param name="posY">The Y coordinate of the vortex.</param>
            <param name="strength">The amount of pull applied to the particles.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleVortex.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a particle vortex manipulator with an infinate size.
            </summary>
            <param name="posX">The X coordinate of the vortex.</param>
            <param name="posY">The Y coordinate of the vortex.</param>
            <param name="strength">The amount of pull applied to the particles.</param>
            <param name="radius">The size of the vortex. -1 is infinate size.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleVortex.#ctor(System.Single)">
            <summary>
            Creates a particle vortex manipulator from just the strength.
            </summary>
            <param name="strength">The amount of pull applied to the particles.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleVortex.#ctor(System.Single,System.Single)">
            <summary>
            Creates a particle vortex manipulator from just the strength and radius.
            </summary>
            <param name="strength">The amount of pull applied to the particles.</param>
            <param name="radius">The size of the vortex. -1 is infinate size.</param>
        </member>
        <member name="M:SdlDotNet.Particles.Manipulators.ParticleVortex.Manipulate(SdlDotNet.Particles.ParticleCollection)">
            <summary>
            Applies the vortex force on each particle in the vortex's radius.
            </summary>
            <param name="particles">The collection of particles to manipulate.</param>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleVortex.Y">
            <summary>
            Gets and sets the Y coordinate of the vortex.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleVortex.X">
            <summary>
            Gets and sets the X coordinate of the vortex.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleVortex.Radius">
            <summary>
            Gets and sets the size, the radius, of the vortex.  If set to -1 the pull will be constant on each particle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.Manipulators.ParticleVortex.Strength">
            <summary>
            Gets and sets the amount of pull put onto each particle in the vortex's radius.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.ParticleCircle">
            <summary>
            A particle represented by a circle.
            </summary>
            <remarks>Use ParticleCircleEmitter to emit this particle.</remarks>
        </member>
        <member name="T:SdlDotNet.Particles.ParticlePixel">
            <summary>
            A particle represented by a pixel on the destination surface.
            </summary>
            <remarks>Use ParticlePixelEmitter to emit this particle.</remarks>
        </member>
        <member name="M:SdlDotNet.Particles.ParticlePixel.#ctor">
            <summary>
            Creates a new ParticlePixel.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.ParticlePixel.#ctor(System.Drawing.Color,System.Single,System.Single)">
            <summary>
            Creates a new ParticlePixel.
            </summary>
            <param name="positionX">The X coordinate.</param>
            <param name="positionY">The Y coordinate.</param>
            <param name="color">The color of the pixel on the destination surface.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticlePixel.#ctor(System.Single,System.Single,SdlDotNet.Core.Vector)">
            <summary>
            Creates a new ParticlePixel.
            </summary>
            <param name="positionX">The X coordinate.</param>
            <param name="positionY">The Y coordinate.</param>
            <param name="velocity">The speed and direction of the particle.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticlePixel.#ctor(System.Drawing.Color,System.Single,System.Single,System.Int32)">
            <summary>
            Creates a new ParticlePixel.
            </summary>
            <param name="color">The color of the pixel on the destination surface.</param>
            <param name="positionX">The X coordinate.</param>
            <param name="positionY">The Y coordinate.</param>
            <param name="life">How long the particle is to stay alive.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticlePixel.#ctor(System.Drawing.Color,System.Single,System.Single,SdlDotNet.Core.Vector,System.Int32)">
            <summary>
            Creates a new ParticlePixel.
            </summary>
            <param name="color"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
            <param name="velocity"></param>
            <param name="life"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticlePixel.#ctor(System.Drawing.Color,System.Single,System.Single,SdlDotNet.Core.Vector)">
            <summary>
            Creates a new ParticlePixel.
            </summary>
            <param name="color"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
            <param name="velocity"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticlePixel.#ctor(System.Drawing.Color,SdlDotNet.Core.Vector)">
            <summary>
            Creates a new ParticlePixel.
            </summary>
            <param name="color"></param>
            <param name="velocity"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticlePixel.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new ParticlePixel.
            </summary>
            <param name="positionX"></param>
            <param name="positionY"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticlePixel.#ctor(System.Drawing.Color)">
            <summary>
            Creates a new ParticlePixel.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticlePixel.Render(SdlDotNet.Graphics.Surface)">
            <summary>
            Draws the particle on the destination surface represented by a pixel.
            </summary>
            <param name="destination">The destination surface where to draw the particle.</param>
        </member>
        <member name="P:SdlDotNet.Particles.ParticlePixel.Color">
            <summary>
            The color of the particle pixel when drawn on the destination surface.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.ParticlePixel.Height">
            <summary>
            Gets the height of the particle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.ParticlePixel.Width">
            <summary>
            Gets the width of the particle.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleCircle.#ctor">
            <summary>
            Creates a particle represented by a circle with the default values.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleCircle.#ctor(System.Int16)">
            <summary>
            Creates a particle represented by a circle with a set radius.
            </summary>
            <param name="radius"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleCircle.Render(SdlDotNet.Graphics.Surface)">
            <summary>
            Draws the particle on the destination surface represented by a circle.
            </summary>
            <param name="destination">The destination surface where to draw the particle.</param>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleCircle.Radius">
            <summary>
            Gets and sets the radius of the particles.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleCircle.Height">
            <summary>
            Gets and sets the height of the circle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleCircle.Bottom">
            <summary>
            Gets the y-coordinate of the bottom edge of the circle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleCircle.Left">
            <summary>
            Gets the x-coordinate of the left edge of the circle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleCircle.Right">
            <summary>
            Gets the x-coordinate of the right edge of the circle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleCircle.Top">
            <summary>
            Gets the y-coordinate of the top edge of the circle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleCircle.Width">
            <summary>
            Gets and sets the width of the circle.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.ParticleCollection">
            <summary>
            A collection of particles.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleCollection.#ctor">
            <summary>
            Creates a new ParticleCollection.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleCollection.Add(SdlDotNet.Particles.Emitters.ParticleEmitter)">
            <summary>
            Adds a particle emitter to the collection.
            </summary>
            <param name="emitter">The emitter to add to the collection.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleCollection.Add(SdlDotNet.Particles.Emitters.ParticleEmitter,System.Boolean)">
            <summary>
            Adds a particle emitter to the collection.
            </summary>
            <param name="emitter">The emitter to add to the collection.</param>
            <param name="changeEmitterTarget">Flag to change the emitter's target particle collection.  Defaults to true.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleCollection.Add(SdlDotNet.Particles.ParticleSystem)">
            <summary>
            Adds a collection of particles from a particle system.
            </summary>
            <param name="system">The system containing all the particles.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleCollection.Add(SdlDotNet.Particles.ParticleCollection)">
            <summary>
            Adds a collection of particles from a particle collection.
            </summary>
            <param name="collection">The collection containing all the particles.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleCollection.Update">
            <summary>
            Updates all particles in the collection.
            </summary>
            <returns>True if a particle is still alive.</returns>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleCollection.Render(SdlDotNet.Graphics.Surface)">
            <summary>
            Renders all particles on a destination surface.
            </summary>
            <param name="destination">The surface to render the particles onto.</param>
        </member>
        <member name="T:SdlDotNet.Particles.ParticleRectangle">
            <summary>
            Uses a rectangle to represent a particle on the destination surface.
            </summary>
            <remarks>Use ParticleRectangleEmitter to emit this kind of particle.</remarks>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleRectangle.#ctor">
            <summary>
            Creates a new particle rectangle.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleRectangle.#ctor(System.Drawing.Color)">
            <summary>
            Creates a new particle rectangle with a color.
            </summary>
            <param name="color">The color of the rectangle.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleRectangle.#ctor(System.Drawing.SizeF,System.Drawing.Color)">
            <summary>
            Creates a new particle rectangle with a color and a size.
            </summary>
            <param name="size"></param>
            <param name="color"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleRectangle.#ctor(System.Drawing.SizeF)">
            <summary>
            Creates a new particle rectangle with a size.
            </summary>
            <param name="size">The size of the rectangle.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleRectangle.#ctor(System.Drawing.PointF,System.Drawing.Color)">
            <summary>
            Creates a new particle rectangle with a position and color.
            </summary>
            <param name="pos"></param>
            <param name="color"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleRectangle.#ctor(System.Drawing.PointF)">
            <summary>
            Creates a new particle rectangle with a position.
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleRectangle.#ctor(System.Drawing.RectangleF,System.Drawing.Color)">
            <summary>
            Creates a new particle rectangle with a position, size and color.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleRectangle.#ctor(System.Drawing.RectangleF)">
            <summary>
            Creates a new particle rectangle with a position and size.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleRectangle.Render(SdlDotNet.Graphics.Surface)">
            <summary>
            Draws the particle on the destination surface.
            </summary>
            <param name="destination">The surface to draw the particle on.</param>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleRectangle.Width">
            <summary>
            Gets and sets the width of the rectangle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleRectangle.Height">
            <summary>
            Gets and sets the height of the rectangle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleRectangle.Filled">
            <summary>
            Gets and sets whether or not the rectangle is to be a filled rectangle when drawn on the destination surface.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.ParticleSprite">
            <summary>
            A particle represented by a Sprite.
            </summary>
            <remarks>Use ParticleSpriteEmitter to emit this particle.</remarks>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSprite.#ctor(SdlDotNet.Graphics.Sprites.Sprite)">
            <summary>
            Creates a particle sprite based off an existing sprite.
            </summary>
            <param name="sprite">The sprite to represent this particle.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSprite.#ctor(SdlDotNet.Graphics.Sprites.Sprite,SdlDotNet.Core.Vector)">
            <summary>
            Create a particle sprite with a set velocity.
            </summary>
            <param name="sprite">The sprite to associate with this particle.</param>
            <param name="velocity">The velocity of the particle.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSprite.#ctor(SdlDotNet.Graphics.Sprites.Sprite,System.Single,System.Single)">
            <summary>
            Create a particle sprite at a position.
            </summary>
            <param name="sprite"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSprite.#ctor(SdlDotNet.Graphics.Sprites.Sprite,System.Single,System.Single,SdlDotNet.Core.Vector)">
            <summary>
            
            </summary>
            <param name="sprite"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
            <param name="velocity"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSprite.#ctor(SdlDotNet.Graphics.Sprites.Sprite,SdlDotNet.Core.Vector,System.Int32)">
            <summary>
            
            </summary>
            <param name="sprite"></param>
            <param name="velocity"></param>
            <param name="life"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSprite.#ctor(SdlDotNet.Graphics.Sprites.Sprite,System.Int32)">
            <summary>
            
            </summary>
            <param name="sprite"></param>
            <param name="life"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSprite.#ctor(SdlDotNet.Graphics.Sprites.Sprite,System.Single,System.Single,SdlDotNet.Core.Vector,System.Int32)">
            <summary>
            
            </summary>
            <param name="sprite"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
            <param name="velocity"></param>
            <param name="life"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSprite.Render(SdlDotNet.Graphics.Surface)">
            <summary>
            Renders the sprite on the destination surface.
            </summary>
            <param name="destination">The surface to render the sprite.</param>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleSprite.Sprite">
            <summary>
            The sprite representing the particle on the destination surface.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleSprite.Height">
            <summary>
            Gets the height of the particle's sprite.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleSprite.Width">
            <summary>
            Gets the width of the particle's sprite.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.ParticleSurface">
            <summary>
            A particle represented by a surface.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSurface.#ctor(SdlDotNet.Graphics.Surface,System.Single,System.Single,SdlDotNet.Core.Vector,System.Int32)">
            <summary>
            Creates a particle surface.
            </summary>
            <param name="surface"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
            <param name="velocity"></param>
            <param name="life"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSurface.#ctor(SdlDotNet.Graphics.Surface,System.Single,System.Single,SdlDotNet.Core.Vector)">
            <summary>
            Creates a particle surface.
            </summary>
            <param name="surface"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
            <param name="velocity"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSurface.#ctor(SdlDotNet.Graphics.Surface,System.Single,System.Single)">
            <summary>
            Creates a particle surface.
            </summary>
            <param name="surface"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSurface.#ctor(SdlDotNet.Graphics.Surface,System.Single,System.Single,System.Int32)">
            <summary>
            Creates a particle surface.
            </summary>
            <param name="surface"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
            <param name="life"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSurface.#ctor(SdlDotNet.Graphics.Surface)">
            <summary>
            Creates a particle surface.
            </summary>
            <param name="surface"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSurface.#ctor(SdlDotNet.Graphics.Surface,System.Drawing.Rectangle,System.Single,System.Single,SdlDotNet.Core.Vector,System.Int32)">
            <summary>
            Creates a particle surface.
            </summary>
            <param name="surface"></param>
            <param name="clip"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
            <param name="velocity"></param>
            <param name="life"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSurface.#ctor(SdlDotNet.Graphics.Surface,System.Drawing.Rectangle,System.Single,System.Single,SdlDotNet.Core.Vector)">
            <summary>
            Creates a particle surface.
            </summary>
            <param name="surface"></param>
            <param name="clip"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
            <param name="velocity"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSurface.#ctor(SdlDotNet.Graphics.Surface,System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
            Creates a particle surface.
            </summary>
            <param name="surface"></param>
            <param name="clip"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSurface.#ctor(SdlDotNet.Graphics.Surface,System.Drawing.Rectangle,System.Single,System.Single,System.Int32)">
            <summary>
            Creates a particle surface.
            </summary>
            <param name="surface"></param>
            <param name="clip"></param>
            <param name="positionX"></param>
            <param name="positionY"></param>
            <param name="life"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSurface.#ctor(SdlDotNet.Graphics.Surface,System.Drawing.Rectangle)">
            <summary>
            Creates a particle surface.
            </summary>
            <param name="surface"></param>
            <param name="clip"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSurface.Render(SdlDotNet.Graphics.Surface)">
            <summary>
            Renders the surface as the particle.
            </summary>
            <param name="destination">The surface to blit the particle.</param>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleSurface.Surface">
            <summary>
            Gets and sets the surface used to represent the particle.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleSurface.ClipRectangle">
            <summary>
            Gets and sets the clipping rectangle of the surface.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleSurface.Width">
            <summary>
            Gets the width of the particle's surface.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleSurface.Height">
            <summary>
            Gets the height of the particle's surface.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.ParticleSystem">
            <summary>
            A collection of particles manipulated by a number of common manipulators.
            </summary>
            <example>
            The following example creates a particle system with an pixel emitter and a vortex manipulator.
            <code>
            ParticleSystem system = new ParticleSystem();
            system.Add(new ParticleVortex(0.3f));
            system.Add(new ParticlePixelEmitter(Color.Black, Color.White));
            </code>
            </example>
            <remarks>Every tick you should call the Update method.  Every time you paint, you should call the Render function.</remarks>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.#ctor">
            <summary>
            Creates an empty particle system with no manipulators.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.#ctor(SdlDotNet.Particles.ParticleCollection)">
            <summary>
            Creates a particle system with a collection of particles already in it.
            </summary>
            <param name="particles">The particles to use with this system.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.#ctor(SdlDotNet.Particles.ParticleSystem)">
            <summary>
            Copy Constructor.
            </summary>
            <param name="system">The particle system to copy.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.#ctor(SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection,SdlDotNet.Particles.ParticleCollection)">
            <summary>
            Creates a particle system with an already created manipulators and particles.
            </summary>
            <param name="manipulators">The manipulators to associate with this particle system.</param>
            <param name="particles">The particles to add to this particle system.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.#ctor(SdlDotNet.Particles.Manipulators.ParticleManipulatorCollection)">
            <summary>
            Creates an empty particle system with the desired paritcle manipulators.
            </summary>
            <param name="manipulators">The manipulators to use with the contained particles.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.#ctor(SdlDotNet.Particles.Manipulators.IParticleManipulator)">
            <summary>
            Creates an empty particle system with one particle manipulator.
            </summary>
            <param name="manipulator">The manipulator to use with this particle system.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.Update">
            <summary>
            Updates all particles within this system using the given gravity.
            </summary>
            <returns>True if the system contains particles.</returns>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.Add(SdlDotNet.Particles.BaseParticle)">
            <summary>
            Adds a particle to the system.
            </summary>
            <param name="particle"></param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.Add(SdlDotNet.Particles.Emitters.ParticleEmitter)">
            <summary>
            Add a particle emitter to the particles.
            </summary>
            <param name="emitter">The emitter to add.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.Add(SdlDotNet.Particles.Emitters.ParticleEmitter,System.Boolean)">
            <summary>
            Adds a particle emitter to the particles.
            </summary>
            <param name="emitter">The emitter to add.</param>
            <param name="changeEmitterTarget">Flag to change the emitters target to the particles of this system. Defaults to true.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.Render(SdlDotNet.Graphics.Surface)">
            <summary>
            Renders all particles on the surface destination.
            </summary>
            <param name="destination">The destination surface.</param>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystem.Add(SdlDotNet.Particles.Manipulators.IParticleManipulator)">
            <summary>
            Adds a particle manipulator to the system.
            </summary>
            <param name="manipulator"></param>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleSystem.Manipulators">
            <summary>
            Gets the collection of manipulators to manipulate the particles in the system.
            </summary>
        </member>
        <member name="P:SdlDotNet.Particles.ParticleSystem.Particles">
            <summary>
            Gets the particles contained in the system.
            </summary>
        </member>
        <member name="T:SdlDotNet.Particles.ParticleSystemCollection">
            <summary>
            A collection of independant particle systems.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystemCollection.#ctor">
            <summary>
            Creates an empty collection of particle systems.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystemCollection.Update">
            <summary>
            Updates all particle systems within the collection.
            </summary>
        </member>
        <member name="M:SdlDotNet.Particles.ParticleSystemCollection.Render(SdlDotNet.Graphics.Surface)">
            <summary>
            Renders all particle systems within the collection on the destination surface.
            </summary>
            <param name="destination">The surface to render the particle systems on.</param>
        </member>
        <member name="T:SdlDotNet.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SdlDotNet.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SdlDotNet.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SdlDotNet.Properties.Resources.AudioFormatSupported">
            <summary>
              Looks up a localized string similar to Only AudioFormat.Unsigned16Little currently supported..
            </summary>
        </member>
        <member name="P:SdlDotNet.Properties.Resources.GLGetAttributeImproperResult">
            <summary>
              Looks up a localized string similar to Video.GLGetAttribute returned an improper result.
            </summary>
        </member>
        <member name="P:SdlDotNet.Properties.Resources.HeightOutOfRange">
            <summary>
              Looks up a localized string similar to point.Y must be less then the Height and greater or equal to zero.
            </summary>
        </member>
        <member name="P:SdlDotNet.Properties.Resources.IndexOutOfRange">
            <summary>
              Looks up a localized string similar to Index out of range.
            </summary>
        </member>
        <member name="P:SdlDotNet.Properties.Resources.NotImplemented">
            <summary>
              Looks up a localized string similar to The method or operation is not implemented..
            </summary>
        </member>
        <member name="P:SdlDotNet.Properties.Resources.NullFont">
            <summary>
              Looks up a localized string similar to Cannot assign a null font to value.
            </summary>
        </member>
        <member name="P:SdlDotNet.Properties.Resources.OpenAudioInit">
            <summary>
              Looks up a localized string similar to OpenAudio already called and initialized.  Call CloseAudio first before calling OpenAudio again..
            </summary>
        </member>
        <member name="P:SdlDotNet.Properties.Resources.OpenAudioNotInit">
            <summary>
              Looks up a localized string similar to Call OpenAudio before using function..
            </summary>
        </member>
        <member name="P:SdlDotNet.Properties.Resources.SelectDrive">
            <summary>
              Looks up a localized string similar to Select Drive.
            </summary>
        </member>
        <member name="P:SdlDotNet.Properties.Resources.SpriteCompareException">
            <summary>
              Looks up a localized string similar to object is not a Sprite.
            </summary>
        </member>
        <member name="P:SdlDotNet.Properties.Resources.SupportedAudioFormats">
            <summary>
              Looks up a localized string similar to Only AudioFormat.Unsigned16Little is currently supported.
            </summary>
        </member>
        <member name="P:SdlDotNet.Properties.Resources.UnknownBytesPerPixel">
            <summary>
              Looks up a localized string similar to Unknown Bytes Per Pixel.
            </summary>
        </member>
        <member name="P:SdlDotNet.Properties.Resources.VideoQueryFailed">
            <summary>
              Looks up a localized string similar to Video query failed: .
            </summary>
        </member>
        <member name="P:SdlDotNet.Properties.Resources.WidthOutOfRange">
            <summary>
              Looks up a localized string similar to point.X must be less then the Width and greater or equal to zero.
            </summary>
        </member>
        <member name="T:SdlDotNet.Windows.SurfaceControl">
            <summary>
                Provides a simple Sdl Surface control allowing 
                quick development of Windows Forms-based
                Sdl Surface applications.
            </summary>
        </member>
        <member name="M:SdlDotNet.Windows.SurfaceControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SdlDotNet.Windows.SurfaceControl.Blit(SdlDotNet.Graphics.Surface)">
            <summary>
            Copies surface to this surface
            </summary>
            <param name="surface">surface to copy onto control</param>
        </member>
        <member name="M:SdlDotNet.Windows.SurfaceControl.Blit(SdlDotNet.Graphics.Surface,System.Drawing.Point)">
            <summary>
            Copies surface onto this surface at a set position.
            </summary>
            <param name="sourceSurface"></param>
            <param name="destinationPosition"></param>
        </member>
        <member name="M:SdlDotNet.Windows.SurfaceControl.KeyPressed(System.Windows.Forms.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SdlDotNet.Windows.SurfaceControl.KeyReleased(System.Windows.Forms.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SdlDotNet.Windows.SurfaceControl.OnResize(System.EventArgs)">
            <summary>
            Raises the OnResize event
            </summary>
            <param name="e">Contains the event data</param>
        </member>
        <member name="M:SdlDotNet.Windows.SurfaceControl.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the SizeChanged event
            </summary>
            <param name="e">Contains the event data</param>
        </member>
        <member name="M:SdlDotNet.Windows.SurfaceControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseDown event
            </summary>
            <param name="e">Contains the event data</param>
        </member>
        <member name="M:SdlDotNet.Windows.SurfaceControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseUp event
            </summary>
            <param name="e">Contains the event data</param>
        </member>
        <member name="M:SdlDotNet.Windows.SurfaceControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseWheel Event
            </summary>
            <param name="e">Contains the event data</param>
        </member>
        <member name="M:SdlDotNet.Windows.SurfaceControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseMove event
            </summary>
            <param name="e">Contains the event data</param>
        </member>
        <member name="M:SdlDotNet.Windows.SurfaceControl.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the 
            <see cref="E:System.Windows.Forms.Control.KeyDown"/> event.
            </summary>
            <param name="e">A 
            <see cref="T:System.Windows.Forms.KeyEventArgs"/> 
            that contains the event data.</param>
        </member>
        <member name="M:SdlDotNet.Windows.SurfaceControl.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the 
            <see cref="E:System.Windows.Forms.Control.KeyUp"/> 
            event.
            </summary>
            <param name="e">A 
            <see cref="T:System.Windows.Forms.KeyEventArgs"/> 
            that contains the event data.</param>
        </member>
        <member name="M:SdlDotNet.Windows.SurfaceControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SdlDotNet.Windows.SurfaceControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SdlDotNet.Windows.SurfaceControl.BlitEvent">
            <summary>
            
            </summary>
            <param name="surface"></param>
        </member>
    </members>
</doc>
